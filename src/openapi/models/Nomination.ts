/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NominationAttributes } from './NominationAttributes';
import {
    NominationAttributesFromJSON,
    NominationAttributesFromJSONTyped,
    NominationAttributesToJSON,
} from './NominationAttributes';
import type { NominationRelationships } from './NominationRelationships';
import {
    NominationRelationshipsFromJSON,
    NominationRelationshipsFromJSONTyped,
    NominationRelationshipsToJSON,
} from './NominationRelationships';
import type { ResourceLinks } from './ResourceLinks';
import {
    ResourceLinksFromJSON,
    ResourceLinksFromJSONTyped,
    ResourceLinksToJSON,
} from './ResourceLinks';

/**
 * 
 * @export
 * @interface Nomination
 */
export interface Nomination {
    /**
     * 
     * @type {string}
     * @memberof Nomination
     */
    type: NominationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Nomination
     */
    id: string;
    /**
     * 
     * @type {NominationAttributes}
     * @memberof Nomination
     */
    attributes?: NominationAttributes;
    /**
     * 
     * @type {NominationRelationships}
     * @memberof Nomination
     */
    relationships?: NominationRelationships;
    /**
     * 
     * @type {ResourceLinks}
     * @memberof Nomination
     */
    links?: ResourceLinks;
}


/**
 * @export
 */
export const NominationTypeEnum = {
    Nominations: 'nominations'
} as const;
export type NominationTypeEnum = typeof NominationTypeEnum[keyof typeof NominationTypeEnum];


/**
 * Check if a given object implements the Nomination interface.
 */
export function instanceOfNomination(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function NominationFromJSON(json: any): Nomination {
    return NominationFromJSONTyped(json, false);
}

export function NominationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Nomination {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': json['id'],
        'attributes': !exists(json, 'attributes') ? undefined : NominationAttributesFromJSON(json['attributes']),
        'relationships': !exists(json, 'relationships') ? undefined : NominationRelationshipsFromJSON(json['relationships']),
        'links': !exists(json, 'links') ? undefined : ResourceLinksFromJSON(json['links']),
    };
}

export function NominationToJSON(value?: Nomination | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'id': value.id,
        'attributes': NominationAttributesToJSON(value.attributes),
        'relationships': NominationRelationshipsToJSON(value.relationships),
        'links': ResourceLinksToJSON(value.links),
    };
}

