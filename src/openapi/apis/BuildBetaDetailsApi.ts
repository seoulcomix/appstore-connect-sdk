/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BuildBetaDetailResponse,
  BuildBetaDetailUpdateRequest,
  BuildBetaDetailsResponse,
  BuildResponse,
  ErrorResponse,
} from '../models';
import {
    BuildBetaDetailResponseFromJSON,
    BuildBetaDetailResponseToJSON,
    BuildBetaDetailUpdateRequestFromJSON,
    BuildBetaDetailUpdateRequestToJSON,
    BuildBetaDetailsResponseFromJSON,
    BuildBetaDetailsResponseToJSON,
    BuildResponseFromJSON,
    BuildResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface BuildBetaDetailsBuildGetToOneRelatedRequest {
    id: string;
    fieldsBuilds?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsBuildsEnum>;
    fieldsPreReleaseVersions?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsPreReleaseVersionsEnum>;
    fieldsBetaTesters?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsBetaTestersEnum>;
    fieldsBetaGroups?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsBetaGroupsEnum>;
    fieldsBetaBuildLocalizations?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsBetaBuildLocalizationsEnum>;
    fieldsAppEncryptionDeclarations?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsAppEncryptionDeclarationsEnum>;
    fieldsBetaAppReviewSubmissions?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum>;
    fieldsApps?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsAppsEnum>;
    fieldsBuildBetaDetails?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBetaDetailsEnum>;
    fieldsAppStoreVersions?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsBuildIcons?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsBuildIconsEnum>;
    fieldsBuildBundles?: Array<BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBundlesEnum>;
    include?: Array<BuildBetaDetailsBuildGetToOneRelatedIncludeEnum>;
    limitIndividualTesters?: number;
    limitBetaGroups?: number;
    limitBetaBuildLocalizations?: number;
    limitIcons?: number;
    limitBuildBundles?: number;
}

export interface BuildBetaDetailsGetCollectionRequest {
    filterBuild?: Array<string>;
    filterId?: Array<string>;
    fieldsBuildBetaDetails?: Array<BuildBetaDetailsGetCollectionFieldsBuildBetaDetailsEnum>;
    fieldsBuilds?: Array<BuildBetaDetailsGetCollectionFieldsBuildsEnum>;
    limit?: number;
    include?: Array<BuildBetaDetailsGetCollectionIncludeEnum>;
}

export interface BuildBetaDetailsGetInstanceRequest {
    id: string;
    fieldsBuildBetaDetails?: Array<BuildBetaDetailsGetInstanceFieldsBuildBetaDetailsEnum>;
    fieldsBuilds?: Array<BuildBetaDetailsGetInstanceFieldsBuildsEnum>;
    include?: Array<BuildBetaDetailsGetInstanceIncludeEnum>;
}

export interface BuildBetaDetailsUpdateInstanceRequest {
    id: string;
    buildBetaDetailUpdateRequest: BuildBetaDetailUpdateRequest;
}

/**
 * 
 */
export class BuildBetaDetailsApi extends runtime.BaseAPI {

    /**
     */
    async buildBetaDetailsBuildGetToOneRelatedRaw(requestParameters: BuildBetaDetailsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildBetaDetailsBuildGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaBuildLocalizations) {
            queryParameters['fields[betaBuildLocalizations]'] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppReviewSubmissions) {
            queryParameters['fields[betaAppReviewSubmissions]'] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuildBetaDetails) {
            queryParameters['fields[buildBetaDetails]'] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuildIcons) {
            queryParameters['fields[buildIcons]'] = requestParameters.fieldsBuildIcons.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuildBundles) {
            queryParameters['fields[buildBundles]'] = requestParameters.fieldsBuildBundles.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitIndividualTesters !== undefined) {
            queryParameters['limit[individualTesters]'] = requestParameters.limitIndividualTesters;
        }

        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }

        if (requestParameters.limitBetaBuildLocalizations !== undefined) {
            queryParameters['limit[betaBuildLocalizations]'] = requestParameters.limitBetaBuildLocalizations;
        }

        if (requestParameters.limitIcons !== undefined) {
            queryParameters['limit[icons]'] = requestParameters.limitIcons;
        }

        if (requestParameters.limitBuildBundles !== undefined) {
            queryParameters['limit[buildBundles]'] = requestParameters.limitBuildBundles;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/buildBetaDetails/{id}/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildBetaDetailsBuildGetToOneRelated(requestParameters: BuildBetaDetailsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildResponse> {
        const response = await this.buildBetaDetailsBuildGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildBetaDetailsGetCollectionRaw(requestParameters: BuildBetaDetailsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildBetaDetailsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterBuild) {
            queryParameters['filter[build]'] = requestParameters.filterBuild.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuildBetaDetails) {
            queryParameters['fields[buildBetaDetails]'] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/buildBetaDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildBetaDetailsResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildBetaDetailsGetCollection(requestParameters: BuildBetaDetailsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildBetaDetailsResponse> {
        const response = await this.buildBetaDetailsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildBetaDetailsGetInstanceRaw(requestParameters: BuildBetaDetailsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildBetaDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildBetaDetailsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuildBetaDetails) {
            queryParameters['fields[buildBetaDetails]'] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/buildBetaDetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildBetaDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildBetaDetailsGetInstance(requestParameters: BuildBetaDetailsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildBetaDetailResponse> {
        const response = await this.buildBetaDetailsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildBetaDetailsUpdateInstanceRaw(requestParameters: BuildBetaDetailsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildBetaDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildBetaDetailsUpdateInstance.');
        }

        if (requestParameters.buildBetaDetailUpdateRequest === null || requestParameters.buildBetaDetailUpdateRequest === undefined) {
            throw new runtime.RequiredError('buildBetaDetailUpdateRequest','Required parameter requestParameters.buildBetaDetailUpdateRequest was null or undefined when calling buildBetaDetailsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/buildBetaDetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BuildBetaDetailUpdateRequestToJSON(requestParameters.buildBetaDetailUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildBetaDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildBetaDetailsUpdateInstance(requestParameters: BuildBetaDetailsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildBetaDetailResponse> {
        const response = await this.buildBetaDetailsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsBuildsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBuildsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsPreReleaseVersionsEnum = {
    Version: 'version',
    Platform: 'platform',
    Builds: 'builds',
    App: 'app'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsPreReleaseVersionsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsPreReleaseVersionsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsPreReleaseVersionsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsBetaTestersEnum = {
    FirstName: 'firstName',
    LastName: 'lastName',
    Email: 'email',
    InviteType: 'inviteType',
    State: 'state',
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsBetaTestersEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBetaTestersEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBetaTestersEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsBetaGroupsEnum = {
    Name: 'name',
    CreatedDate: 'createdDate',
    IsInternalGroup: 'isInternalGroup',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLink: 'publicLink',
    FeedbackEnabled: 'feedbackEnabled',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IosBuildsAvailableForAppleVision: 'iosBuildsAvailableForAppleVision',
    App: 'app',
    Builds: 'builds',
    BetaTesters: 'betaTesters',
    BetaRecruitmentCriteria: 'betaRecruitmentCriteria',
    BetaRecruitmentCriterionCompatibleBuildCheck: 'betaRecruitmentCriterionCompatibleBuildCheck'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsBetaGroupsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBetaGroupsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBetaGroupsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsBetaBuildLocalizationsEnum = {
    WhatsNew: 'whatsNew',
    Locale: 'locale',
    Build: 'build'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsBetaBuildLocalizationsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBetaBuildLocalizationsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBetaBuildLocalizationsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = {
    AppDescription: 'appDescription',
    CreatedDate: 'createdDate',
    UsesEncryption: 'usesEncryption',
    Exempt: 'exempt',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    DocumentUrl: 'documentUrl',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    CodeValue: 'codeValue',
    App: 'app',
    Builds: 'builds',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsAppEncryptionDeclarationsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: 'betaReviewState',
    SubmittedDate: 'submittedDate',
    Build: 'build'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsAppsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsAppsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: 'autoNotifyEnabled',
    InternalBuildState: 'internalBuildState',
    ExternalBuildState: 'externalBuildState',
    Build: 'build'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBetaDetailsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBetaDetailsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBetaDetailsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsAppStoreVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    AppStoreState: 'appStoreState',
    AppVersionState: 'appVersionState',
    Copyright: 'copyright',
    ReviewType: 'reviewType',
    ReleaseType: 'releaseType',
    EarliestReleaseDate: 'earliestReleaseDate',
    Downloadable: 'downloadable',
    CreatedDate: 'createdDate',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    Build: 'build',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    GameCenterAppVersion: 'gameCenterAppVersion',
    RoutingAppCoverage: 'routingAppCoverage',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    CustomerReviews: 'customerReviews',
    AlternativeDistributionPackage: 'alternativeDistributionPackage'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsAppStoreVersionsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsAppStoreVersionsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsBuildIconsEnum = {
    Name: 'name',
    IconAsset: 'iconAsset',
    IconType: 'iconType'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsBuildIconsEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBuildIconsEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBuildIconsEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBundlesEnum = {
    BundleId: 'bundleId',
    BundleType: 'bundleType',
    SdkBuild: 'sdkBuild',
    PlatformBuild: 'platformBuild',
    FileName: 'fileName',
    HasSirikit: 'hasSirikit',
    HasOnDemandResources: 'hasOnDemandResources',
    HasPrerenderedIcon: 'hasPrerenderedIcon',
    UsesLocationServices: 'usesLocationServices',
    IsIosBuildMacAppStoreCompatible: 'isIosBuildMacAppStoreCompatible',
    IncludesSymbols: 'includesSymbols',
    DSymUrl: 'dSYMUrl',
    SupportedArchitectures: 'supportedArchitectures',
    RequiredCapabilities: 'requiredCapabilities',
    DeviceProtocols: 'deviceProtocols',
    Locales: 'locales',
    Entitlements: 'entitlements',
    AppClipDomainCacheStatus: 'appClipDomainCacheStatus',
    AppClipDomainDebugStatus: 'appClipDomainDebugStatus',
    BetaAppClipInvocations: 'betaAppClipInvocations',
    BuildBundleFileSizes: 'buildBundleFileSizes'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBundlesEnum = typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBundlesEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedFieldsBuildBundlesEnum];
/**
 * @export
 */
export const BuildBetaDetailsBuildGetToOneRelatedIncludeEnum = {
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles'
} as const;
export type BuildBetaDetailsBuildGetToOneRelatedIncludeEnum = typeof BuildBetaDetailsBuildGetToOneRelatedIncludeEnum[keyof typeof BuildBetaDetailsBuildGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const BuildBetaDetailsGetCollectionFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: 'autoNotifyEnabled',
    InternalBuildState: 'internalBuildState',
    ExternalBuildState: 'externalBuildState',
    Build: 'build'
} as const;
export type BuildBetaDetailsGetCollectionFieldsBuildBetaDetailsEnum = typeof BuildBetaDetailsGetCollectionFieldsBuildBetaDetailsEnum[keyof typeof BuildBetaDetailsGetCollectionFieldsBuildBetaDetailsEnum];
/**
 * @export
 */
export const BuildBetaDetailsGetCollectionFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type BuildBetaDetailsGetCollectionFieldsBuildsEnum = typeof BuildBetaDetailsGetCollectionFieldsBuildsEnum[keyof typeof BuildBetaDetailsGetCollectionFieldsBuildsEnum];
/**
 * @export
 */
export const BuildBetaDetailsGetCollectionIncludeEnum = {
    Build: 'build'
} as const;
export type BuildBetaDetailsGetCollectionIncludeEnum = typeof BuildBetaDetailsGetCollectionIncludeEnum[keyof typeof BuildBetaDetailsGetCollectionIncludeEnum];
/**
 * @export
 */
export const BuildBetaDetailsGetInstanceFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: 'autoNotifyEnabled',
    InternalBuildState: 'internalBuildState',
    ExternalBuildState: 'externalBuildState',
    Build: 'build'
} as const;
export type BuildBetaDetailsGetInstanceFieldsBuildBetaDetailsEnum = typeof BuildBetaDetailsGetInstanceFieldsBuildBetaDetailsEnum[keyof typeof BuildBetaDetailsGetInstanceFieldsBuildBetaDetailsEnum];
/**
 * @export
 */
export const BuildBetaDetailsGetInstanceFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type BuildBetaDetailsGetInstanceFieldsBuildsEnum = typeof BuildBetaDetailsGetInstanceFieldsBuildsEnum[keyof typeof BuildBetaDetailsGetInstanceFieldsBuildsEnum];
/**
 * @export
 */
export const BuildBetaDetailsGetInstanceIncludeEnum = {
    Build: 'build'
} as const;
export type BuildBetaDetailsGetInstanceIncludeEnum = typeof BuildBetaDetailsGetInstanceIncludeEnum[keyof typeof BuildBetaDetailsGetInstanceIncludeEnum];
