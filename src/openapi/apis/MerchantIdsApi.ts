/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CertificatesResponse,
  ErrorResponse,
  MerchantIdCreateRequest,
  MerchantIdResponse,
  MerchantIdUpdateRequest,
  MerchantIdsResponse,
} from '../models';
import {
    CertificatesResponseFromJSON,
    CertificatesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MerchantIdCreateRequestFromJSON,
    MerchantIdCreateRequestToJSON,
    MerchantIdResponseFromJSON,
    MerchantIdResponseToJSON,
    MerchantIdUpdateRequestFromJSON,
    MerchantIdUpdateRequestToJSON,
    MerchantIdsResponseFromJSON,
    MerchantIdsResponseToJSON,
} from '../models';

export interface MerchantIdsCertificatesGetToManyRelatedRequest {
    id: string;
    filterDisplayName?: Array<string>;
    filterCertificateType?: Array<MerchantIdsCertificatesGetToManyRelatedFilterCertificateTypeEnum>;
    filterSerialNumber?: Array<string>;
    filterId?: Array<string>;
    sort?: Array<MerchantIdsCertificatesGetToManyRelatedSortEnum>;
    fieldsCertificates?: Array<MerchantIdsCertificatesGetToManyRelatedFieldsCertificatesEnum>;
    limit?: number;
}

export interface MerchantIdsCreateInstanceRequest {
    merchantIdCreateRequest: MerchantIdCreateRequest;
}

export interface MerchantIdsDeleteInstanceRequest {
    id: string;
}

export interface MerchantIdsGetCollectionRequest {
    filterName?: Array<string>;
    filterIdentifier?: Array<string>;
    sort?: Array<MerchantIdsGetCollectionSortEnum>;
    fieldsMerchantIds?: Array<MerchantIdsGetCollectionFieldsMerchantIdsEnum>;
    fieldsCertificates?: Array<MerchantIdsGetCollectionFieldsCertificatesEnum>;
    limit?: number;
    include?: Array<MerchantIdsGetCollectionIncludeEnum>;
    limitCertificates?: number;
}

export interface MerchantIdsGetInstanceRequest {
    id: string;
    fieldsMerchantIds?: Array<MerchantIdsGetInstanceFieldsMerchantIdsEnum>;
    fieldsCertificates?: Array<MerchantIdsGetInstanceFieldsCertificatesEnum>;
    include?: Array<MerchantIdsGetInstanceIncludeEnum>;
    limitCertificates?: number;
}

export interface MerchantIdsUpdateInstanceRequest {
    id: string;
    merchantIdUpdateRequest: MerchantIdUpdateRequest;
}

/**
 * 
 */
export class MerchantIdsApi extends runtime.BaseAPI {

    /**
     */
    async merchantIdsCertificatesGetToManyRelatedRaw(requestParameters: MerchantIdsCertificatesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificatesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling merchantIdsCertificatesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterDisplayName) {
            queryParameters['filter[displayName]'] = requestParameters.filterDisplayName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterCertificateType) {
            queryParameters['filter[certificateType]'] = requestParameters.filterCertificateType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterSerialNumber) {
            queryParameters['filter[serialNumber]'] = requestParameters.filterSerialNumber.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCertificates) {
            queryParameters['fields[certificates]'] = requestParameters.fieldsCertificates.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/merchantIds/{id}/certificates`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificatesResponseFromJSON(jsonValue));
    }

    /**
     */
    async merchantIdsCertificatesGetToManyRelated(requestParameters: MerchantIdsCertificatesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificatesResponse> {
        const response = await this.merchantIdsCertificatesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async merchantIdsCreateInstanceRaw(requestParameters: MerchantIdsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantIdResponse>> {
        if (requestParameters.merchantIdCreateRequest === null || requestParameters.merchantIdCreateRequest === undefined) {
            throw new runtime.RequiredError('merchantIdCreateRequest','Required parameter requestParameters.merchantIdCreateRequest was null or undefined when calling merchantIdsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/merchantIds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MerchantIdCreateRequestToJSON(requestParameters.merchantIdCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async merchantIdsCreateInstance(requestParameters: MerchantIdsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantIdResponse> {
        const response = await this.merchantIdsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async merchantIdsDeleteInstanceRaw(requestParameters: MerchantIdsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling merchantIdsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/merchantIds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async merchantIdsDeleteInstance(requestParameters: MerchantIdsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantIdsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async merchantIdsGetCollectionRaw(requestParameters: MerchantIdsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantIdsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterIdentifier) {
            queryParameters['filter[identifier]'] = requestParameters.filterIdentifier.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsMerchantIds) {
            queryParameters['fields[merchantIds]'] = requestParameters.fieldsMerchantIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCertificates) {
            queryParameters['fields[certificates]'] = requestParameters.fieldsCertificates.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitCertificates !== undefined) {
            queryParameters['limit[certificates]'] = requestParameters.limitCertificates;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/merchantIds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantIdsResponseFromJSON(jsonValue));
    }

    /**
     */
    async merchantIdsGetCollection(requestParameters: MerchantIdsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantIdsResponse> {
        const response = await this.merchantIdsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async merchantIdsGetInstanceRaw(requestParameters: MerchantIdsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantIdResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling merchantIdsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsMerchantIds) {
            queryParameters['fields[merchantIds]'] = requestParameters.fieldsMerchantIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCertificates) {
            queryParameters['fields[certificates]'] = requestParameters.fieldsCertificates.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitCertificates !== undefined) {
            queryParameters['limit[certificates]'] = requestParameters.limitCertificates;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/merchantIds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async merchantIdsGetInstance(requestParameters: MerchantIdsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantIdResponse> {
        const response = await this.merchantIdsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async merchantIdsUpdateInstanceRaw(requestParameters: MerchantIdsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantIdResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling merchantIdsUpdateInstance.');
        }

        if (requestParameters.merchantIdUpdateRequest === null || requestParameters.merchantIdUpdateRequest === undefined) {
            throw new runtime.RequiredError('merchantIdUpdateRequest','Required parameter requestParameters.merchantIdUpdateRequest was null or undefined when calling merchantIdsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/merchantIds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MerchantIdUpdateRequestToJSON(requestParameters.merchantIdUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantIdResponseFromJSON(jsonValue));
    }

    /**
     */
    async merchantIdsUpdateInstance(requestParameters: MerchantIdsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantIdResponse> {
        const response = await this.merchantIdsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MerchantIdsCertificatesGetToManyRelatedFilterCertificateTypeEnum = {
    ApplePay: 'APPLE_PAY',
    ApplePayMerchantIdentity: 'APPLE_PAY_MERCHANT_IDENTITY',
    ApplePayPspIdentity: 'APPLE_PAY_PSP_IDENTITY',
    ApplePayRsa: 'APPLE_PAY_RSA',
    DeveloperIdKext: 'DEVELOPER_ID_KEXT',
    DeveloperIdKextG2: 'DEVELOPER_ID_KEXT_G2',
    DeveloperIdApplication: 'DEVELOPER_ID_APPLICATION',
    DeveloperIdApplicationG2: 'DEVELOPER_ID_APPLICATION_G2',
    Development: 'DEVELOPMENT',
    Distribution: 'DISTRIBUTION',
    IdentityAccess: 'IDENTITY_ACCESS',
    IosDevelopment: 'IOS_DEVELOPMENT',
    IosDistribution: 'IOS_DISTRIBUTION',
    MacAppDistribution: 'MAC_APP_DISTRIBUTION',
    MacInstallerDistribution: 'MAC_INSTALLER_DISTRIBUTION',
    MacAppDevelopment: 'MAC_APP_DEVELOPMENT',
    PassTypeId: 'PASS_TYPE_ID',
    PassTypeIdWithNfc: 'PASS_TYPE_ID_WITH_NFC'
} as const;
export type MerchantIdsCertificatesGetToManyRelatedFilterCertificateTypeEnum = typeof MerchantIdsCertificatesGetToManyRelatedFilterCertificateTypeEnum[keyof typeof MerchantIdsCertificatesGetToManyRelatedFilterCertificateTypeEnum];
/**
 * @export
 */
export const MerchantIdsCertificatesGetToManyRelatedSortEnum = {
    DisplayName: 'displayName',
    DisplayName: '-displayName',
    CertificateType: 'certificateType',
    CertificateType: '-certificateType',
    SerialNumber: 'serialNumber',
    SerialNumber: '-serialNumber',
    Id: 'id',
    Id: '-id'
} as const;
export type MerchantIdsCertificatesGetToManyRelatedSortEnum = typeof MerchantIdsCertificatesGetToManyRelatedSortEnum[keyof typeof MerchantIdsCertificatesGetToManyRelatedSortEnum];
/**
 * @export
 */
export const MerchantIdsCertificatesGetToManyRelatedFieldsCertificatesEnum = {
    Name: 'name',
    CertificateType: 'certificateType',
    DisplayName: 'displayName',
    SerialNumber: 'serialNumber',
    Platform: 'platform',
    ExpirationDate: 'expirationDate',
    CertificateContent: 'certificateContent',
    Activated: 'activated'
} as const;
export type MerchantIdsCertificatesGetToManyRelatedFieldsCertificatesEnum = typeof MerchantIdsCertificatesGetToManyRelatedFieldsCertificatesEnum[keyof typeof MerchantIdsCertificatesGetToManyRelatedFieldsCertificatesEnum];
/**
 * @export
 */
export const MerchantIdsGetCollectionSortEnum = {
    Name: 'name',
    Name: '-name',
    Identifier: 'identifier',
    Identifier: '-identifier'
} as const;
export type MerchantIdsGetCollectionSortEnum = typeof MerchantIdsGetCollectionSortEnum[keyof typeof MerchantIdsGetCollectionSortEnum];
/**
 * @export
 */
export const MerchantIdsGetCollectionFieldsMerchantIdsEnum = {
    Name: 'name',
    Identifier: 'identifier',
    Certificates: 'certificates'
} as const;
export type MerchantIdsGetCollectionFieldsMerchantIdsEnum = typeof MerchantIdsGetCollectionFieldsMerchantIdsEnum[keyof typeof MerchantIdsGetCollectionFieldsMerchantIdsEnum];
/**
 * @export
 */
export const MerchantIdsGetCollectionFieldsCertificatesEnum = {
    Name: 'name',
    CertificateType: 'certificateType',
    DisplayName: 'displayName',
    SerialNumber: 'serialNumber',
    Platform: 'platform',
    ExpirationDate: 'expirationDate',
    CertificateContent: 'certificateContent',
    Activated: 'activated'
} as const;
export type MerchantIdsGetCollectionFieldsCertificatesEnum = typeof MerchantIdsGetCollectionFieldsCertificatesEnum[keyof typeof MerchantIdsGetCollectionFieldsCertificatesEnum];
/**
 * @export
 */
export const MerchantIdsGetCollectionIncludeEnum = {
    Certificates: 'certificates'
} as const;
export type MerchantIdsGetCollectionIncludeEnum = typeof MerchantIdsGetCollectionIncludeEnum[keyof typeof MerchantIdsGetCollectionIncludeEnum];
/**
 * @export
 */
export const MerchantIdsGetInstanceFieldsMerchantIdsEnum = {
    Name: 'name',
    Identifier: 'identifier',
    Certificates: 'certificates'
} as const;
export type MerchantIdsGetInstanceFieldsMerchantIdsEnum = typeof MerchantIdsGetInstanceFieldsMerchantIdsEnum[keyof typeof MerchantIdsGetInstanceFieldsMerchantIdsEnum];
/**
 * @export
 */
export const MerchantIdsGetInstanceFieldsCertificatesEnum = {
    Name: 'name',
    CertificateType: 'certificateType',
    DisplayName: 'displayName',
    SerialNumber: 'serialNumber',
    Platform: 'platform',
    ExpirationDate: 'expirationDate',
    CertificateContent: 'certificateContent',
    Activated: 'activated'
} as const;
export type MerchantIdsGetInstanceFieldsCertificatesEnum = typeof MerchantIdsGetInstanceFieldsCertificatesEnum[keyof typeof MerchantIdsGetInstanceFieldsCertificatesEnum];
/**
 * @export
 */
export const MerchantIdsGetInstanceIncludeEnum = {
    Certificates: 'certificates'
} as const;
export type MerchantIdsGetInstanceIncludeEnum = typeof MerchantIdsGetInstanceIncludeEnum[keyof typeof MerchantIdsGetInstanceIncludeEnum];
