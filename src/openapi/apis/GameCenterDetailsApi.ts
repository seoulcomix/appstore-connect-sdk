/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterAchievementReleasesResponse,
  GameCenterAchievementsResponse,
  GameCenterAppVersionsResponse,
  GameCenterDetailCreateRequest,
  GameCenterDetailGameCenterAchievementsLinkagesRequest,
  GameCenterDetailGameCenterAchievementsLinkagesResponse,
  GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest,
  GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse,
  GameCenterDetailGameCenterLeaderboardsLinkagesRequest,
  GameCenterDetailGameCenterLeaderboardsLinkagesResponse,
  GameCenterDetailResponse,
  GameCenterDetailUpdateRequest,
  GameCenterGroupResponse,
  GameCenterLeaderboardReleasesResponse,
  GameCenterLeaderboardSetReleasesResponse,
  GameCenterLeaderboardSetsResponse,
  GameCenterLeaderboardsResponse,
  GameCenterMatchmakingAppRequestsV1MetricResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterAchievementReleasesResponseFromJSON,
    GameCenterAchievementReleasesResponseToJSON,
    GameCenterAchievementsResponseFromJSON,
    GameCenterAchievementsResponseToJSON,
    GameCenterAppVersionsResponseFromJSON,
    GameCenterAppVersionsResponseToJSON,
    GameCenterDetailCreateRequestFromJSON,
    GameCenterDetailCreateRequestToJSON,
    GameCenterDetailGameCenterAchievementsLinkagesRequestFromJSON,
    GameCenterDetailGameCenterAchievementsLinkagesRequestToJSON,
    GameCenterDetailGameCenterAchievementsLinkagesResponseFromJSON,
    GameCenterDetailGameCenterAchievementsLinkagesResponseToJSON,
    GameCenterDetailGameCenterLeaderboardSetsLinkagesRequestFromJSON,
    GameCenterDetailGameCenterLeaderboardSetsLinkagesRequestToJSON,
    GameCenterDetailGameCenterLeaderboardSetsLinkagesResponseFromJSON,
    GameCenterDetailGameCenterLeaderboardSetsLinkagesResponseToJSON,
    GameCenterDetailGameCenterLeaderboardsLinkagesRequestFromJSON,
    GameCenterDetailGameCenterLeaderboardsLinkagesRequestToJSON,
    GameCenterDetailGameCenterLeaderboardsLinkagesResponseFromJSON,
    GameCenterDetailGameCenterLeaderboardsLinkagesResponseToJSON,
    GameCenterDetailResponseFromJSON,
    GameCenterDetailResponseToJSON,
    GameCenterDetailUpdateRequestFromJSON,
    GameCenterDetailUpdateRequestToJSON,
    GameCenterGroupResponseFromJSON,
    GameCenterGroupResponseToJSON,
    GameCenterLeaderboardReleasesResponseFromJSON,
    GameCenterLeaderboardReleasesResponseToJSON,
    GameCenterLeaderboardSetReleasesResponseFromJSON,
    GameCenterLeaderboardSetReleasesResponseToJSON,
    GameCenterLeaderboardSetsResponseFromJSON,
    GameCenterLeaderboardSetsResponseToJSON,
    GameCenterLeaderboardsResponseFromJSON,
    GameCenterLeaderboardsResponseToJSON,
    GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON,
    GameCenterMatchmakingAppRequestsV1MetricResponseToJSON,
} from '../models';

export interface GameCenterDetailsAchievementReleasesGetToManyRelatedRequest {
    id: string;
    filterLive?: Array<string>;
    filterGameCenterAchievement?: Array<string>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterDetails?: Array<GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    limit?: number;
    include?: Array<GameCenterDetailsAchievementReleasesGetToManyRelatedIncludeEnum>;
}

export interface GameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest {
    id: string;
    granularity: GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum;
    groupBy?: Array<GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum>;
    filterResult?: GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum;
    sort?: Array<GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum>;
    limit?: number;
}

export interface GameCenterDetailsCreateInstanceRequest {
    gameCenterDetailCreateRequest: GameCenterDetailCreateRequest;
}

export interface GameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
    id: string;
    filterReferenceName?: Array<string>;
    filterArchived?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterAchievements?: Array<GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum>;
    limit?: number;
    include?: Array<GameCenterDetailsGameCenterAchievementsGetToManyRelatedIncludeEnum>;
    limitLocalizations?: number;
    limitReleases?: number;
}

export interface GameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterDetailGameCenterAchievementsLinkagesRequest: GameCenterDetailGameCenterAchievementsLinkagesRequest;
}

export interface GameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest {
    id: string;
    filterEnabled?: Array<string>;
    fieldsGameCenterAppVersions?: Array<GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum>;
    fieldsAppStoreVersions?: Array<GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsAppStoreVersionsEnum>;
    limit?: number;
    include?: Array<GameCenterDetailsGameCenterAppVersionsGetToManyRelatedIncludeEnum>;
    limitCompatibilityVersions?: number;
}

export interface GameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
    id: string;
    fieldsGameCenterGroups?: Array<GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterAchievementsEnum>;
    include?: Array<GameCenterDetailsGameCenterGroupGetToOneRelatedIncludeEnum>;
    limitGameCenterDetails?: number;
    limitGameCenterLeaderboards?: number;
    limitGameCenterLeaderboardSets?: number;
    limitGameCenterAchievements?: number;
}

export interface GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
    id: string;
    filterReferenceName?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterLeaderboardSetLocalizations?: Array<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum>;
    limit?: number;
    include?: Array<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum>;
    limitLocalizations?: number;
    limitGameCenterLeaderboards?: number;
    limitReleases?: number;
}

export interface GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest: GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest;
}

export interface GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
    id: string;
    filterReferenceName?: Array<string>;
    filterArchived?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterLeaderboards?: Array<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterLeaderboardLocalizations?: Array<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    limit?: number;
    include?: Array<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedIncludeEnum>;
    limitGameCenterLeaderboardSets?: number;
    limitLocalizations?: number;
    limitReleases?: number;
}

export interface GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterDetailGameCenterLeaderboardsLinkagesRequest: GameCenterDetailGameCenterLeaderboardsLinkagesRequest;
}

export interface GameCenterDetailsGetInstanceRequest {
    id: string;
    fieldsGameCenterDetails?: Array<GameCenterDetailsGetInstanceFieldsGameCenterDetailsEnum>;
    fieldsGameCenterAppVersions?: Array<GameCenterDetailsGetInstanceFieldsGameCenterAppVersionsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterDetailsGetInstanceFieldsGameCenterGroupsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterDetailsGetInstanceFieldsGameCenterAchievementsEnum>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterDetailsGetInstanceFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardReleasesEnum>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum>;
    include?: Array<GameCenterDetailsGetInstanceIncludeEnum>;
    limitAchievementReleases?: number;
    limitGameCenterAchievements?: number;
    limitGameCenterAppVersions?: number;
    limitGameCenterLeaderboardSets?: number;
    limitGameCenterLeaderboards?: number;
    limitLeaderboardReleases?: number;
    limitLeaderboardSetReleases?: number;
}

export interface GameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest {
    id: string;
    filterLive?: Array<string>;
    filterGameCenterLeaderboard?: Array<string>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    fieldsGameCenterDetails?: Array<GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    limit?: number;
    include?: Array<GameCenterDetailsLeaderboardReleasesGetToManyRelatedIncludeEnum>;
}

export interface GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest {
    id: string;
    filterLive?: Array<string>;
    filterGameCenterLeaderboardSet?: Array<string>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum>;
    fieldsGameCenterDetails?: Array<GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    limit?: number;
    include?: Array<GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedIncludeEnum>;
}

export interface GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest {
    id: string;
    granularity: GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum;
    groupBy?: Array<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum>;
    filterResult?: GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum;
    sort?: Array<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum>;
    limit?: number;
}

export interface GameCenterDetailsUpdateInstanceRequest {
    id: string;
    gameCenterDetailUpdateRequest: GameCenterDetailUpdateRequest;
}

/**
 * 
 */
export class GameCenterDetailsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterDetailsAchievementReleasesGetToManyRelatedRaw(requestParameters: GameCenterDetailsAchievementReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementReleasesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsAchievementReleasesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterLive) {
            queryParameters['filter[live]'] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterGameCenterAchievement) {
            queryParameters['filter[gameCenterAchievement]'] = requestParameters.filterGameCenterAchievement.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/achievementReleases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementReleasesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsAchievementReleasesGetToManyRelated(requestParameters: GameCenterDetailsAchievementReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementReleasesResponse> {
        const response = await this.gameCenterDetailsAchievementReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsClassicMatchmakingRequestsGetMetricsRaw(requestParameters: GameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterResult !== undefined) {
            queryParameters['filter[result]'] = requestParameters.filterResult;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsClassicMatchmakingRequestsGetMetrics(requestParameters: GameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingAppRequestsV1MetricResponse> {
        const response = await this.gameCenterDetailsClassicMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsCreateInstanceRaw(requestParameters: GameCenterDetailsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterDetailResponse>> {
        if (requestParameters.gameCenterDetailCreateRequest === null || requestParameters.gameCenterDetailCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterDetailCreateRequest','Required parameter requestParameters.gameCenterDetailCreateRequest was null or undefined when calling gameCenterDetailsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterDetailCreateRequestToJSON(requestParameters.gameCenterDetailCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsCreateInstance(requestParameters: GameCenterDetailsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterDetailResponse> {
        const response = await this.gameCenterDetailsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsGameCenterAchievementsGetToManyRelatedRaw(requestParameters: GameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterAchievementsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterReferenceName) {
            queryParameters['filter[referenceName]'] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterArchived) {
            queryParameters['filter[archived]'] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementLocalizations) {
            queryParameters['fields[gameCenterAchievementLocalizations]'] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsGameCenterAchievementsGetToManyRelated(requestParameters: GameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementsResponse> {
        const response = await this.gameCenterDetailsGameCenterAchievementsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsGameCenterAchievementsGetToManyRelationshipRaw(requestParameters: GameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterDetailGameCenterAchievementsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterAchievementsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterDetailGameCenterAchievementsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsGameCenterAchievementsGetToManyRelationship(requestParameters: GameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterDetailGameCenterAchievementsLinkagesResponse> {
        const response = await this.gameCenterDetailsGameCenterAchievementsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRaw(requestParameters: GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship.');
        }

        if (requestParameters.gameCenterDetailGameCenterAchievementsLinkagesRequest === null || requestParameters.gameCenterDetailGameCenterAchievementsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterDetailGameCenterAchievementsLinkagesRequest','Required parameter requestParameters.gameCenterDetailGameCenterAchievementsLinkagesRequest was null or undefined when calling gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterDetailGameCenterAchievementsLinkagesRequestToJSON(requestParameters.gameCenterDetailGameCenterAchievementsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship(requestParameters: GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterDetailsGameCenterAppVersionsGetToManyRelatedRaw(requestParameters: GameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAppVersionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterAppVersionsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterEnabled) {
            queryParameters['filter[enabled]'] = requestParameters.filterEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAppVersions) {
            queryParameters['fields[gameCenterAppVersions]'] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitCompatibilityVersions !== undefined) {
            queryParameters['limit[compatibilityVersions]'] = requestParameters.limitCompatibilityVersions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/gameCenterAppVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAppVersionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsGameCenterAppVersionsGetToManyRelated(requestParameters: GameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAppVersionsResponse> {
        const response = await this.gameCenterDetailsGameCenterAppVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsGameCenterGroupGetToOneRelatedRaw(requestParameters: GameCenterDetailsGameCenterGroupGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterGroupGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterDetails !== undefined) {
            queryParameters['limit[gameCenterDetails]'] = requestParameters.limitGameCenterDetails;
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitGameCenterAchievements !== undefined) {
            queryParameters['limit[gameCenterAchievements]'] = requestParameters.limitGameCenterAchievements;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/gameCenterGroup`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsGameCenterGroupGetToOneRelated(requestParameters: GameCenterDetailsGameCenterGroupGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupResponse> {
        const response = await this.gameCenterDetailsGameCenterGroupGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRaw(requestParameters: GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterReferenceName) {
            queryParameters['filter[referenceName]'] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
            queryParameters['fields[gameCenterLeaderboardSetLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated(requestParameters: GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetsResponse> {
        const response = await this.gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRaw(requestParameters: GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterDetailGameCenterLeaderboardSetsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship(requestParameters: GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse> {
        const response = await this.gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRaw(requestParameters: GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship.');
        }

        if (requestParameters.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest === null || requestParameters.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest','Required parameter requestParameters.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest was null or undefined when calling gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterDetailGameCenterLeaderboardSetsLinkagesRequestToJSON(requestParameters.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship(requestParameters: GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters: GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterReferenceName) {
            queryParameters['filter[referenceName]'] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterArchived) {
            queryParameters['filter[archived]'] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardLocalizations) {
            queryParameters['fields[gameCenterLeaderboardLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardsGetToManyRelated(requestParameters: GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardsResponse> {
        const response = await this.gameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters: GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterDetailGameCenterLeaderboardsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterDetailGameCenterLeaderboardsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardsGetToManyRelationship(requestParameters: GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterDetailGameCenterLeaderboardsLinkagesResponse> {
        const response = await this.gameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters: GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship.');
        }

        if (requestParameters.gameCenterDetailGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterDetailGameCenterLeaderboardsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterDetailGameCenterLeaderboardsLinkagesRequest','Required parameter requestParameters.gameCenterDetailGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterDetailGameCenterLeaderboardsLinkagesRequestToJSON(requestParameters.gameCenterDetailGameCenterLeaderboardsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship(requestParameters: GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterDetailsGetInstanceRaw(requestParameters: GameCenterDetailsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAppVersions) {
            queryParameters['fields[gameCenterAppVersions]'] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAchievementReleases !== undefined) {
            queryParameters['limit[achievementReleases]'] = requestParameters.limitAchievementReleases;
        }

        if (requestParameters.limitGameCenterAchievements !== undefined) {
            queryParameters['limit[gameCenterAchievements]'] = requestParameters.limitGameCenterAchievements;
        }

        if (requestParameters.limitGameCenterAppVersions !== undefined) {
            queryParameters['limit[gameCenterAppVersions]'] = requestParameters.limitGameCenterAppVersions;
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        if (requestParameters.limitLeaderboardReleases !== undefined) {
            queryParameters['limit[leaderboardReleases]'] = requestParameters.limitLeaderboardReleases;
        }

        if (requestParameters.limitLeaderboardSetReleases !== undefined) {
            queryParameters['limit[leaderboardSetReleases]'] = requestParameters.limitLeaderboardSetReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsGetInstance(requestParameters: GameCenterDetailsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterDetailResponse> {
        const response = await this.gameCenterDetailsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsLeaderboardReleasesGetToManyRelatedRaw(requestParameters: GameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardReleasesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsLeaderboardReleasesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterLive) {
            queryParameters['filter[live]'] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterGameCenterLeaderboard) {
            queryParameters['filter[gameCenterLeaderboard]'] = requestParameters.filterGameCenterLeaderboard.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/leaderboardReleases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardReleasesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsLeaderboardReleasesGetToManyRelated(requestParameters: GameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardReleasesResponse> {
        const response = await this.gameCenterDetailsLeaderboardReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRaw(requestParameters: GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetReleasesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsLeaderboardSetReleasesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterLive) {
            queryParameters['filter[live]'] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterGameCenterLeaderboardSet) {
            queryParameters['filter[gameCenterLeaderboardSet]'] = requestParameters.filterGameCenterLeaderboardSet.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/leaderboardSetReleases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetReleasesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsLeaderboardSetReleasesGetToManyRelated(requestParameters: GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetReleasesResponse> {
        const response = await this.gameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRaw(requestParameters: GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterResult !== undefined) {
            queryParameters['filter[result]'] = requestParameters.filterResult;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(requestParameters: GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingAppRequestsV1MetricResponse> {
        const response = await this.gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsUpdateInstanceRaw(requestParameters: GameCenterDetailsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsUpdateInstance.');
        }

        if (requestParameters.gameCenterDetailUpdateRequest === null || requestParameters.gameCenterDetailUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterDetailUpdateRequest','Required parameter requestParameters.gameCenterDetailUpdateRequest was null or undefined when calling gameCenterDetailsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterDetailUpdateRequestToJSON(requestParameters.gameCenterDetailUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsUpdateInstance(requestParameters: GameCenterDetailsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterDetailResponse> {
        const response = await this.gameCenterDetailsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterAchievement: 'gameCenterAchievement'
} as const;
export type GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = typeof GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    Points: 'points',
    ShowBeforeEarned: 'showBeforeEarned',
    Repeatable: 'repeatable',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum = typeof GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum[keyof typeof GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterDetailsAchievementReleasesGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterAchievement: 'gameCenterAchievement'
} as const;
export type GameCenterDetailsAchievementReleasesGetToManyRelatedIncludeEnum = typeof GameCenterDetailsAchievementReleasesGetToManyRelatedIncludeEnum[keyof typeof GameCenterDetailsAchievementReleasesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum = typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum[keyof typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum = {
    Result: 'result'
} as const;
export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum = typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum[keyof typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum];
/**
 * @export
 */
export const GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: 'MATCHED',
    Canceled: 'CANCELED',
    Expired: 'EXPIRED'
} as const;
export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum = typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum[keyof typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum];
/**
 * @export
 */
export const GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum = {
    Count: 'count',
    Count: '-count',
    AverageSecondsInQueue: 'averageSecondsInQueue',
    AverageSecondsInQueue: '-averageSecondsInQueue',
    P50SecondsInQueue: 'p50SecondsInQueue',
    P50SecondsInQueue: '-p50SecondsInQueue',
    P95SecondsInQueue: 'p95SecondsInQueue',
    P95SecondsInQueue: '-p95SecondsInQueue'
} as const;
export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum = typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum[keyof typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    Points: 'points',
    ShowBeforeEarned: 'showBeforeEarned',
    Repeatable: 'repeatable',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum = typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum[keyof typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum = typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    BeforeEarnedDescription: 'beforeEarnedDescription',
    AfterEarnedDescription: 'afterEarnedDescription',
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage'
} as const;
export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum[keyof typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterAchievement: 'gameCenterAchievement'
} as const;
export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterAchievementsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedIncludeEnum = typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedIncludeEnum[keyof typeof GameCenterDetailsGameCenterAchievementsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = {
    Enabled: 'enabled',
    CompatibilityVersions: 'compatibilityVersions',
    AppStoreVersion: 'appStoreVersion'
} as const;
export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = typeof GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum[keyof typeof GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    AppStoreState: 'appStoreState',
    AppVersionState: 'appVersionState',
    Copyright: 'copyright',
    ReviewType: 'reviewType',
    ReleaseType: 'releaseType',
    EarliestReleaseDate: 'earliestReleaseDate',
    Downloadable: 'downloadable',
    CreatedDate: 'createdDate',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    Build: 'build',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    GameCenterAppVersion: 'gameCenterAppVersion',
    RoutingAppCoverage: 'routingAppCoverage',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    CustomerReviews: 'customerReviews',
    AlternativeDistributionPackage: 'alternativeDistributionPackage'
} as const;
export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = typeof GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsAppStoreVersionsEnum[keyof typeof GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterAppVersionsGetToManyRelatedIncludeEnum = {
    CompatibilityVersions: 'compatibilityVersions',
    AppStoreVersion: 'appStoreVersion'
} as const;
export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedIncludeEnum = typeof GameCenterDetailsGameCenterAppVersionsGetToManyRelatedIncludeEnum[keyof typeof GameCenterDetailsGameCenterAppVersionsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterGroupsEnum = typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterDetailsEnum = typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterAchievementsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    Points: 'points',
    ShowBeforeEarned: 'showBeforeEarned',
    Repeatable: 'repeatable',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterAchievementsEnum = typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterAchievementsEnum[keyof typeof GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterGroupGetToOneRelatedIncludeEnum = {
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterDetailsGameCenterGroupGetToOneRelatedIncludeEnum = typeof GameCenterDetailsGameCenterGroupGetToOneRelatedIncludeEnum[keyof typeof GameCenterDetailsGameCenterGroupGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum = typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    GameCenterLeaderboardSetImage: 'gameCenterLeaderboardSetImage'
} as const;
export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet'
} as const;
export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum = typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    FormatterOverride: 'formatterOverride',
    FormatterSuffix: 'formatterSuffix',
    FormatterSuffixSingular: 'formatterSuffixSingular',
    GameCenterLeaderboard: 'gameCenterLeaderboard',
    GameCenterLeaderboardImage: 'gameCenterLeaderboardImage'
} as const;
export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedIncludeEnum[keyof typeof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterDetailsGetInstanceFieldsGameCenterDetailsEnum = typeof GameCenterDetailsGetInstanceFieldsGameCenterDetailsEnum[keyof typeof GameCenterDetailsGetInstanceFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceFieldsGameCenterAppVersionsEnum = {
    Enabled: 'enabled',
    CompatibilityVersions: 'compatibilityVersions',
    AppStoreVersion: 'appStoreVersion'
} as const;
export type GameCenterDetailsGetInstanceFieldsGameCenterAppVersionsEnum = typeof GameCenterDetailsGetInstanceFieldsGameCenterAppVersionsEnum[keyof typeof GameCenterDetailsGetInstanceFieldsGameCenterAppVersionsEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterDetailsGetInstanceFieldsGameCenterGroupsEnum = typeof GameCenterDetailsGetInstanceFieldsGameCenterGroupsEnum[keyof typeof GameCenterDetailsGetInstanceFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardsEnum = typeof GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceFieldsGameCenterAchievementsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    Points: 'points',
    ShowBeforeEarned: 'showBeforeEarned',
    Repeatable: 'repeatable',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsGetInstanceFieldsGameCenterAchievementsEnum = typeof GameCenterDetailsGetInstanceFieldsGameCenterAchievementsEnum[keyof typeof GameCenterDetailsGetInstanceFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceFieldsGameCenterAchievementReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterAchievement: 'gameCenterAchievement'
} as const;
export type GameCenterDetailsGetInstanceFieldsGameCenterAchievementReleasesEnum = typeof GameCenterDetailsGetInstanceFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterDetailsGetInstanceFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardReleasesEnum = typeof GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardReleasesEnum[keyof typeof GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet'
} as const;
export type GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = typeof GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const GameCenterDetailsGetInstanceIncludeEnum = {
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterDetailsGetInstanceIncludeEnum = typeof GameCenterDetailsGetInstanceIncludeEnum[keyof typeof GameCenterDetailsGetInstanceIncludeEnum];
/**
 * @export
 */
export const GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = typeof GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum[keyof typeof GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterDetailsLeaderboardReleasesGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedIncludeEnum = typeof GameCenterDetailsLeaderboardReleasesGetToManyRelatedIncludeEnum[keyof typeof GameCenterDetailsLeaderboardReleasesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet'
} as const;
export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = typeof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet'
} as const;
export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedIncludeEnum = typeof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedIncludeEnum[keyof typeof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum = typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum[keyof typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum = {
    Result: 'result'
} as const;
export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum = typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum[keyof typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum];
/**
 * @export
 */
export const GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: 'MATCHED',
    Canceled: 'CANCELED',
    Expired: 'EXPIRED'
} as const;
export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum = typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum[keyof typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum];
/**
 * @export
 */
export const GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum = {
    Count: 'count',
    Count: '-count',
    AverageSecondsInQueue: 'averageSecondsInQueue',
    AverageSecondsInQueue: '-averageSecondsInQueue',
    P50SecondsInQueue: 'p50SecondsInQueue',
    P50SecondsInQueue: '-p50SecondsInQueue',
    P95SecondsInQueue: 'p95SecondsInQueue',
    P95SecondsInQueue: '-p95SecondsInQueue'
} as const;
export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum = typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum[keyof typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum];
