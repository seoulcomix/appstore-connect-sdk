/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterAchievementsResponse,
  GameCenterDetailsResponse,
  GameCenterGroupCreateRequest,
  GameCenterGroupGameCenterAchievementsLinkagesRequest,
  GameCenterGroupGameCenterAchievementsLinkagesResponse,
  GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest,
  GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse,
  GameCenterGroupGameCenterLeaderboardsLinkagesRequest,
  GameCenterGroupGameCenterLeaderboardsLinkagesResponse,
  GameCenterGroupResponse,
  GameCenterGroupUpdateRequest,
  GameCenterGroupsResponse,
  GameCenterLeaderboardSetsResponse,
  GameCenterLeaderboardsResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterAchievementsResponseFromJSON,
    GameCenterAchievementsResponseToJSON,
    GameCenterDetailsResponseFromJSON,
    GameCenterDetailsResponseToJSON,
    GameCenterGroupCreateRequestFromJSON,
    GameCenterGroupCreateRequestToJSON,
    GameCenterGroupGameCenterAchievementsLinkagesRequestFromJSON,
    GameCenterGroupGameCenterAchievementsLinkagesRequestToJSON,
    GameCenterGroupGameCenterAchievementsLinkagesResponseFromJSON,
    GameCenterGroupGameCenterAchievementsLinkagesResponseToJSON,
    GameCenterGroupGameCenterLeaderboardSetsLinkagesRequestFromJSON,
    GameCenterGroupGameCenterLeaderboardSetsLinkagesRequestToJSON,
    GameCenterGroupGameCenterLeaderboardSetsLinkagesResponseFromJSON,
    GameCenterGroupGameCenterLeaderboardSetsLinkagesResponseToJSON,
    GameCenterGroupGameCenterLeaderboardsLinkagesRequestFromJSON,
    GameCenterGroupGameCenterLeaderboardsLinkagesRequestToJSON,
    GameCenterGroupGameCenterLeaderboardsLinkagesResponseFromJSON,
    GameCenterGroupGameCenterLeaderboardsLinkagesResponseToJSON,
    GameCenterGroupResponseFromJSON,
    GameCenterGroupResponseToJSON,
    GameCenterGroupUpdateRequestFromJSON,
    GameCenterGroupUpdateRequestToJSON,
    GameCenterGroupsResponseFromJSON,
    GameCenterGroupsResponseToJSON,
    GameCenterLeaderboardSetsResponseFromJSON,
    GameCenterLeaderboardSetsResponseToJSON,
    GameCenterLeaderboardsResponseFromJSON,
    GameCenterLeaderboardsResponseToJSON,
} from '../models';

export interface GameCenterGroupsCreateInstanceRequest {
    gameCenterGroupCreateRequest: GameCenterGroupCreateRequest;
}

export interface GameCenterGroupsDeleteInstanceRequest {
    id: string;
}

export interface GameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
    id: string;
    filterReferenceName?: Array<string>;
    filterArchived?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterAchievements?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum>;
    limit?: number;
    include?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum>;
    limitLocalizations?: number;
    limitReleases?: number;
}

export interface GameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterGroupGameCenterAchievementsLinkagesRequest: GameCenterGroupGameCenterAchievementsLinkagesRequest;
}

export interface GameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
    id: string;
    filterGameCenterAppVersionsEnabled?: Array<string>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsApps?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum>;
    fieldsGameCenterAppVersions?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum>;
    limit?: number;
    include?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum>;
    limitGameCenterAppVersions?: number;
    limitGameCenterLeaderboards?: number;
    limitGameCenterLeaderboardSets?: number;
    limitGameCenterAchievements?: number;
    limitAchievementReleases?: number;
    limitLeaderboardReleases?: number;
    limitLeaderboardSetReleases?: number;
}

export interface GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
    id: string;
    filterReferenceName?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterLeaderboardSetLocalizations?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum>;
    limit?: number;
    include?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum>;
    limitLocalizations?: number;
    limitGameCenterLeaderboards?: number;
    limitReleases?: number;
}

export interface GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest: GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest;
}

export interface GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
    id: string;
    filterReferenceName?: Array<string>;
    filterArchived?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterLeaderboardLocalizations?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    limit?: number;
    include?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum>;
    limitGameCenterLeaderboardSets?: number;
    limitLocalizations?: number;
    limitReleases?: number;
}

export interface GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterGroupGameCenterLeaderboardsLinkagesRequest: GameCenterGroupGameCenterLeaderboardsLinkagesRequest;
}

export interface GameCenterGroupsGetCollectionRequest {
    filterGameCenterDetails?: Array<string>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum>;
    limit?: number;
    include?: Array<GameCenterGroupsGetCollectionIncludeEnum>;
    limitGameCenterAchievements?: number;
    limitGameCenterDetails?: number;
    limitGameCenterLeaderboardSets?: number;
    limitGameCenterLeaderboards?: number;
}

export interface GameCenterGroupsGetInstanceRequest {
    id: string;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum>;
    include?: Array<GameCenterGroupsGetInstanceIncludeEnum>;
    limitGameCenterAchievements?: number;
    limitGameCenterDetails?: number;
    limitGameCenterLeaderboardSets?: number;
    limitGameCenterLeaderboards?: number;
}

export interface GameCenterGroupsUpdateInstanceRequest {
    id: string;
    gameCenterGroupUpdateRequest: GameCenterGroupUpdateRequest;
}

/**
 * 
 */
export class GameCenterGroupsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterGroupsCreateInstanceRaw(requestParameters: GameCenterGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupResponse>> {
        if (requestParameters.gameCenterGroupCreateRequest === null || requestParameters.gameCenterGroupCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterGroupCreateRequest','Required parameter requestParameters.gameCenterGroupCreateRequest was null or undefined when calling gameCenterGroupsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterGroupCreateRequestToJSON(requestParameters.gameCenterGroupCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsCreateInstance(requestParameters: GameCenterGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupResponse> {
        const response = await this.gameCenterGroupsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsDeleteInstanceRaw(requestParameters: GameCenterGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterGroupsDeleteInstance(requestParameters: GameCenterGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterGroupsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterGroupsGameCenterAchievementsGetToManyRelatedRaw(requestParameters: GameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterAchievementsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterReferenceName) {
            queryParameters['filter[referenceName]'] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterArchived) {
            queryParameters['filter[archived]'] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementLocalizations) {
            queryParameters['fields[gameCenterAchievementLocalizations]'] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsGameCenterAchievementsGetToManyRelated(requestParameters: GameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementsResponse> {
        const response = await this.gameCenterGroupsGameCenterAchievementsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsGameCenterAchievementsGetToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupGameCenterAchievementsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterAchievementsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterGroupGameCenterAchievementsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsGameCenterAchievementsGetToManyRelationship(requestParameters: GameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupGameCenterAchievementsLinkagesResponse> {
        const response = await this.gameCenterGroupsGameCenterAchievementsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship.');
        }

        if (requestParameters.gameCenterGroupGameCenterAchievementsLinkagesRequest === null || requestParameters.gameCenterGroupGameCenterAchievementsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterGroupGameCenterAchievementsLinkagesRequest','Required parameter requestParameters.gameCenterGroupGameCenterAchievementsLinkagesRequest was null or undefined when calling gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterGroupGameCenterAchievementsLinkagesRequestToJSON(requestParameters.gameCenterGroupGameCenterAchievementsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(requestParameters: GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterGroupsGameCenterDetailsGetToManyRelatedRaw(requestParameters: GameCenterGroupsGameCenterDetailsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterDetailsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterDetailsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterGameCenterAppVersionsEnabled) {
            queryParameters['filter[gameCenterAppVersions.enabled]'] = requestParameters.filterGameCenterAppVersionsEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAppVersions) {
            queryParameters['fields[gameCenterAppVersions]'] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterAppVersions !== undefined) {
            queryParameters['limit[gameCenterAppVersions]'] = requestParameters.limitGameCenterAppVersions;
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitGameCenterAchievements !== undefined) {
            queryParameters['limit[gameCenterAchievements]'] = requestParameters.limitGameCenterAchievements;
        }

        if (requestParameters.limitAchievementReleases !== undefined) {
            queryParameters['limit[achievementReleases]'] = requestParameters.limitAchievementReleases;
        }

        if (requestParameters.limitLeaderboardReleases !== undefined) {
            queryParameters['limit[leaderboardReleases]'] = requestParameters.limitLeaderboardReleases;
        }

        if (requestParameters.limitLeaderboardSetReleases !== undefined) {
            queryParameters['limit[leaderboardSetReleases]'] = requestParameters.limitLeaderboardSetReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/gameCenterDetails`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterDetailsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsGameCenterDetailsGetToManyRelated(requestParameters: GameCenterGroupsGameCenterDetailsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterDetailsResponse> {
        const response = await this.gameCenterGroupsGameCenterDetailsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterReferenceName) {
            queryParameters['filter[referenceName]'] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
            queryParameters['fields[gameCenterLeaderboardSetLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetsResponse> {
        const response = await this.gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterGroupGameCenterLeaderboardSetsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> {
        const response = await this.gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship.');
        }

        if (requestParameters.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest === null || requestParameters.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest','Required parameter requestParameters.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest was null or undefined when calling gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterGroupGameCenterLeaderboardSetsLinkagesRequestToJSON(requestParameters.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterReferenceName) {
            queryParameters['filter[referenceName]'] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterArchived) {
            queryParameters['filter[archived]'] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardLocalizations) {
            queryParameters['fields[gameCenterLeaderboardLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardsGetToManyRelated(requestParameters: GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardsResponse> {
        const response = await this.gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterGroupGameCenterLeaderboardsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(requestParameters: GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> {
        const response = await this.gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship.');
        }

        if (requestParameters.gameCenterGroupGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterGroupGameCenterLeaderboardsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterGroupGameCenterLeaderboardsLinkagesRequest','Required parameter requestParameters.gameCenterGroupGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterGroupGameCenterLeaderboardsLinkagesRequestToJSON(requestParameters.gameCenterGroupGameCenterLeaderboardsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(requestParameters: GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterGroupsGetCollectionRaw(requestParameters: GameCenterGroupsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterGameCenterDetails) {
            queryParameters['filter[gameCenterDetails]'] = requestParameters.filterGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterAchievements !== undefined) {
            queryParameters['limit[gameCenterAchievements]'] = requestParameters.limitGameCenterAchievements;
        }

        if (requestParameters.limitGameCenterDetails !== undefined) {
            queryParameters['limit[gameCenterDetails]'] = requestParameters.limitGameCenterDetails;
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterGroupsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsGetCollection(requestParameters: GameCenterGroupsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupsResponse> {
        const response = await this.gameCenterGroupsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsGetInstanceRaw(requestParameters: GameCenterGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterAchievements !== undefined) {
            queryParameters['limit[gameCenterAchievements]'] = requestParameters.limitGameCenterAchievements;
        }

        if (requestParameters.limitGameCenterDetails !== undefined) {
            queryParameters['limit[gameCenterDetails]'] = requestParameters.limitGameCenterDetails;
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsGetInstance(requestParameters: GameCenterGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupResponse> {
        const response = await this.gameCenterGroupsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterGroupsUpdateInstanceRaw(requestParameters: GameCenterGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsUpdateInstance.');
        }

        if (requestParameters.gameCenterGroupUpdateRequest === null || requestParameters.gameCenterGroupUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterGroupUpdateRequest','Required parameter requestParameters.gameCenterGroupUpdateRequest was null or undefined when calling gameCenterGroupsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterGroupUpdateRequestToJSON(requestParameters.gameCenterGroupUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterGroupsUpdateInstance(requestParameters: GameCenterGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupResponse> {
        const response = await this.gameCenterGroupsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    Points: 'points',
    ShowBeforeEarned: 'showBeforeEarned',
    Repeatable: 'repeatable',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum = typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum = typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    BeforeEarnedDescription: 'beforeEarnedDescription',
    AfterEarnedDescription: 'afterEarnedDescription',
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage'
} as const;
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterAchievement: 'gameCenterAchievement'
} as const;
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum = typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum = {
    Enabled: 'enabled',
    CompatibilityVersions: 'compatibilityVersions',
    AppStoreVersion: 'appStoreVersion'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    Points: 'points',
    ShowBeforeEarned: 'showBeforeEarned',
    Repeatable: 'repeatable',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterAchievement: 'gameCenterAchievement'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum = {
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum = typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum = typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    GameCenterLeaderboardSetImage: 'gameCenterLeaderboardSetImage'
} as const;
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet'
} as const;
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum = typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    FormatterOverride: 'formatterOverride',
    FormatterSuffix: 'formatterSuffix',
    FormatterSuffixSingular: 'formatterSuffixSingular',
    GameCenterLeaderboard: 'gameCenterLeaderboard',
    GameCenterLeaderboardImage: 'gameCenterLeaderboardImage'
} as const;
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum = typeof GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum = typeof GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum = typeof GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    Points: 'points',
    ShowBeforeEarned: 'showBeforeEarned',
    Repeatable: 'repeatable',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum = typeof GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetCollectionIncludeEnum = {
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterGroupsGetCollectionIncludeEnum = typeof GameCenterGroupsGetCollectionIncludeEnum[keyof typeof GameCenterGroupsGetCollectionIncludeEnum];
/**
 * @export
 */
export const GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum = typeof GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum = typeof GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum = typeof GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    Points: 'points',
    ShowBeforeEarned: 'showBeforeEarned',
    Repeatable: 'repeatable',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum = typeof GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterGroupsGetInstanceIncludeEnum = {
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterGroupsGetInstanceIncludeEnum = typeof GameCenterGroupsGetInstanceIncludeEnum[keyof typeof GameCenterGroupsGetInstanceIncludeEnum];
