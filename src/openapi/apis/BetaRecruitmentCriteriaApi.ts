/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BetaRecruitmentCriterionCreateRequest,
  BetaRecruitmentCriterionResponse,
  BetaRecruitmentCriterionUpdateRequest,
  ErrorResponse,
} from '../models';
import {
    BetaRecruitmentCriterionCreateRequestFromJSON,
    BetaRecruitmentCriterionCreateRequestToJSON,
    BetaRecruitmentCriterionResponseFromJSON,
    BetaRecruitmentCriterionResponseToJSON,
    BetaRecruitmentCriterionUpdateRequestFromJSON,
    BetaRecruitmentCriterionUpdateRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface BetaRecruitmentCriteriaCreateInstanceRequest {
    betaRecruitmentCriterionCreateRequest: BetaRecruitmentCriterionCreateRequest;
}

export interface BetaRecruitmentCriteriaDeleteInstanceRequest {
    id: string;
}

export interface BetaRecruitmentCriteriaUpdateInstanceRequest {
    id: string;
    betaRecruitmentCriterionUpdateRequest: BetaRecruitmentCriterionUpdateRequest;
}

/**
 * 
 */
export class BetaRecruitmentCriteriaApi extends runtime.BaseAPI {

    /**
     */
    async betaRecruitmentCriteriaCreateInstanceRaw(requestParameters: BetaRecruitmentCriteriaCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaRecruitmentCriterionResponse>> {
        if (requestParameters.betaRecruitmentCriterionCreateRequest === null || requestParameters.betaRecruitmentCriterionCreateRequest === undefined) {
            throw new runtime.RequiredError('betaRecruitmentCriterionCreateRequest','Required parameter requestParameters.betaRecruitmentCriterionCreateRequest was null or undefined when calling betaRecruitmentCriteriaCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaRecruitmentCriteria`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaRecruitmentCriterionCreateRequestToJSON(requestParameters.betaRecruitmentCriterionCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaRecruitmentCriterionResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaRecruitmentCriteriaCreateInstance(requestParameters: BetaRecruitmentCriteriaCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaRecruitmentCriterionResponse> {
        const response = await this.betaRecruitmentCriteriaCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaRecruitmentCriteriaDeleteInstanceRaw(requestParameters: BetaRecruitmentCriteriaDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaRecruitmentCriteriaDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaRecruitmentCriteria/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaRecruitmentCriteriaDeleteInstance(requestParameters: BetaRecruitmentCriteriaDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaRecruitmentCriteriaDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaRecruitmentCriteriaUpdateInstanceRaw(requestParameters: BetaRecruitmentCriteriaUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaRecruitmentCriterionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaRecruitmentCriteriaUpdateInstance.');
        }

        if (requestParameters.betaRecruitmentCriterionUpdateRequest === null || requestParameters.betaRecruitmentCriterionUpdateRequest === undefined) {
            throw new runtime.RequiredError('betaRecruitmentCriterionUpdateRequest','Required parameter requestParameters.betaRecruitmentCriterionUpdateRequest was null or undefined when calling betaRecruitmentCriteriaUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaRecruitmentCriteria/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BetaRecruitmentCriterionUpdateRequestToJSON(requestParameters.betaRecruitmentCriterionUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaRecruitmentCriterionResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaRecruitmentCriteriaUpdateInstance(requestParameters: BetaRecruitmentCriteriaUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaRecruitmentCriterionResponse> {
        const response = await this.betaRecruitmentCriteriaUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
