/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  InAppPurchaseImageCreateRequest,
  InAppPurchaseImageResponse,
  InAppPurchaseImageUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InAppPurchaseImageCreateRequestFromJSON,
    InAppPurchaseImageCreateRequestToJSON,
    InAppPurchaseImageResponseFromJSON,
    InAppPurchaseImageResponseToJSON,
    InAppPurchaseImageUpdateRequestFromJSON,
    InAppPurchaseImageUpdateRequestToJSON,
} from '../models';

export interface InAppPurchaseImagesCreateInstanceRequest {
    inAppPurchaseImageCreateRequest: InAppPurchaseImageCreateRequest;
}

export interface InAppPurchaseImagesDeleteInstanceRequest {
    id: string;
}

export interface InAppPurchaseImagesGetInstanceRequest {
    id: string;
    fieldsInAppPurchaseImages?: Array<InAppPurchaseImagesGetInstanceFieldsInAppPurchaseImagesEnum>;
    include?: Array<InAppPurchaseImagesGetInstanceIncludeEnum>;
}

export interface InAppPurchaseImagesUpdateInstanceRequest {
    id: string;
    inAppPurchaseImageUpdateRequest: InAppPurchaseImageUpdateRequest;
}

/**
 * 
 */
export class InAppPurchaseImagesApi extends runtime.BaseAPI {

    /**
     */
    async inAppPurchaseImagesCreateInstanceRaw(requestParameters: InAppPurchaseImagesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InAppPurchaseImageResponse>> {
        if (requestParameters.inAppPurchaseImageCreateRequest === null || requestParameters.inAppPurchaseImageCreateRequest === undefined) {
            throw new runtime.RequiredError('inAppPurchaseImageCreateRequest','Required parameter requestParameters.inAppPurchaseImageCreateRequest was null or undefined when calling inAppPurchaseImagesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/inAppPurchaseImages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InAppPurchaseImageCreateRequestToJSON(requestParameters.inAppPurchaseImageCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InAppPurchaseImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async inAppPurchaseImagesCreateInstance(requestParameters: InAppPurchaseImagesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InAppPurchaseImageResponse> {
        const response = await this.inAppPurchaseImagesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async inAppPurchaseImagesDeleteInstanceRaw(requestParameters: InAppPurchaseImagesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling inAppPurchaseImagesDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/inAppPurchaseImages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async inAppPurchaseImagesDeleteInstance(requestParameters: InAppPurchaseImagesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.inAppPurchaseImagesDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async inAppPurchaseImagesGetInstanceRaw(requestParameters: InAppPurchaseImagesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InAppPurchaseImageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling inAppPurchaseImagesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsInAppPurchaseImages) {
            queryParameters['fields[inAppPurchaseImages]'] = requestParameters.fieldsInAppPurchaseImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/inAppPurchaseImages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InAppPurchaseImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async inAppPurchaseImagesGetInstance(requestParameters: InAppPurchaseImagesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InAppPurchaseImageResponse> {
        const response = await this.inAppPurchaseImagesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async inAppPurchaseImagesUpdateInstanceRaw(requestParameters: InAppPurchaseImagesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InAppPurchaseImageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling inAppPurchaseImagesUpdateInstance.');
        }

        if (requestParameters.inAppPurchaseImageUpdateRequest === null || requestParameters.inAppPurchaseImageUpdateRequest === undefined) {
            throw new runtime.RequiredError('inAppPurchaseImageUpdateRequest','Required parameter requestParameters.inAppPurchaseImageUpdateRequest was null or undefined when calling inAppPurchaseImagesUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/inAppPurchaseImages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InAppPurchaseImageUpdateRequestToJSON(requestParameters.inAppPurchaseImageUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InAppPurchaseImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async inAppPurchaseImagesUpdateInstance(requestParameters: InAppPurchaseImagesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InAppPurchaseImageResponse> {
        const response = await this.inAppPurchaseImagesUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const InAppPurchaseImagesGetInstanceFieldsInAppPurchaseImagesEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    SourceFileChecksum: 'sourceFileChecksum',
    AssetToken: 'assetToken',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    State: 'state',
    InAppPurchase: 'inAppPurchase'
} as const;
export type InAppPurchaseImagesGetInstanceFieldsInAppPurchaseImagesEnum = typeof InAppPurchaseImagesGetInstanceFieldsInAppPurchaseImagesEnum[keyof typeof InAppPurchaseImagesGetInstanceFieldsInAppPurchaseImagesEnum];
/**
 * @export
 */
export const InAppPurchaseImagesGetInstanceIncludeEnum = {
    InAppPurchase: 'inAppPurchase'
} as const;
export type InAppPurchaseImagesGetInstanceIncludeEnum = typeof InAppPurchaseImagesGetInstanceIncludeEnum[keyof typeof InAppPurchaseImagesGetInstanceIncludeEnum];
