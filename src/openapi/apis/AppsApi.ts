/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlternativeDistributionKeyResponse,
  AnalyticsReportRequestsResponse,
  AppAvailabilityV2Response,
  AppBetaTestersLinkagesRequest,
  AppClipsResponse,
  AppCustomProductPagesResponse,
  AppEncryptionDeclarationsResponse,
  AppEventsResponse,
  AppInfosResponse,
  AppPricePointsV3Response,
  AppPriceScheduleResponse,
  AppPromotedPurchasesLinkagesRequest,
  AppPromotedPurchasesLinkagesResponse,
  AppResponse,
  AppStoreVersionExperimentsV2Response,
  AppStoreVersionsResponse,
  AppUpdateRequest,
  AppsBetaTesterUsagesV1MetricResponse,
  AppsResponse,
  BetaAppLocalizationsWithoutIncludesResponse,
  BetaAppReviewDetailWithoutIncludesResponse,
  BetaGroupsWithoutIncludesResponse,
  BetaLicenseAgreementWithoutIncludesResponse,
  BuildsWithoutIncludesResponse,
  CiProductResponse,
  CustomerReviewsResponse,
  EndUserLicenseAgreementWithoutIncludesResponse,
  ErrorResponse,
  GameCenterDetailResponse,
  GameCenterEnabledVersionsResponse,
  InAppPurchasesResponse,
  InAppPurchasesV2Response,
  MarketplaceSearchDetailResponse,
  PreReleaseVersionsWithoutIncludesResponse,
  PromotedPurchasesResponse,
  ReviewSubmissionsResponse,
  SubscriptionGracePeriodResponse,
  SubscriptionGroupsResponse,
  XcodeMetrics,
} from '../models';
import {
    AlternativeDistributionKeyResponseFromJSON,
    AlternativeDistributionKeyResponseToJSON,
    AnalyticsReportRequestsResponseFromJSON,
    AnalyticsReportRequestsResponseToJSON,
    AppAvailabilityV2ResponseFromJSON,
    AppAvailabilityV2ResponseToJSON,
    AppBetaTestersLinkagesRequestFromJSON,
    AppBetaTestersLinkagesRequestToJSON,
    AppClipsResponseFromJSON,
    AppClipsResponseToJSON,
    AppCustomProductPagesResponseFromJSON,
    AppCustomProductPagesResponseToJSON,
    AppEncryptionDeclarationsResponseFromJSON,
    AppEncryptionDeclarationsResponseToJSON,
    AppEventsResponseFromJSON,
    AppEventsResponseToJSON,
    AppInfosResponseFromJSON,
    AppInfosResponseToJSON,
    AppPricePointsV3ResponseFromJSON,
    AppPricePointsV3ResponseToJSON,
    AppPriceScheduleResponseFromJSON,
    AppPriceScheduleResponseToJSON,
    AppPromotedPurchasesLinkagesRequestFromJSON,
    AppPromotedPurchasesLinkagesRequestToJSON,
    AppPromotedPurchasesLinkagesResponseFromJSON,
    AppPromotedPurchasesLinkagesResponseToJSON,
    AppResponseFromJSON,
    AppResponseToJSON,
    AppStoreVersionExperimentsV2ResponseFromJSON,
    AppStoreVersionExperimentsV2ResponseToJSON,
    AppStoreVersionsResponseFromJSON,
    AppStoreVersionsResponseToJSON,
    AppUpdateRequestFromJSON,
    AppUpdateRequestToJSON,
    AppsBetaTesterUsagesV1MetricResponseFromJSON,
    AppsBetaTesterUsagesV1MetricResponseToJSON,
    AppsResponseFromJSON,
    AppsResponseToJSON,
    BetaAppLocalizationsWithoutIncludesResponseFromJSON,
    BetaAppLocalizationsWithoutIncludesResponseToJSON,
    BetaAppReviewDetailWithoutIncludesResponseFromJSON,
    BetaAppReviewDetailWithoutIncludesResponseToJSON,
    BetaGroupsWithoutIncludesResponseFromJSON,
    BetaGroupsWithoutIncludesResponseToJSON,
    BetaLicenseAgreementWithoutIncludesResponseFromJSON,
    BetaLicenseAgreementWithoutIncludesResponseToJSON,
    BuildsWithoutIncludesResponseFromJSON,
    BuildsWithoutIncludesResponseToJSON,
    CiProductResponseFromJSON,
    CiProductResponseToJSON,
    CustomerReviewsResponseFromJSON,
    CustomerReviewsResponseToJSON,
    EndUserLicenseAgreementWithoutIncludesResponseFromJSON,
    EndUserLicenseAgreementWithoutIncludesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterDetailResponseFromJSON,
    GameCenterDetailResponseToJSON,
    GameCenterEnabledVersionsResponseFromJSON,
    GameCenterEnabledVersionsResponseToJSON,
    InAppPurchasesResponseFromJSON,
    InAppPurchasesResponseToJSON,
    InAppPurchasesV2ResponseFromJSON,
    InAppPurchasesV2ResponseToJSON,
    MarketplaceSearchDetailResponseFromJSON,
    MarketplaceSearchDetailResponseToJSON,
    PreReleaseVersionsWithoutIncludesResponseFromJSON,
    PreReleaseVersionsWithoutIncludesResponseToJSON,
    PromotedPurchasesResponseFromJSON,
    PromotedPurchasesResponseToJSON,
    ReviewSubmissionsResponseFromJSON,
    ReviewSubmissionsResponseToJSON,
    SubscriptionGracePeriodResponseFromJSON,
    SubscriptionGracePeriodResponseToJSON,
    SubscriptionGroupsResponseFromJSON,
    SubscriptionGroupsResponseToJSON,
    XcodeMetricsFromJSON,
    XcodeMetricsToJSON,
} from '../models';

export interface AppsAlternativeDistributionKeyGetToOneRelatedRequest {
    id: string;
    fieldsAlternativeDistributionKeys?: Array<AppsAlternativeDistributionKeyGetToOneRelatedFieldsAlternativeDistributionKeysEnum>;
}

export interface AppsAnalyticsReportRequestsGetToManyRelatedRequest {
    id: string;
    filterAccessType?: Array<AppsAnalyticsReportRequestsGetToManyRelatedFilterAccessTypeEnum>;
    fieldsAnalyticsReportRequests?: Array<AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportRequestsEnum>;
    fieldsAnalyticsReports?: Array<AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportsEnum>;
    limit?: number;
    include?: Array<AppsAnalyticsReportRequestsGetToManyRelatedIncludeEnum>;
    limitReports?: number;
}

export interface AppsAppAvailabilityV2GetToOneRelatedRequest {
    id: string;
    fieldsAppAvailabilities?: Array<AppsAppAvailabilityV2GetToOneRelatedFieldsAppAvailabilitiesEnum>;
    fieldsTerritoryAvailabilities?: Array<AppsAppAvailabilityV2GetToOneRelatedFieldsTerritoryAvailabilitiesEnum>;
    include?: Array<AppsAppAvailabilityV2GetToOneRelatedIncludeEnum>;
    limitTerritoryAvailabilities?: number;
}

export interface AppsAppClipsGetToManyRelatedRequest {
    id: string;
    filterBundleId?: Array<string>;
    fieldsAppClips?: Array<AppsAppClipsGetToManyRelatedFieldsAppClipsEnum>;
    fieldsApps?: Array<AppsAppClipsGetToManyRelatedFieldsAppsEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppsAppClipsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum>;
    limit?: number;
    include?: Array<AppsAppClipsGetToManyRelatedIncludeEnum>;
    limitAppClipDefaultExperiences?: number;
}

export interface AppsAppCustomProductPagesGetToManyRelatedRequest {
    id: string;
    filterVisible?: Array<string>;
    fieldsAppCustomProductPages?: Array<AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPagesEnum>;
    fieldsApps?: Array<AppsAppCustomProductPagesGetToManyRelatedFieldsAppsEnum>;
    fieldsAppCustomProductPageVersions?: Array<AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPageVersionsEnum>;
    limit?: number;
    include?: Array<AppsAppCustomProductPagesGetToManyRelatedIncludeEnum>;
    limitAppCustomProductPageVersions?: number;
}

export interface AppsAppEncryptionDeclarationsGetToManyRelatedRequest {
    id: string;
    filterPlatform?: Array<AppsAppEncryptionDeclarationsGetToManyRelatedFilterPlatformEnum>;
    filterBuilds?: Array<string>;
    fieldsAppEncryptionDeclarations?: Array<AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationsEnum>;
    fieldsApps?: Array<AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppsEnum>;
    fieldsBuilds?: Array<AppsAppEncryptionDeclarationsGetToManyRelatedFieldsBuildsEnum>;
    fieldsAppEncryptionDeclarationDocuments?: Array<AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationDocumentsEnum>;
    limit?: number;
    include?: Array<AppsAppEncryptionDeclarationsGetToManyRelatedIncludeEnum>;
    limitBuilds?: number;
}

export interface AppsAppEventsGetToManyRelatedRequest {
    id: string;
    filterEventState?: Array<AppsAppEventsGetToManyRelatedFilterEventStateEnum>;
    filterId?: Array<string>;
    fieldsAppEvents?: Array<AppsAppEventsGetToManyRelatedFieldsAppEventsEnum>;
    fieldsAppEventLocalizations?: Array<AppsAppEventsGetToManyRelatedFieldsAppEventLocalizationsEnum>;
    limit?: number;
    include?: Array<AppsAppEventsGetToManyRelatedIncludeEnum>;
    limitLocalizations?: number;
}

export interface AppsAppInfosGetToManyRelatedRequest {
    id: string;
    fieldsAppInfos?: Array<AppsAppInfosGetToManyRelatedFieldsAppInfosEnum>;
    fieldsApps?: Array<AppsAppInfosGetToManyRelatedFieldsAppsEnum>;
    fieldsAgeRatingDeclarations?: Array<AppsAppInfosGetToManyRelatedFieldsAgeRatingDeclarationsEnum>;
    fieldsAppInfoLocalizations?: Array<AppsAppInfosGetToManyRelatedFieldsAppInfoLocalizationsEnum>;
    fieldsAppCategories?: Array<AppsAppInfosGetToManyRelatedFieldsAppCategoriesEnum>;
    limit?: number;
    include?: Array<AppsAppInfosGetToManyRelatedIncludeEnum>;
    limitAppInfoLocalizations?: number;
}

export interface AppsAppPricePointsGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsAppPricePoints?: Array<AppsAppPricePointsGetToManyRelatedFieldsAppPricePointsEnum>;
    fieldsApps?: Array<AppsAppPricePointsGetToManyRelatedFieldsAppsEnum>;
    fieldsTerritories?: Array<AppsAppPricePointsGetToManyRelatedFieldsTerritoriesEnum>;
    limit?: number;
    include?: Array<AppsAppPricePointsGetToManyRelatedIncludeEnum>;
}

export interface AppsAppPriceScheduleGetToOneRelatedRequest {
    id: string;
    fieldsAppPriceSchedules?: Array<AppsAppPriceScheduleGetToOneRelatedFieldsAppPriceSchedulesEnum>;
    fieldsApps?: Array<AppsAppPriceScheduleGetToOneRelatedFieldsAppsEnum>;
    fieldsTerritories?: Array<AppsAppPriceScheduleGetToOneRelatedFieldsTerritoriesEnum>;
    fieldsAppPrices?: Array<AppsAppPriceScheduleGetToOneRelatedFieldsAppPricesEnum>;
    include?: Array<AppsAppPriceScheduleGetToOneRelatedIncludeEnum>;
    limitManualPrices?: number;
    limitAutomaticPrices?: number;
}

export interface AppsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
    id: string;
    filterState?: Array<AppsAppStoreVersionExperimentsV2GetToManyRelatedFilterStateEnum>;
    fieldsAppStoreVersionExperiments?: Array<AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsApps?: Array<AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppsEnum>;
    fieldsAppStoreVersions?: Array<AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionsEnum>;
    fieldsAppStoreVersionExperimentTreatments?: Array<AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum>;
    limit?: number;
    include?: Array<AppsAppStoreVersionExperimentsV2GetToManyRelatedIncludeEnum>;
    limitControlVersions?: number;
    limitAppStoreVersionExperimentTreatments?: number;
}

export interface AppsAppStoreVersionsGetToManyRelatedRequest {
    id: string;
    filterPlatform?: Array<AppsAppStoreVersionsGetToManyRelatedFilterPlatformEnum>;
    filterVersionString?: Array<string>;
    filterAppStoreState?: Array<AppsAppStoreVersionsGetToManyRelatedFilterAppStoreStateEnum>;
    filterAppVersionState?: Array<AppsAppStoreVersionsGetToManyRelatedFilterAppVersionStateEnum>;
    filterId?: Array<string>;
    fieldsAppStoreVersions?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionsEnum>;
    fieldsApps?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppsEnum>;
    fieldsAgeRatingDeclarations?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAgeRatingDeclarationsEnum>;
    fieldsAppStoreVersionLocalizations?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum>;
    fieldsBuilds?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsBuildsEnum>;
    fieldsAppStoreVersionPhasedReleases?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionPhasedReleasesEnum>;
    fieldsGameCenterAppVersions?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum>;
    fieldsRoutingAppCoverages?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsRoutingAppCoveragesEnum>;
    fieldsAppStoreReviewDetails?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersionSubmissions?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionSubmissionsEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum>;
    fieldsAppStoreVersionExperiments?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsAlternativeDistributionPackages?: Array<AppsAppStoreVersionsGetToManyRelatedFieldsAlternativeDistributionPackagesEnum>;
    limit?: number;
    include?: Array<AppsAppStoreVersionsGetToManyRelatedIncludeEnum>;
    limitAppStoreVersionLocalizations?: number;
    limitAppStoreVersionExperiments?: number;
    limitAppStoreVersionExperimentsV2?: number;
}

export interface AppsBetaAppLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsBetaAppLocalizations?: Array<AppsBetaAppLocalizationsGetToManyRelatedFieldsBetaAppLocalizationsEnum>;
    limit?: number;
}

export interface AppsBetaAppReviewDetailGetToOneRelatedRequest {
    id: string;
    fieldsBetaAppReviewDetails?: Array<AppsBetaAppReviewDetailGetToOneRelatedFieldsBetaAppReviewDetailsEnum>;
}

export interface AppsBetaGroupsGetToManyRelatedRequest {
    id: string;
    fieldsBetaGroups?: Array<AppsBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum>;
    limit?: number;
}

export interface AppsBetaLicenseAgreementGetToOneRelatedRequest {
    id: string;
    fieldsBetaLicenseAgreements?: Array<AppsBetaLicenseAgreementGetToOneRelatedFieldsBetaLicenseAgreementsEnum>;
}

export interface AppsBetaTesterUsagesGetMetricsRequest {
    id: string;
    period?: AppsBetaTesterUsagesGetMetricsPeriodEnum;
    groupBy?: Array<AppsBetaTesterUsagesGetMetricsGroupByEnum>;
    filterBetaTesters?: string;
    limit?: number;
}

export interface AppsBetaTestersDeleteToManyRelationshipRequest {
    id: string;
    appBetaTestersLinkagesRequest: AppBetaTestersLinkagesRequest;
}

export interface AppsBuildsGetToManyRelatedRequest {
    id: string;
    fieldsBuilds?: Array<AppsBuildsGetToManyRelatedFieldsBuildsEnum>;
    limit?: number;
}

export interface AppsCiProductGetToOneRelatedRequest {
    id: string;
    fieldsCiProducts?: Array<AppsCiProductGetToOneRelatedFieldsCiProductsEnum>;
    fieldsApps?: Array<AppsCiProductGetToOneRelatedFieldsAppsEnum>;
    fieldsBundleIds?: Array<AppsCiProductGetToOneRelatedFieldsBundleIdsEnum>;
    fieldsScmRepositories?: Array<AppsCiProductGetToOneRelatedFieldsScmRepositoriesEnum>;
    include?: Array<AppsCiProductGetToOneRelatedIncludeEnum>;
    limitPrimaryRepositories?: number;
}

export interface AppsCustomerReviewsGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<AppsCustomerReviewsGetToManyRelatedFilterTerritoryEnum>;
    filterRating?: Array<string>;
    existsPublishedResponse?: boolean;
    sort?: Array<AppsCustomerReviewsGetToManyRelatedSortEnum>;
    fieldsCustomerReviews?: Array<AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum>;
    fieldsCustomerReviewResponses?: Array<AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum>;
    limit?: number;
    include?: Array<AppsCustomerReviewsGetToManyRelatedIncludeEnum>;
}

export interface AppsEndUserLicenseAgreementGetToOneRelatedRequest {
    id: string;
    fieldsEndUserLicenseAgreements?: Array<AppsEndUserLicenseAgreementGetToOneRelatedFieldsEndUserLicenseAgreementsEnum>;
}

export interface AppsGameCenterDetailGetToOneRelatedRequest {
    id: string;
    fieldsGameCenterDetails?: Array<AppsGameCenterDetailGetToOneRelatedFieldsGameCenterDetailsEnum>;
    fieldsApps?: Array<AppsGameCenterDetailGetToOneRelatedFieldsAppsEnum>;
    fieldsGameCenterAppVersions?: Array<AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAppVersionsEnum>;
    fieldsGameCenterGroups?: Array<AppsGameCenterDetailGetToOneRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterLeaderboards?: Array<AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterAchievements?: Array<AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementsEnum>;
    fieldsGameCenterAchievementReleases?: Array<AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    fieldsGameCenterLeaderboardSetReleases?: Array<AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum>;
    include?: Array<AppsGameCenterDetailGetToOneRelatedIncludeEnum>;
    limitGameCenterAppVersions?: number;
    limitGameCenterLeaderboards?: number;
    limitGameCenterLeaderboardSets?: number;
    limitGameCenterAchievements?: number;
    limitAchievementReleases?: number;
    limitLeaderboardReleases?: number;
    limitLeaderboardSetReleases?: number;
}

export interface AppsGameCenterEnabledVersionsGetToManyRelatedRequest {
    id: string;
    filterPlatform?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedFilterPlatformEnum>;
    filterVersionString?: Array<string>;
    filterId?: Array<string>;
    sort?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedSortEnum>;
    fieldsGameCenterEnabledVersions?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum>;
    fieldsApps?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedFieldsAppsEnum>;
    limit?: number;
    include?: Array<AppsGameCenterEnabledVersionsGetToManyRelatedIncludeEnum>;
    limitCompatibleVersions?: number;
}

export interface AppsGetCollectionRequest {
    filterName?: Array<string>;
    filterBundleId?: Array<string>;
    filterSku?: Array<string>;
    filterAppStoreVersionsAppStoreState?: Array<AppsGetCollectionFilterAppStoreVersionsAppStoreStateEnum>;
    filterAppStoreVersionsPlatform?: Array<AppsGetCollectionFilterAppStoreVersionsPlatformEnum>;
    filterAppStoreVersionsAppVersionState?: Array<AppsGetCollectionFilterAppStoreVersionsAppVersionStateEnum>;
    filterReviewSubmissionsState?: Array<AppsGetCollectionFilterReviewSubmissionsStateEnum>;
    filterReviewSubmissionsPlatform?: Array<AppsGetCollectionFilterReviewSubmissionsPlatformEnum>;
    filterAppStoreVersions?: Array<string>;
    filterId?: Array<string>;
    existsGameCenterEnabledVersions?: boolean;
    sort?: Array<AppsGetCollectionSortEnum>;
    fieldsApps?: Array<AppsGetCollectionFieldsAppsEnum>;
    fieldsAppEncryptionDeclarations?: Array<AppsGetCollectionFieldsAppEncryptionDeclarationsEnum>;
    fieldsCiProducts?: Array<AppsGetCollectionFieldsCiProductsEnum>;
    fieldsBetaGroups?: Array<AppsGetCollectionFieldsBetaGroupsEnum>;
    fieldsAppStoreVersions?: Array<AppsGetCollectionFieldsAppStoreVersionsEnum>;
    fieldsPreReleaseVersions?: Array<AppsGetCollectionFieldsPreReleaseVersionsEnum>;
    fieldsBetaAppLocalizations?: Array<AppsGetCollectionFieldsBetaAppLocalizationsEnum>;
    fieldsBuilds?: Array<AppsGetCollectionFieldsBuildsEnum>;
    fieldsBetaLicenseAgreements?: Array<AppsGetCollectionFieldsBetaLicenseAgreementsEnum>;
    fieldsBetaAppReviewDetails?: Array<AppsGetCollectionFieldsBetaAppReviewDetailsEnum>;
    fieldsAppInfos?: Array<AppsGetCollectionFieldsAppInfosEnum>;
    fieldsAppClips?: Array<AppsGetCollectionFieldsAppClipsEnum>;
    fieldsEndUserLicenseAgreements?: Array<AppsGetCollectionFieldsEndUserLicenseAgreementsEnum>;
    fieldsInAppPurchases?: Array<AppsGetCollectionFieldsInAppPurchasesEnum>;
    fieldsSubscriptionGroups?: Array<AppsGetCollectionFieldsSubscriptionGroupsEnum>;
    fieldsGameCenterEnabledVersions?: Array<AppsGetCollectionFieldsGameCenterEnabledVersionsEnum>;
    fieldsAppCustomProductPages?: Array<AppsGetCollectionFieldsAppCustomProductPagesEnum>;
    fieldsPromotedPurchases?: Array<AppsGetCollectionFieldsPromotedPurchasesEnum>;
    fieldsAppEvents?: Array<AppsGetCollectionFieldsAppEventsEnum>;
    fieldsReviewSubmissions?: Array<AppsGetCollectionFieldsReviewSubmissionsEnum>;
    fieldsSubscriptionGracePeriods?: Array<AppsGetCollectionFieldsSubscriptionGracePeriodsEnum>;
    fieldsGameCenterDetails?: Array<AppsGetCollectionFieldsGameCenterDetailsEnum>;
    fieldsAppStoreVersionExperiments?: Array<AppsGetCollectionFieldsAppStoreVersionExperimentsEnum>;
    limit?: number;
    include?: Array<AppsGetCollectionIncludeEnum>;
    limitAppClips?: number;
    limitAppCustomProductPages?: number;
    limitAppEncryptionDeclarations?: number;
    limitAppEvents?: number;
    limitAppInfos?: number;
    limitAppStoreVersionExperimentsV2?: number;
    limitAppStoreVersions?: number;
    limitBetaAppLocalizations?: number;
    limitBetaGroups?: number;
    limitBuilds?: number;
    limitGameCenterEnabledVersions?: number;
    limitInAppPurchases?: number;
    limitInAppPurchasesV2?: number;
    limitPreReleaseVersions?: number;
    limitPromotedPurchases?: number;
    limitReviewSubmissions?: number;
    limitSubscriptionGroups?: number;
}

export interface AppsGetInstanceRequest {
    id: string;
    fieldsApps?: Array<AppsGetInstanceFieldsAppsEnum>;
    fieldsAppEncryptionDeclarations?: Array<AppsGetInstanceFieldsAppEncryptionDeclarationsEnum>;
    fieldsCiProducts?: Array<AppsGetInstanceFieldsCiProductsEnum>;
    fieldsBetaGroups?: Array<AppsGetInstanceFieldsBetaGroupsEnum>;
    fieldsAppStoreVersions?: Array<AppsGetInstanceFieldsAppStoreVersionsEnum>;
    fieldsPreReleaseVersions?: Array<AppsGetInstanceFieldsPreReleaseVersionsEnum>;
    fieldsBetaAppLocalizations?: Array<AppsGetInstanceFieldsBetaAppLocalizationsEnum>;
    fieldsBuilds?: Array<AppsGetInstanceFieldsBuildsEnum>;
    fieldsBetaLicenseAgreements?: Array<AppsGetInstanceFieldsBetaLicenseAgreementsEnum>;
    fieldsBetaAppReviewDetails?: Array<AppsGetInstanceFieldsBetaAppReviewDetailsEnum>;
    fieldsAppInfos?: Array<AppsGetInstanceFieldsAppInfosEnum>;
    fieldsAppClips?: Array<AppsGetInstanceFieldsAppClipsEnum>;
    fieldsEndUserLicenseAgreements?: Array<AppsGetInstanceFieldsEndUserLicenseAgreementsEnum>;
    fieldsInAppPurchases?: Array<AppsGetInstanceFieldsInAppPurchasesEnum>;
    fieldsSubscriptionGroups?: Array<AppsGetInstanceFieldsSubscriptionGroupsEnum>;
    fieldsGameCenterEnabledVersions?: Array<AppsGetInstanceFieldsGameCenterEnabledVersionsEnum>;
    fieldsAppCustomProductPages?: Array<AppsGetInstanceFieldsAppCustomProductPagesEnum>;
    fieldsPromotedPurchases?: Array<AppsGetInstanceFieldsPromotedPurchasesEnum>;
    fieldsAppEvents?: Array<AppsGetInstanceFieldsAppEventsEnum>;
    fieldsReviewSubmissions?: Array<AppsGetInstanceFieldsReviewSubmissionsEnum>;
    fieldsSubscriptionGracePeriods?: Array<AppsGetInstanceFieldsSubscriptionGracePeriodsEnum>;
    fieldsGameCenterDetails?: Array<AppsGetInstanceFieldsGameCenterDetailsEnum>;
    fieldsAppStoreVersionExperiments?: Array<AppsGetInstanceFieldsAppStoreVersionExperimentsEnum>;
    include?: Array<AppsGetInstanceIncludeEnum>;
    limitAppClips?: number;
    limitAppCustomProductPages?: number;
    limitAppEncryptionDeclarations?: number;
    limitAppEvents?: number;
    limitAppInfos?: number;
    limitAppStoreVersionExperimentsV2?: number;
    limitAppStoreVersions?: number;
    limitBetaAppLocalizations?: number;
    limitBetaGroups?: number;
    limitBuilds?: number;
    limitGameCenterEnabledVersions?: number;
    limitInAppPurchases?: number;
    limitInAppPurchasesV2?: number;
    limitPreReleaseVersions?: number;
    limitPromotedPurchases?: number;
    limitReviewSubmissions?: number;
    limitSubscriptionGroups?: number;
}

export interface AppsInAppPurchasesGetToManyRelatedRequest {
    id: string;
    filterInAppPurchaseType?: Array<AppsInAppPurchasesGetToManyRelatedFilterInAppPurchaseTypeEnum>;
    filterCanBeSubmitted?: Array<string>;
    sort?: Array<AppsInAppPurchasesGetToManyRelatedSortEnum>;
    fieldsInAppPurchases?: Array<AppsInAppPurchasesGetToManyRelatedFieldsInAppPurchasesEnum>;
    fieldsApps?: Array<AppsInAppPurchasesGetToManyRelatedFieldsAppsEnum>;
    limit?: number;
    include?: Array<AppsInAppPurchasesGetToManyRelatedIncludeEnum>;
    limitApps?: number;
}

export interface AppsInAppPurchasesV2GetToManyRelatedRequest {
    id: string;
    filterProductId?: Array<string>;
    filterName?: Array<string>;
    filterState?: Array<AppsInAppPurchasesV2GetToManyRelatedFilterStateEnum>;
    filterInAppPurchaseType?: Array<AppsInAppPurchasesV2GetToManyRelatedFilterInAppPurchaseTypeEnum>;
    sort?: Array<AppsInAppPurchasesV2GetToManyRelatedSortEnum>;
    fieldsInAppPurchases?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasesEnum>;
    fieldsInAppPurchaseLocalizations?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseLocalizationsEnum>;
    fieldsInAppPurchaseContents?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseContentsEnum>;
    fieldsInAppPurchaseAppStoreReviewScreenshots?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshotsEnum>;
    fieldsPromotedPurchases?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsPromotedPurchasesEnum>;
    fieldsInAppPurchasePriceSchedules?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePriceSchedulesEnum>;
    fieldsInAppPurchaseAvailabilities?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAvailabilitiesEnum>;
    fieldsInAppPurchaseImages?: Array<AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseImagesEnum>;
    limit?: number;
    include?: Array<AppsInAppPurchasesV2GetToManyRelatedIncludeEnum>;
    limitInAppPurchaseLocalizations?: number;
    limitImages?: number;
}

export interface AppsMarketplaceSearchDetailGetToOneRelatedRequest {
    id: string;
    fieldsMarketplaceSearchDetails?: Array<AppsMarketplaceSearchDetailGetToOneRelatedFieldsMarketplaceSearchDetailsEnum>;
}

export interface AppsPerfPowerMetricsGetToManyRelatedRequest {
    id: string;
    filterPlatform?: Array<AppsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum>;
    filterMetricType?: Array<AppsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum>;
    filterDeviceType?: Array<string>;
}

export interface AppsPreReleaseVersionsGetToManyRelatedRequest {
    id: string;
    fieldsPreReleaseVersions?: Array<AppsPreReleaseVersionsGetToManyRelatedFieldsPreReleaseVersionsEnum>;
    limit?: number;
}

export interface AppsPromotedPurchasesGetToManyRelatedRequest {
    id: string;
    fieldsPromotedPurchases?: Array<AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchasesEnum>;
    fieldsInAppPurchases?: Array<AppsPromotedPurchasesGetToManyRelatedFieldsInAppPurchasesEnum>;
    fieldsSubscriptions?: Array<AppsPromotedPurchasesGetToManyRelatedFieldsSubscriptionsEnum>;
    limit?: number;
    include?: Array<AppsPromotedPurchasesGetToManyRelatedIncludeEnum>;
}

export interface AppsPromotedPurchasesGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface AppsPromotedPurchasesReplaceToManyRelationshipRequest {
    id: string;
    appPromotedPurchasesLinkagesRequest: AppPromotedPurchasesLinkagesRequest;
}

export interface AppsReviewSubmissionsGetToManyRelatedRequest {
    id: string;
    filterPlatform?: Array<AppsReviewSubmissionsGetToManyRelatedFilterPlatformEnum>;
    filterState?: Array<AppsReviewSubmissionsGetToManyRelatedFilterStateEnum>;
    fieldsReviewSubmissions?: Array<AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionsEnum>;
    fieldsApps?: Array<AppsReviewSubmissionsGetToManyRelatedFieldsAppsEnum>;
    fieldsReviewSubmissionItems?: Array<AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionItemsEnum>;
    fieldsAppStoreVersions?: Array<AppsReviewSubmissionsGetToManyRelatedFieldsAppStoreVersionsEnum>;
    fieldsActors?: Array<AppsReviewSubmissionsGetToManyRelatedFieldsActorsEnum>;
    limit?: number;
    include?: Array<AppsReviewSubmissionsGetToManyRelatedIncludeEnum>;
    limitItems?: number;
}

export interface AppsSubscriptionGracePeriodGetToOneRelatedRequest {
    id: string;
    fieldsSubscriptionGracePeriods?: Array<AppsSubscriptionGracePeriodGetToOneRelatedFieldsSubscriptionGracePeriodsEnum>;
}

export interface AppsSubscriptionGroupsGetToManyRelatedRequest {
    id: string;
    filterReferenceName?: Array<string>;
    filterSubscriptionsState?: Array<AppsSubscriptionGroupsGetToManyRelatedFilterSubscriptionsStateEnum>;
    sort?: Array<AppsSubscriptionGroupsGetToManyRelatedSortEnum>;
    fieldsSubscriptionGroups?: Array<AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupsEnum>;
    fieldsSubscriptions?: Array<AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsSubscriptionGroupLocalizations?: Array<AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum>;
    limit?: number;
    include?: Array<AppsSubscriptionGroupsGetToManyRelatedIncludeEnum>;
    limitSubscriptions?: number;
    limitSubscriptionGroupLocalizations?: number;
}

export interface AppsUpdateInstanceRequest {
    id: string;
    appUpdateRequest: AppUpdateRequest;
}

/**
 * 
 */
export class AppsApi extends runtime.BaseAPI {

    /**
     */
    async appsAlternativeDistributionKeyGetToOneRelatedRaw(requestParameters: AppsAlternativeDistributionKeyGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlternativeDistributionKeyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAlternativeDistributionKeyGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAlternativeDistributionKeys) {
            queryParameters['fields[alternativeDistributionKeys]'] = requestParameters.fieldsAlternativeDistributionKeys.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/alternativeDistributionKey`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlternativeDistributionKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAlternativeDistributionKeyGetToOneRelated(requestParameters: AppsAlternativeDistributionKeyGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlternativeDistributionKeyResponse> {
        const response = await this.appsAlternativeDistributionKeyGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAnalyticsReportRequestsGetToManyRelatedRaw(requestParameters: AppsAnalyticsReportRequestsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsReportRequestsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAnalyticsReportRequestsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterAccessType) {
            queryParameters['filter[accessType]'] = requestParameters.filterAccessType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAnalyticsReportRequests) {
            queryParameters['fields[analyticsReportRequests]'] = requestParameters.fieldsAnalyticsReportRequests.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAnalyticsReports) {
            queryParameters['fields[analyticsReports]'] = requestParameters.fieldsAnalyticsReports.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitReports !== undefined) {
            queryParameters['limit[reports]'] = requestParameters.limitReports;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/analyticsReportRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsReportRequestsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAnalyticsReportRequestsGetToManyRelated(requestParameters: AppsAnalyticsReportRequestsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsReportRequestsResponse> {
        const response = await this.appsAnalyticsReportRequestsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppAvailabilityV2GetToOneRelatedRaw(requestParameters: AppsAppAvailabilityV2GetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppAvailabilityV2Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppAvailabilityV2GetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppAvailabilities) {
            queryParameters['fields[appAvailabilities]'] = requestParameters.fieldsAppAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritoryAvailabilities) {
            queryParameters['fields[territoryAvailabilities]'] = requestParameters.fieldsTerritoryAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitTerritoryAvailabilities !== undefined) {
            queryParameters['limit[territoryAvailabilities]'] = requestParameters.limitTerritoryAvailabilities;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appAvailabilityV2`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppAvailabilityV2ResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppAvailabilityV2GetToOneRelated(requestParameters: AppsAppAvailabilityV2GetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppAvailabilityV2Response> {
        const response = await this.appsAppAvailabilityV2GetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppClipsGetToManyRelatedRaw(requestParameters: AppsAppClipsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppClipsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterBundleId) {
            queryParameters['filter[bundleId]'] = requestParameters.filterBundleId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppClipDefaultExperiences !== undefined) {
            queryParameters['limit[appClipDefaultExperiences]'] = requestParameters.limitAppClipDefaultExperiences;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appClips`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppClipsGetToManyRelated(requestParameters: AppsAppClipsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipsResponse> {
        const response = await this.appsAppClipsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppCustomProductPagesGetToManyRelatedRaw(requestParameters: AppsAppCustomProductPagesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppCustomProductPagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppCustomProductPagesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterVisible) {
            queryParameters['filter[visible]'] = requestParameters.filterVisible.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppCustomProductPages) {
            queryParameters['fields[appCustomProductPages]'] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppCustomProductPageVersions) {
            queryParameters['fields[appCustomProductPageVersions]'] = requestParameters.fieldsAppCustomProductPageVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppCustomProductPageVersions !== undefined) {
            queryParameters['limit[appCustomProductPageVersions]'] = requestParameters.limitAppCustomProductPageVersions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appCustomProductPages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppCustomProductPagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppCustomProductPagesGetToManyRelated(requestParameters: AppsAppCustomProductPagesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppCustomProductPagesResponse> {
        const response = await this.appsAppCustomProductPagesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppEncryptionDeclarationsGetToManyRelatedRaw(requestParameters: AppsAppEncryptionDeclarationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEncryptionDeclarationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppEncryptionDeclarationsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBuilds) {
            queryParameters['filter[builds]'] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarationDocuments) {
            queryParameters['fields[appEncryptionDeclarationDocuments]'] = requestParameters.fieldsAppEncryptionDeclarationDocuments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appEncryptionDeclarations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppEncryptionDeclarationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppEncryptionDeclarationsGetToManyRelated(requestParameters: AppsAppEncryptionDeclarationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEncryptionDeclarationsResponse> {
        const response = await this.appsAppEncryptionDeclarationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppEventsGetToManyRelatedRaw(requestParameters: AppsAppEventsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEventsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppEventsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterEventState) {
            queryParameters['filter[eventState]'] = requestParameters.filterEventState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEventLocalizations) {
            queryParameters['fields[appEventLocalizations]'] = requestParameters.fieldsAppEventLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appEvents`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppEventsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppEventsGetToManyRelated(requestParameters: AppsAppEventsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEventsResponse> {
        const response = await this.appsAppEventsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppInfosGetToManyRelatedRaw(requestParameters: AppsAppInfosGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppInfosResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppInfosGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppInfos) {
            queryParameters['fields[appInfos]'] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAgeRatingDeclarations) {
            queryParameters['fields[ageRatingDeclarations]'] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppInfoLocalizations) {
            queryParameters['fields[appInfoLocalizations]'] = requestParameters.fieldsAppInfoLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppCategories) {
            queryParameters['fields[appCategories]'] = requestParameters.fieldsAppCategories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppInfoLocalizations !== undefined) {
            queryParameters['limit[appInfoLocalizations]'] = requestParameters.limitAppInfoLocalizations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appInfos`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppInfosResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppInfosGetToManyRelated(requestParameters: AppsAppInfosGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppInfosResponse> {
        const response = await this.appsAppInfosGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppPricePointsGetToManyRelatedRaw(requestParameters: AppsAppPricePointsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPricePointsV3Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppPricePointsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppPricePoints) {
            queryParameters['fields[appPricePoints]'] = requestParameters.fieldsAppPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appPricePoints`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPricePointsV3ResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppPricePointsGetToManyRelated(requestParameters: AppsAppPricePointsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPricePointsV3Response> {
        const response = await this.appsAppPricePointsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppPriceScheduleGetToOneRelatedRaw(requestParameters: AppsAppPriceScheduleGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPriceScheduleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppPriceScheduleGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppPriceSchedules) {
            queryParameters['fields[appPriceSchedules]'] = requestParameters.fieldsAppPriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppPrices) {
            queryParameters['fields[appPrices]'] = requestParameters.fieldsAppPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitManualPrices !== undefined) {
            queryParameters['limit[manualPrices]'] = requestParameters.limitManualPrices;
        }

        if (requestParameters.limitAutomaticPrices !== undefined) {
            queryParameters['limit[automaticPrices]'] = requestParameters.limitAutomaticPrices;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appPriceSchedule`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPriceScheduleResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppPriceScheduleGetToOneRelated(requestParameters: AppsAppPriceScheduleGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPriceScheduleResponse> {
        const response = await this.appsAppPriceScheduleGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppStoreVersionExperimentsV2GetToManyRelatedRaw(requestParameters: AppsAppStoreVersionExperimentsV2GetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionExperimentsV2Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppStoreVersionExperimentsV2GetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperimentTreatments) {
            queryParameters['fields[appStoreVersionExperimentTreatments]'] = requestParameters.fieldsAppStoreVersionExperimentTreatments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitControlVersions !== undefined) {
            queryParameters['limit[controlVersions]'] = requestParameters.limitControlVersions;
        }

        if (requestParameters.limitAppStoreVersionExperimentTreatments !== undefined) {
            queryParameters['limit[appStoreVersionExperimentTreatments]'] = requestParameters.limitAppStoreVersionExperimentTreatments;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appStoreVersionExperimentsV2`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionExperimentsV2ResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppStoreVersionExperimentsV2GetToManyRelated(requestParameters: AppsAppStoreVersionExperimentsV2GetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionExperimentsV2Response> {
        const response = await this.appsAppStoreVersionExperimentsV2GetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsAppStoreVersionsGetToManyRelatedRaw(requestParameters: AppsAppStoreVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsAppStoreVersionsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterVersionString) {
            queryParameters['filter[versionString]'] = requestParameters.filterVersionString.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterAppStoreState) {
            queryParameters['filter[appStoreState]'] = requestParameters.filterAppStoreState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterAppVersionState) {
            queryParameters['filter[appVersionState]'] = requestParameters.filterAppVersionState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAgeRatingDeclarations) {
            queryParameters['fields[ageRatingDeclarations]'] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
            queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAppVersions) {
            queryParameters['fields[gameCenterAppVersions]'] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreReviewDetails) {
            queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionSubmissions) {
            queryParameters['fields[appStoreVersionSubmissions]'] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAlternativeDistributionPackages) {
            queryParameters['fields[alternativeDistributionPackages]'] = requestParameters.fieldsAlternativeDistributionPackages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
            queryParameters['limit[appStoreVersionLocalizations]'] = requestParameters.limitAppStoreVersionLocalizations;
        }

        if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
            queryParameters['limit[appStoreVersionExperiments]'] = requestParameters.limitAppStoreVersionExperiments;
        }

        if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
            queryParameters['limit[appStoreVersionExperimentsV2]'] = requestParameters.limitAppStoreVersionExperimentsV2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/appStoreVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsAppStoreVersionsGetToManyRelated(requestParameters: AppsAppStoreVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionsResponse> {
        const response = await this.appsAppStoreVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsBetaAppLocalizationsGetToManyRelatedRaw(requestParameters: AppsBetaAppLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppLocalizationsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsBetaAppLocalizationsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/betaAppLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppLocalizationsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsBetaAppLocalizationsGetToManyRelated(requestParameters: AppsBetaAppLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppLocalizationsWithoutIncludesResponse> {
        const response = await this.appsBetaAppLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsBetaAppReviewDetailGetToOneRelatedRaw(requestParameters: AppsBetaAppReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppReviewDetailWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsBetaAppReviewDetailGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaAppReviewDetails) {
            queryParameters['fields[betaAppReviewDetails]'] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/betaAppReviewDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppReviewDetailWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsBetaAppReviewDetailGetToOneRelated(requestParameters: AppsBetaAppReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppReviewDetailWithoutIncludesResponse> {
        const response = await this.appsBetaAppReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsBetaGroupsGetToManyRelatedRaw(requestParameters: AppsBetaGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsBetaGroupsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsBetaGroupsGetToManyRelated(requestParameters: AppsBetaGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupsWithoutIncludesResponse> {
        const response = await this.appsBetaGroupsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsBetaLicenseAgreementGetToOneRelatedRaw(requestParameters: AppsBetaLicenseAgreementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaLicenseAgreementWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsBetaLicenseAgreementGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/betaLicenseAgreement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaLicenseAgreementWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsBetaLicenseAgreementGetToOneRelated(requestParameters: AppsBetaLicenseAgreementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaLicenseAgreementWithoutIncludesResponse> {
        const response = await this.appsBetaLicenseAgreementGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsBetaTesterUsagesGetMetricsRaw(requestParameters: AppsBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsBetaTesterUsagesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBetaTesters !== undefined) {
            queryParameters['filter[betaTesters]'] = requestParameters.filterBetaTesters;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppsBetaTesterUsagesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsBetaTesterUsagesGetMetrics(requestParameters: AppsBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppsBetaTesterUsagesV1MetricResponse> {
        const response = await this.appsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsBetaTestersDeleteToManyRelationshipRaw(requestParameters: AppsBetaTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsBetaTestersDeleteToManyRelationship.');
        }

        if (requestParameters.appBetaTestersLinkagesRequest === null || requestParameters.appBetaTestersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('appBetaTestersLinkagesRequest','Required parameter requestParameters.appBetaTestersLinkagesRequest was null or undefined when calling appsBetaTestersDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AppBetaTestersLinkagesRequestToJSON(requestParameters.appBetaTestersLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appsBetaTestersDeleteToManyRelationship(requestParameters: AppsBetaTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appsBetaTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appsBuildsGetToManyRelatedRaw(requestParameters: AppsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsBuildsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsBuildsGetToManyRelated(requestParameters: AppsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildsWithoutIncludesResponse> {
        const response = await this.appsBuildsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsCiProductGetToOneRelatedRaw(requestParameters: AppsCiProductGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiProductResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsCiProductGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBundleIds) {
            queryParameters['fields[bundleIds]'] = requestParameters.fieldsBundleIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitPrimaryRepositories !== undefined) {
            queryParameters['limit[primaryRepositories]'] = requestParameters.limitPrimaryRepositories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/ciProduct`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CiProductResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsCiProductGetToOneRelated(requestParameters: AppsCiProductGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiProductResponse> {
        const response = await this.appsCiProductGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsCustomerReviewsGetToManyRelatedRaw(requestParameters: AppsCustomerReviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerReviewsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsCustomerReviewsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterRating) {
            queryParameters['filter[rating]'] = requestParameters.filterRating.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.existsPublishedResponse !== undefined) {
            queryParameters['exists[publishedResponse]'] = requestParameters.existsPublishedResponse;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCustomerReviews) {
            queryParameters['fields[customerReviews]'] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCustomerReviewResponses) {
            queryParameters['fields[customerReviewResponses]'] = requestParameters.fieldsCustomerReviewResponses.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/customerReviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerReviewsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsCustomerReviewsGetToManyRelated(requestParameters: AppsCustomerReviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerReviewsResponse> {
        const response = await this.appsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsEndUserLicenseAgreementGetToOneRelatedRaw(requestParameters: AppsEndUserLicenseAgreementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EndUserLicenseAgreementWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsEndUserLicenseAgreementGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsEndUserLicenseAgreements) {
            queryParameters['fields[endUserLicenseAgreements]'] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/endUserLicenseAgreement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndUserLicenseAgreementWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsEndUserLicenseAgreementGetToOneRelated(requestParameters: AppsEndUserLicenseAgreementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EndUserLicenseAgreementWithoutIncludesResponse> {
        const response = await this.appsEndUserLicenseAgreementGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsGameCenterDetailGetToOneRelatedRaw(requestParameters: AppsGameCenterDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsGameCenterDetailGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAppVersions) {
            queryParameters['fields[gameCenterAppVersions]'] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterAppVersions !== undefined) {
            queryParameters['limit[gameCenterAppVersions]'] = requestParameters.limitGameCenterAppVersions;
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitGameCenterAchievements !== undefined) {
            queryParameters['limit[gameCenterAchievements]'] = requestParameters.limitGameCenterAchievements;
        }

        if (requestParameters.limitAchievementReleases !== undefined) {
            queryParameters['limit[achievementReleases]'] = requestParameters.limitAchievementReleases;
        }

        if (requestParameters.limitLeaderboardReleases !== undefined) {
            queryParameters['limit[leaderboardReleases]'] = requestParameters.limitLeaderboardReleases;
        }

        if (requestParameters.limitLeaderboardSetReleases !== undefined) {
            queryParameters['limit[leaderboardSetReleases]'] = requestParameters.limitLeaderboardSetReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/gameCenterDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsGameCenterDetailGetToOneRelated(requestParameters: AppsGameCenterDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterDetailResponse> {
        const response = await this.appsGameCenterDetailGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsGameCenterEnabledVersionsGetToManyRelatedRaw(requestParameters: AppsGameCenterEnabledVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterEnabledVersionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsGameCenterEnabledVersionsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterVersionString) {
            queryParameters['filter[versionString]'] = requestParameters.filterVersionString.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterEnabledVersions) {
            queryParameters['fields[gameCenterEnabledVersions]'] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitCompatibleVersions !== undefined) {
            queryParameters['limit[compatibleVersions]'] = requestParameters.limitCompatibleVersions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/gameCenterEnabledVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterEnabledVersionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsGameCenterEnabledVersionsGetToManyRelated(requestParameters: AppsGameCenterEnabledVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterEnabledVersionsResponse> {
        const response = await this.appsGameCenterEnabledVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsGetCollectionRaw(requestParameters: AppsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBundleId) {
            queryParameters['filter[bundleId]'] = requestParameters.filterBundleId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterSku) {
            queryParameters['filter[sku]'] = requestParameters.filterSku.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterAppStoreVersionsAppStoreState) {
            queryParameters['filter[appStoreVersions.appStoreState]'] = requestParameters.filterAppStoreVersionsAppStoreState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterAppStoreVersionsPlatform) {
            queryParameters['filter[appStoreVersions.platform]'] = requestParameters.filterAppStoreVersionsPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterAppStoreVersionsAppVersionState) {
            queryParameters['filter[appStoreVersions.appVersionState]'] = requestParameters.filterAppStoreVersionsAppVersionState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterReviewSubmissionsState) {
            queryParameters['filter[reviewSubmissions.state]'] = requestParameters.filterReviewSubmissionsState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterReviewSubmissionsPlatform) {
            queryParameters['filter[reviewSubmissions.platform]'] = requestParameters.filterReviewSubmissionsPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterAppStoreVersions) {
            queryParameters['filter[appStoreVersions]'] = requestParameters.filterAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.existsGameCenterEnabledVersions !== undefined) {
            queryParameters['exists[gameCenterEnabledVersions]'] = requestParameters.existsGameCenterEnabledVersions;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppReviewDetails) {
            queryParameters['fields[betaAppReviewDetails]'] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppInfos) {
            queryParameters['fields[appInfos]'] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsEndUserLicenseAgreements) {
            queryParameters['fields[endUserLicenseAgreements]'] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterEnabledVersions) {
            queryParameters['fields[gameCenterEnabledVersions]'] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppCustomProductPages) {
            queryParameters['fields[appCustomProductPages]'] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionGracePeriods) {
            queryParameters['fields[subscriptionGracePeriods]'] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppClips !== undefined) {
            queryParameters['limit[appClips]'] = requestParameters.limitAppClips;
        }

        if (requestParameters.limitAppCustomProductPages !== undefined) {
            queryParameters['limit[appCustomProductPages]'] = requestParameters.limitAppCustomProductPages;
        }

        if (requestParameters.limitAppEncryptionDeclarations !== undefined) {
            queryParameters['limit[appEncryptionDeclarations]'] = requestParameters.limitAppEncryptionDeclarations;
        }

        if (requestParameters.limitAppEvents !== undefined) {
            queryParameters['limit[appEvents]'] = requestParameters.limitAppEvents;
        }

        if (requestParameters.limitAppInfos !== undefined) {
            queryParameters['limit[appInfos]'] = requestParameters.limitAppInfos;
        }

        if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
            queryParameters['limit[appStoreVersionExperimentsV2]'] = requestParameters.limitAppStoreVersionExperimentsV2;
        }

        if (requestParameters.limitAppStoreVersions !== undefined) {
            queryParameters['limit[appStoreVersions]'] = requestParameters.limitAppStoreVersions;
        }

        if (requestParameters.limitBetaAppLocalizations !== undefined) {
            queryParameters['limit[betaAppLocalizations]'] = requestParameters.limitBetaAppLocalizations;
        }

        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        if (requestParameters.limitGameCenterEnabledVersions !== undefined) {
            queryParameters['limit[gameCenterEnabledVersions]'] = requestParameters.limitGameCenterEnabledVersions;
        }

        if (requestParameters.limitInAppPurchases !== undefined) {
            queryParameters['limit[inAppPurchases]'] = requestParameters.limitInAppPurchases;
        }

        if (requestParameters.limitInAppPurchasesV2 !== undefined) {
            queryParameters['limit[inAppPurchasesV2]'] = requestParameters.limitInAppPurchasesV2;
        }

        if (requestParameters.limitPreReleaseVersions !== undefined) {
            queryParameters['limit[preReleaseVersions]'] = requestParameters.limitPreReleaseVersions;
        }

        if (requestParameters.limitPromotedPurchases !== undefined) {
            queryParameters['limit[promotedPurchases]'] = requestParameters.limitPromotedPurchases;
        }

        if (requestParameters.limitReviewSubmissions !== undefined) {
            queryParameters['limit[reviewSubmissions]'] = requestParameters.limitReviewSubmissions;
        }

        if (requestParameters.limitSubscriptionGroups !== undefined) {
            queryParameters['limit[subscriptionGroups]'] = requestParameters.limitSubscriptionGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsGetCollection(requestParameters: AppsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppsResponse> {
        const response = await this.appsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsGetInstanceRaw(requestParameters: AppsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppReviewDetails) {
            queryParameters['fields[betaAppReviewDetails]'] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppInfos) {
            queryParameters['fields[appInfos]'] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsEndUserLicenseAgreements) {
            queryParameters['fields[endUserLicenseAgreements]'] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterEnabledVersions) {
            queryParameters['fields[gameCenterEnabledVersions]'] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppCustomProductPages) {
            queryParameters['fields[appCustomProductPages]'] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionGracePeriods) {
            queryParameters['fields[subscriptionGracePeriods]'] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppClips !== undefined) {
            queryParameters['limit[appClips]'] = requestParameters.limitAppClips;
        }

        if (requestParameters.limitAppCustomProductPages !== undefined) {
            queryParameters['limit[appCustomProductPages]'] = requestParameters.limitAppCustomProductPages;
        }

        if (requestParameters.limitAppEncryptionDeclarations !== undefined) {
            queryParameters['limit[appEncryptionDeclarations]'] = requestParameters.limitAppEncryptionDeclarations;
        }

        if (requestParameters.limitAppEvents !== undefined) {
            queryParameters['limit[appEvents]'] = requestParameters.limitAppEvents;
        }

        if (requestParameters.limitAppInfos !== undefined) {
            queryParameters['limit[appInfos]'] = requestParameters.limitAppInfos;
        }

        if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
            queryParameters['limit[appStoreVersionExperimentsV2]'] = requestParameters.limitAppStoreVersionExperimentsV2;
        }

        if (requestParameters.limitAppStoreVersions !== undefined) {
            queryParameters['limit[appStoreVersions]'] = requestParameters.limitAppStoreVersions;
        }

        if (requestParameters.limitBetaAppLocalizations !== undefined) {
            queryParameters['limit[betaAppLocalizations]'] = requestParameters.limitBetaAppLocalizations;
        }

        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        if (requestParameters.limitGameCenterEnabledVersions !== undefined) {
            queryParameters['limit[gameCenterEnabledVersions]'] = requestParameters.limitGameCenterEnabledVersions;
        }

        if (requestParameters.limitInAppPurchases !== undefined) {
            queryParameters['limit[inAppPurchases]'] = requestParameters.limitInAppPurchases;
        }

        if (requestParameters.limitInAppPurchasesV2 !== undefined) {
            queryParameters['limit[inAppPurchasesV2]'] = requestParameters.limitInAppPurchasesV2;
        }

        if (requestParameters.limitPreReleaseVersions !== undefined) {
            queryParameters['limit[preReleaseVersions]'] = requestParameters.limitPreReleaseVersions;
        }

        if (requestParameters.limitPromotedPurchases !== undefined) {
            queryParameters['limit[promotedPurchases]'] = requestParameters.limitPromotedPurchases;
        }

        if (requestParameters.limitReviewSubmissions !== undefined) {
            queryParameters['limit[reviewSubmissions]'] = requestParameters.limitReviewSubmissions;
        }

        if (requestParameters.limitSubscriptionGroups !== undefined) {
            queryParameters['limit[subscriptionGroups]'] = requestParameters.limitSubscriptionGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsGetInstance(requestParameters: AppsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppResponse> {
        const response = await this.appsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsInAppPurchasesGetToManyRelatedRaw(requestParameters: AppsInAppPurchasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InAppPurchasesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsInAppPurchasesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterInAppPurchaseType) {
            queryParameters['filter[inAppPurchaseType]'] = requestParameters.filterInAppPurchaseType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterCanBeSubmitted) {
            queryParameters['filter[canBeSubmitted]'] = requestParameters.filterCanBeSubmitted.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitApps !== undefined) {
            queryParameters['limit[apps]'] = requestParameters.limitApps;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/inAppPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InAppPurchasesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsInAppPurchasesGetToManyRelated(requestParameters: AppsInAppPurchasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InAppPurchasesResponse> {
        const response = await this.appsInAppPurchasesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsInAppPurchasesV2GetToManyRelatedRaw(requestParameters: AppsInAppPurchasesV2GetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InAppPurchasesV2Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsInAppPurchasesV2GetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterProductId) {
            queryParameters['filter[productId]'] = requestParameters.filterProductId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterInAppPurchaseType) {
            queryParameters['filter[inAppPurchaseType]'] = requestParameters.filterInAppPurchaseType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchaseLocalizations) {
            queryParameters['fields[inAppPurchaseLocalizations]'] = requestParameters.fieldsInAppPurchaseLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchaseContents) {
            queryParameters['fields[inAppPurchaseContents]'] = requestParameters.fieldsInAppPurchaseContents.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchaseAppStoreReviewScreenshots) {
            queryParameters['fields[inAppPurchaseAppStoreReviewScreenshots]'] = requestParameters.fieldsInAppPurchaseAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchasePriceSchedules) {
            queryParameters['fields[inAppPurchasePriceSchedules]'] = requestParameters.fieldsInAppPurchasePriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchaseAvailabilities) {
            queryParameters['fields[inAppPurchaseAvailabilities]'] = requestParameters.fieldsInAppPurchaseAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchaseImages) {
            queryParameters['fields[inAppPurchaseImages]'] = requestParameters.fieldsInAppPurchaseImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitInAppPurchaseLocalizations !== undefined) {
            queryParameters['limit[inAppPurchaseLocalizations]'] = requestParameters.limitInAppPurchaseLocalizations;
        }

        if (requestParameters.limitImages !== undefined) {
            queryParameters['limit[images]'] = requestParameters.limitImages;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/inAppPurchasesV2`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InAppPurchasesV2ResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsInAppPurchasesV2GetToManyRelated(requestParameters: AppsInAppPurchasesV2GetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InAppPurchasesV2Response> {
        const response = await this.appsInAppPurchasesV2GetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsMarketplaceSearchDetailGetToOneRelatedRaw(requestParameters: AppsMarketplaceSearchDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketplaceSearchDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsMarketplaceSearchDetailGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsMarketplaceSearchDetails) {
            queryParameters['fields[marketplaceSearchDetails]'] = requestParameters.fieldsMarketplaceSearchDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/marketplaceSearchDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketplaceSearchDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsMarketplaceSearchDetailGetToOneRelated(requestParameters: AppsMarketplaceSearchDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketplaceSearchDetailResponse> {
        const response = await this.appsMarketplaceSearchDetailGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsPerfPowerMetricsGetToManyRelatedRaw(requestParameters: AppsPerfPowerMetricsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<XcodeMetrics>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsPerfPowerMetricsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterMetricType) {
            queryParameters['filter[metricType]'] = requestParameters.filterMetricType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterDeviceType) {
            queryParameters['filter[deviceType]'] = requestParameters.filterDeviceType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/perfPowerMetrics`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => XcodeMetricsFromJSON(jsonValue));
    }

    /**
     */
    async appsPerfPowerMetricsGetToManyRelated(requestParameters: AppsPerfPowerMetricsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<XcodeMetrics> {
        const response = await this.appsPerfPowerMetricsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsPreReleaseVersionsGetToManyRelatedRaw(requestParameters: AppsPreReleaseVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreReleaseVersionsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsPreReleaseVersionsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/preReleaseVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreReleaseVersionsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsPreReleaseVersionsGetToManyRelated(requestParameters: AppsPreReleaseVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreReleaseVersionsWithoutIncludesResponse> {
        const response = await this.appsPreReleaseVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsPromotedPurchasesGetToManyRelatedRaw(requestParameters: AppsPromotedPurchasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotedPurchasesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsPromotedPurchasesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/promotedPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotedPurchasesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsPromotedPurchasesGetToManyRelated(requestParameters: AppsPromotedPurchasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotedPurchasesResponse> {
        const response = await this.appsPromotedPurchasesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsPromotedPurchasesGetToManyRelationshipRaw(requestParameters: AppsPromotedPurchasesGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPromotedPurchasesLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsPromotedPurchasesGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/relationships/promotedPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPromotedPurchasesLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsPromotedPurchasesGetToManyRelationship(requestParameters: AppsPromotedPurchasesGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPromotedPurchasesLinkagesResponse> {
        const response = await this.appsPromotedPurchasesGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsPromotedPurchasesReplaceToManyRelationshipRaw(requestParameters: AppsPromotedPurchasesReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsPromotedPurchasesReplaceToManyRelationship.');
        }

        if (requestParameters.appPromotedPurchasesLinkagesRequest === null || requestParameters.appPromotedPurchasesLinkagesRequest === undefined) {
            throw new runtime.RequiredError('appPromotedPurchasesLinkagesRequest','Required parameter requestParameters.appPromotedPurchasesLinkagesRequest was null or undefined when calling appsPromotedPurchasesReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/relationships/promotedPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppPromotedPurchasesLinkagesRequestToJSON(requestParameters.appPromotedPurchasesLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appsPromotedPurchasesReplaceToManyRelationship(requestParameters: AppsPromotedPurchasesReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appsPromotedPurchasesReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appsReviewSubmissionsGetToManyRelatedRaw(requestParameters: AppsReviewSubmissionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewSubmissionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsReviewSubmissionsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsReviewSubmissionItems) {
            queryParameters['fields[reviewSubmissionItems]'] = requestParameters.fieldsReviewSubmissionItems.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsActors) {
            queryParameters['fields[actors]'] = requestParameters.fieldsActors.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitItems !== undefined) {
            queryParameters['limit[items]'] = requestParameters.limitItems;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/reviewSubmissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewSubmissionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsReviewSubmissionsGetToManyRelated(requestParameters: AppsReviewSubmissionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewSubmissionsResponse> {
        const response = await this.appsReviewSubmissionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsSubscriptionGracePeriodGetToOneRelatedRaw(requestParameters: AppsSubscriptionGracePeriodGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionGracePeriodResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsSubscriptionGracePeriodGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptionGracePeriods) {
            queryParameters['fields[subscriptionGracePeriods]'] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/subscriptionGracePeriod`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionGracePeriodResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsSubscriptionGracePeriodGetToOneRelated(requestParameters: AppsSubscriptionGracePeriodGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionGracePeriodResponse> {
        const response = await this.appsSubscriptionGracePeriodGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsSubscriptionGroupsGetToManyRelatedRaw(requestParameters: AppsSubscriptionGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionGroupsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsSubscriptionGroupsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterReferenceName) {
            queryParameters['filter[referenceName]'] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterSubscriptionsState) {
            queryParameters['filter[subscriptions.state]'] = requestParameters.filterSubscriptionsState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionGroupLocalizations) {
            queryParameters['fields[subscriptionGroupLocalizations]'] = requestParameters.fieldsSubscriptionGroupLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitSubscriptions !== undefined) {
            queryParameters['limit[subscriptions]'] = requestParameters.limitSubscriptions;
        }

        if (requestParameters.limitSubscriptionGroupLocalizations !== undefined) {
            queryParameters['limit[subscriptionGroupLocalizations]'] = requestParameters.limitSubscriptionGroupLocalizations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/subscriptionGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionGroupsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsSubscriptionGroupsGetToManyRelated(requestParameters: AppsSubscriptionGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionGroupsResponse> {
        const response = await this.appsSubscriptionGroupsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsUpdateInstanceRaw(requestParameters: AppsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsUpdateInstance.');
        }

        if (requestParameters.appUpdateRequest === null || requestParameters.appUpdateRequest === undefined) {
            throw new runtime.RequiredError('appUpdateRequest','Required parameter requestParameters.appUpdateRequest was null or undefined when calling appsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppUpdateRequestToJSON(requestParameters.appUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsUpdateInstance(requestParameters: AppsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppResponse> {
        const response = await this.appsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppsAlternativeDistributionKeyGetToOneRelatedFieldsAlternativeDistributionKeysEnum = {
    PublicKey: 'publicKey'
} as const;
export type AppsAlternativeDistributionKeyGetToOneRelatedFieldsAlternativeDistributionKeysEnum = typeof AppsAlternativeDistributionKeyGetToOneRelatedFieldsAlternativeDistributionKeysEnum[keyof typeof AppsAlternativeDistributionKeyGetToOneRelatedFieldsAlternativeDistributionKeysEnum];
/**
 * @export
 */
export const AppsAnalyticsReportRequestsGetToManyRelatedFilterAccessTypeEnum = {
    OneTimeSnapshot: 'ONE_TIME_SNAPSHOT',
    Ongoing: 'ONGOING'
} as const;
export type AppsAnalyticsReportRequestsGetToManyRelatedFilterAccessTypeEnum = typeof AppsAnalyticsReportRequestsGetToManyRelatedFilterAccessTypeEnum[keyof typeof AppsAnalyticsReportRequestsGetToManyRelatedFilterAccessTypeEnum];
/**
 * @export
 */
export const AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportRequestsEnum = {
    AccessType: 'accessType',
    StoppedDueToInactivity: 'stoppedDueToInactivity',
    Reports: 'reports'
} as const;
export type AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportRequestsEnum = typeof AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportRequestsEnum[keyof typeof AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportRequestsEnum];
/**
 * @export
 */
export const AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportsEnum = {
    Name: 'name',
    Category: 'category',
    Instances: 'instances'
} as const;
export type AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportsEnum = typeof AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportsEnum[keyof typeof AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportsEnum];
/**
 * @export
 */
export const AppsAnalyticsReportRequestsGetToManyRelatedIncludeEnum = {
    Reports: 'reports'
} as const;
export type AppsAnalyticsReportRequestsGetToManyRelatedIncludeEnum = typeof AppsAnalyticsReportRequestsGetToManyRelatedIncludeEnum[keyof typeof AppsAnalyticsReportRequestsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppAvailabilityV2GetToOneRelatedFieldsAppAvailabilitiesEnum = {
    AvailableInNewTerritories: 'availableInNewTerritories',
    TerritoryAvailabilities: 'territoryAvailabilities'
} as const;
export type AppsAppAvailabilityV2GetToOneRelatedFieldsAppAvailabilitiesEnum = typeof AppsAppAvailabilityV2GetToOneRelatedFieldsAppAvailabilitiesEnum[keyof typeof AppsAppAvailabilityV2GetToOneRelatedFieldsAppAvailabilitiesEnum];
/**
 * @export
 */
export const AppsAppAvailabilityV2GetToOneRelatedFieldsTerritoryAvailabilitiesEnum = {
    Available: 'available',
    ReleaseDate: 'releaseDate',
    PreOrderEnabled: 'preOrderEnabled',
    PreOrderPublishDate: 'preOrderPublishDate',
    ContentStatuses: 'contentStatuses',
    Territory: 'territory'
} as const;
export type AppsAppAvailabilityV2GetToOneRelatedFieldsTerritoryAvailabilitiesEnum = typeof AppsAppAvailabilityV2GetToOneRelatedFieldsTerritoryAvailabilitiesEnum[keyof typeof AppsAppAvailabilityV2GetToOneRelatedFieldsTerritoryAvailabilitiesEnum];
/**
 * @export
 */
export const AppsAppAvailabilityV2GetToOneRelatedIncludeEnum = {
    TerritoryAvailabilities: 'territoryAvailabilities'
} as const;
export type AppsAppAvailabilityV2GetToOneRelatedIncludeEnum = typeof AppsAppAvailabilityV2GetToOneRelatedIncludeEnum[keyof typeof AppsAppAvailabilityV2GetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppClipsGetToManyRelatedFieldsAppClipsEnum = {
    BundleId: 'bundleId',
    App: 'app',
    AppClipDefaultExperiences: 'appClipDefaultExperiences',
    AppClipAdvancedExperiences: 'appClipAdvancedExperiences'
} as const;
export type AppsAppClipsGetToManyRelatedFieldsAppClipsEnum = typeof AppsAppClipsGetToManyRelatedFieldsAppClipsEnum[keyof typeof AppsAppClipsGetToManyRelatedFieldsAppClipsEnum];
/**
 * @export
 */
export const AppsAppClipsGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsAppClipsGetToManyRelatedFieldsAppsEnum = typeof AppsAppClipsGetToManyRelatedFieldsAppsEnum[keyof typeof AppsAppClipsGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsAppClipsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail'
} as const;
export type AppsAppClipsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = typeof AppsAppClipsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum[keyof typeof AppsAppClipsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const AppsAppClipsGetToManyRelatedIncludeEnum = {
    App: 'app',
    AppClipDefaultExperiences: 'appClipDefaultExperiences'
} as const;
export type AppsAppClipsGetToManyRelatedIncludeEnum = typeof AppsAppClipsGetToManyRelatedIncludeEnum[keyof typeof AppsAppClipsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPagesEnum = {
    Name: 'name',
    Url: 'url',
    Visible: 'visible',
    App: 'app',
    AppCustomProductPageVersions: 'appCustomProductPageVersions'
} as const;
export type AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPagesEnum = typeof AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPagesEnum[keyof typeof AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPagesEnum];
/**
 * @export
 */
export const AppsAppCustomProductPagesGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsAppCustomProductPagesGetToManyRelatedFieldsAppsEnum = typeof AppsAppCustomProductPagesGetToManyRelatedFieldsAppsEnum[keyof typeof AppsAppCustomProductPagesGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPageVersionsEnum = {
    Version: 'version',
    State: 'state',
    DeepLink: 'deepLink',
    AppCustomProductPage: 'appCustomProductPage',
    AppCustomProductPageLocalizations: 'appCustomProductPageLocalizations'
} as const;
export type AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPageVersionsEnum = typeof AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPageVersionsEnum[keyof typeof AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPageVersionsEnum];
/**
 * @export
 */
export const AppsAppCustomProductPagesGetToManyRelatedIncludeEnum = {
    App: 'app',
    AppCustomProductPageVersions: 'appCustomProductPageVersions'
} as const;
export type AppsAppCustomProductPagesGetToManyRelatedIncludeEnum = typeof AppsAppCustomProductPagesGetToManyRelatedIncludeEnum[keyof typeof AppsAppCustomProductPagesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppEncryptionDeclarationsGetToManyRelatedFilterPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type AppsAppEncryptionDeclarationsGetToManyRelatedFilterPlatformEnum = typeof AppsAppEncryptionDeclarationsGetToManyRelatedFilterPlatformEnum[keyof typeof AppsAppEncryptionDeclarationsGetToManyRelatedFilterPlatformEnum];
/**
 * @export
 */
export const AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationsEnum = {
    AppDescription: 'appDescription',
    CreatedDate: 'createdDate',
    UsesEncryption: 'usesEncryption',
    Exempt: 'exempt',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    DocumentUrl: 'documentUrl',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    CodeValue: 'codeValue',
    App: 'app',
    Builds: 'builds',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument'
} as const;
export type AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationsEnum = typeof AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationsEnum[keyof typeof AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppsEnum = typeof AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppsEnum[keyof typeof AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsAppEncryptionDeclarationsGetToManyRelatedFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type AppsAppEncryptionDeclarationsGetToManyRelatedFieldsBuildsEnum = typeof AppsAppEncryptionDeclarationsGetToManyRelatedFieldsBuildsEnum[keyof typeof AppsAppEncryptionDeclarationsGetToManyRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationDocumentsEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    AssetToken: 'assetToken',
    DownloadUrl: 'downloadUrl',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    AssetDeliveryState: 'assetDeliveryState'
} as const;
export type AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationDocumentsEnum = typeof AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationDocumentsEnum[keyof typeof AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationDocumentsEnum];
/**
 * @export
 */
export const AppsAppEncryptionDeclarationsGetToManyRelatedIncludeEnum = {
    App: 'app',
    Builds: 'builds',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument'
} as const;
export type AppsAppEncryptionDeclarationsGetToManyRelatedIncludeEnum = typeof AppsAppEncryptionDeclarationsGetToManyRelatedIncludeEnum[keyof typeof AppsAppEncryptionDeclarationsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppEventsGetToManyRelatedFilterEventStateEnum = {
    Draft: 'DRAFT',
    ReadyForReview: 'READY_FOR_REVIEW',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    Rejected: 'REJECTED',
    Accepted: 'ACCEPTED',
    Approved: 'APPROVED',
    Published: 'PUBLISHED',
    Past: 'PAST',
    Archived: 'ARCHIVED'
} as const;
export type AppsAppEventsGetToManyRelatedFilterEventStateEnum = typeof AppsAppEventsGetToManyRelatedFilterEventStateEnum[keyof typeof AppsAppEventsGetToManyRelatedFilterEventStateEnum];
/**
 * @export
 */
export const AppsAppEventsGetToManyRelatedFieldsAppEventsEnum = {
    ReferenceName: 'referenceName',
    Badge: 'badge',
    EventState: 'eventState',
    DeepLink: 'deepLink',
    PurchaseRequirement: 'purchaseRequirement',
    PrimaryLocale: 'primaryLocale',
    Priority: 'priority',
    Purpose: 'purpose',
    TerritorySchedules: 'territorySchedules',
    ArchivedTerritorySchedules: 'archivedTerritorySchedules',
    Localizations: 'localizations'
} as const;
export type AppsAppEventsGetToManyRelatedFieldsAppEventsEnum = typeof AppsAppEventsGetToManyRelatedFieldsAppEventsEnum[keyof typeof AppsAppEventsGetToManyRelatedFieldsAppEventsEnum];
/**
 * @export
 */
export const AppsAppEventsGetToManyRelatedFieldsAppEventLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    ShortDescription: 'shortDescription',
    LongDescription: 'longDescription',
    AppEvent: 'appEvent',
    AppEventScreenshots: 'appEventScreenshots',
    AppEventVideoClips: 'appEventVideoClips'
} as const;
export type AppsAppEventsGetToManyRelatedFieldsAppEventLocalizationsEnum = typeof AppsAppEventsGetToManyRelatedFieldsAppEventLocalizationsEnum[keyof typeof AppsAppEventsGetToManyRelatedFieldsAppEventLocalizationsEnum];
/**
 * @export
 */
export const AppsAppEventsGetToManyRelatedIncludeEnum = {
    Localizations: 'localizations'
} as const;
export type AppsAppEventsGetToManyRelatedIncludeEnum = typeof AppsAppEventsGetToManyRelatedIncludeEnum[keyof typeof AppsAppEventsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppInfosGetToManyRelatedFieldsAppInfosEnum = {
    AppStoreState: 'appStoreState',
    State: 'state',
    AppStoreAgeRating: 'appStoreAgeRating',
    AustraliaAgeRating: 'australiaAgeRating',
    BrazilAgeRating: 'brazilAgeRating',
    BrazilAgeRatingV2: 'brazilAgeRatingV2',
    FranceAgeRating: 'franceAgeRating',
    KoreaAgeRating: 'koreaAgeRating',
    KidsAgeBand: 'kidsAgeBand',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppInfoLocalizations: 'appInfoLocalizations',
    PrimaryCategory: 'primaryCategory',
    PrimarySubcategoryOne: 'primarySubcategoryOne',
    PrimarySubcategoryTwo: 'primarySubcategoryTwo',
    SecondaryCategory: 'secondaryCategory',
    SecondarySubcategoryOne: 'secondarySubcategoryOne',
    SecondarySubcategoryTwo: 'secondarySubcategoryTwo'
} as const;
export type AppsAppInfosGetToManyRelatedFieldsAppInfosEnum = typeof AppsAppInfosGetToManyRelatedFieldsAppInfosEnum[keyof typeof AppsAppInfosGetToManyRelatedFieldsAppInfosEnum];
/**
 * @export
 */
export const AppsAppInfosGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsAppInfosGetToManyRelatedFieldsAppsEnum = typeof AppsAppInfosGetToManyRelatedFieldsAppsEnum[keyof typeof AppsAppInfosGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsAppInfosGetToManyRelatedFieldsAgeRatingDeclarationsEnum = {
    AlcoholTobaccoOrDrugUseOrReferences: 'alcoholTobaccoOrDrugUseOrReferences',
    Contests: 'contests',
    GamblingAndContests: 'gamblingAndContests',
    Gambling: 'gambling',
    GamblingSimulated: 'gamblingSimulated',
    KidsAgeBand: 'kidsAgeBand',
    LootBox: 'lootBox',
    MedicalOrTreatmentInformation: 'medicalOrTreatmentInformation',
    ProfanityOrCrudeHumor: 'profanityOrCrudeHumor',
    SexualContentGraphicAndNudity: 'sexualContentGraphicAndNudity',
    SexualContentOrNudity: 'sexualContentOrNudity',
    HorrorOrFearThemes: 'horrorOrFearThemes',
    MatureOrSuggestiveThemes: 'matureOrSuggestiveThemes',
    UnrestrictedWebAccess: 'unrestrictedWebAccess',
    ViolenceCartoonOrFantasy: 'violenceCartoonOrFantasy',
    ViolenceRealisticProlongedGraphicOrSadistic: 'violenceRealisticProlongedGraphicOrSadistic',
    ViolenceRealistic: 'violenceRealistic',
    AgeRatingOverride: 'ageRatingOverride',
    KoreaAgeRatingOverride: 'koreaAgeRatingOverride',
    SeventeenPlus: 'seventeenPlus'
} as const;
export type AppsAppInfosGetToManyRelatedFieldsAgeRatingDeclarationsEnum = typeof AppsAppInfosGetToManyRelatedFieldsAgeRatingDeclarationsEnum[keyof typeof AppsAppInfosGetToManyRelatedFieldsAgeRatingDeclarationsEnum];
/**
 * @export
 */
export const AppsAppInfosGetToManyRelatedFieldsAppInfoLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    Subtitle: 'subtitle',
    PrivacyPolicyUrl: 'privacyPolicyUrl',
    PrivacyChoicesUrl: 'privacyChoicesUrl',
    PrivacyPolicyText: 'privacyPolicyText',
    AppInfo: 'appInfo'
} as const;
export type AppsAppInfosGetToManyRelatedFieldsAppInfoLocalizationsEnum = typeof AppsAppInfosGetToManyRelatedFieldsAppInfoLocalizationsEnum[keyof typeof AppsAppInfosGetToManyRelatedFieldsAppInfoLocalizationsEnum];
/**
 * @export
 */
export const AppsAppInfosGetToManyRelatedFieldsAppCategoriesEnum = {
    Platforms: 'platforms',
    Subcategories: 'subcategories',
    Parent: 'parent'
} as const;
export type AppsAppInfosGetToManyRelatedFieldsAppCategoriesEnum = typeof AppsAppInfosGetToManyRelatedFieldsAppCategoriesEnum[keyof typeof AppsAppInfosGetToManyRelatedFieldsAppCategoriesEnum];
/**
 * @export
 */
export const AppsAppInfosGetToManyRelatedIncludeEnum = {
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppInfoLocalizations: 'appInfoLocalizations',
    PrimaryCategory: 'primaryCategory',
    PrimarySubcategoryOne: 'primarySubcategoryOne',
    PrimarySubcategoryTwo: 'primarySubcategoryTwo',
    SecondaryCategory: 'secondaryCategory',
    SecondarySubcategoryOne: 'secondarySubcategoryOne',
    SecondarySubcategoryTwo: 'secondarySubcategoryTwo'
} as const;
export type AppsAppInfosGetToManyRelatedIncludeEnum = typeof AppsAppInfosGetToManyRelatedIncludeEnum[keyof typeof AppsAppInfosGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppPricePointsGetToManyRelatedFieldsAppPricePointsEnum = {
    CustomerPrice: 'customerPrice',
    Proceeds: 'proceeds',
    App: 'app',
    Equalizations: 'equalizations',
    Territory: 'territory'
} as const;
export type AppsAppPricePointsGetToManyRelatedFieldsAppPricePointsEnum = typeof AppsAppPricePointsGetToManyRelatedFieldsAppPricePointsEnum[keyof typeof AppsAppPricePointsGetToManyRelatedFieldsAppPricePointsEnum];
/**
 * @export
 */
export const AppsAppPricePointsGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsAppPricePointsGetToManyRelatedFieldsAppsEnum = typeof AppsAppPricePointsGetToManyRelatedFieldsAppsEnum[keyof typeof AppsAppPricePointsGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsAppPricePointsGetToManyRelatedFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type AppsAppPricePointsGetToManyRelatedFieldsTerritoriesEnum = typeof AppsAppPricePointsGetToManyRelatedFieldsTerritoriesEnum[keyof typeof AppsAppPricePointsGetToManyRelatedFieldsTerritoriesEnum];
/**
 * @export
 */
export const AppsAppPricePointsGetToManyRelatedIncludeEnum = {
    App: 'app',
    Territory: 'territory'
} as const;
export type AppsAppPricePointsGetToManyRelatedIncludeEnum = typeof AppsAppPricePointsGetToManyRelatedIncludeEnum[keyof typeof AppsAppPricePointsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppPriceScheduleGetToOneRelatedFieldsAppPriceSchedulesEnum = {
    App: 'app',
    BaseTerritory: 'baseTerritory',
    ManualPrices: 'manualPrices',
    AutomaticPrices: 'automaticPrices'
} as const;
export type AppsAppPriceScheduleGetToOneRelatedFieldsAppPriceSchedulesEnum = typeof AppsAppPriceScheduleGetToOneRelatedFieldsAppPriceSchedulesEnum[keyof typeof AppsAppPriceScheduleGetToOneRelatedFieldsAppPriceSchedulesEnum];
/**
 * @export
 */
export const AppsAppPriceScheduleGetToOneRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsAppPriceScheduleGetToOneRelatedFieldsAppsEnum = typeof AppsAppPriceScheduleGetToOneRelatedFieldsAppsEnum[keyof typeof AppsAppPriceScheduleGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsAppPriceScheduleGetToOneRelatedFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type AppsAppPriceScheduleGetToOneRelatedFieldsTerritoriesEnum = typeof AppsAppPriceScheduleGetToOneRelatedFieldsTerritoriesEnum[keyof typeof AppsAppPriceScheduleGetToOneRelatedFieldsTerritoriesEnum];
/**
 * @export
 */
export const AppsAppPriceScheduleGetToOneRelatedFieldsAppPricesEnum = {
    Manual: 'manual',
    StartDate: 'startDate',
    EndDate: 'endDate',
    AppPricePoint: 'appPricePoint',
    Territory: 'territory'
} as const;
export type AppsAppPriceScheduleGetToOneRelatedFieldsAppPricesEnum = typeof AppsAppPriceScheduleGetToOneRelatedFieldsAppPricesEnum[keyof typeof AppsAppPriceScheduleGetToOneRelatedFieldsAppPricesEnum];
/**
 * @export
 */
export const AppsAppPriceScheduleGetToOneRelatedIncludeEnum = {
    App: 'app',
    BaseTerritory: 'baseTerritory',
    ManualPrices: 'manualPrices',
    AutomaticPrices: 'automaticPrices'
} as const;
export type AppsAppPriceScheduleGetToOneRelatedIncludeEnum = typeof AppsAppPriceScheduleGetToOneRelatedIncludeEnum[keyof typeof AppsAppPriceScheduleGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppStoreVersionExperimentsV2GetToManyRelatedFilterStateEnum = {
    PrepareForSubmission: 'PREPARE_FOR_SUBMISSION',
    ReadyForReview: 'READY_FOR_REVIEW',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    Accepted: 'ACCEPTED',
    Approved: 'APPROVED',
    Rejected: 'REJECTED',
    Completed: 'COMPLETED',
    Stopped: 'STOPPED'
} as const;
export type AppsAppStoreVersionExperimentsV2GetToManyRelatedFilterStateEnum = typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFilterStateEnum[keyof typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFilterStateEnum];
/**
 * @export
 */
export const AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentsEnum = {
    Name: 'name',
    Platform: 'platform',
    TrafficProportion: 'trafficProportion',
    State: 'state',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    EndDate: 'endDate',
    App: 'app',
    LatestControlVersion: 'latestControlVersion',
    ControlVersions: 'controlVersions',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments'
} as const;
export type AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentsEnum = typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentsEnum[keyof typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppsEnum = typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppsEnum[keyof typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    AppStoreState: 'appStoreState',
    AppVersionState: 'appVersionState',
    Copyright: 'copyright',
    ReviewType: 'reviewType',
    ReleaseType: 'releaseType',
    EarliestReleaseDate: 'earliestReleaseDate',
    Downloadable: 'downloadable',
    CreatedDate: 'createdDate',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    Build: 'build',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    GameCenterAppVersion: 'gameCenterAppVersion',
    RoutingAppCoverage: 'routingAppCoverage',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    CustomerReviews: 'customerReviews',
    AlternativeDistributionPackage: 'alternativeDistributionPackage'
} as const;
export type AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionsEnum = typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionsEnum[keyof typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = {
    Name: 'name',
    AppIcon: 'appIcon',
    AppIconName: 'appIconName',
    PromotedDate: 'promotedDate',
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentV2: 'appStoreVersionExperimentV2',
    AppStoreVersionExperimentTreatmentLocalizations: 'appStoreVersionExperimentTreatmentLocalizations'
} as const;
export type AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum[keyof typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionExperimentsV2GetToManyRelatedIncludeEnum = {
    App: 'app',
    LatestControlVersion: 'latestControlVersion',
    ControlVersions: 'controlVersions',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments'
} as const;
export type AppsAppStoreVersionExperimentsV2GetToManyRelatedIncludeEnum = typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedIncludeEnum[keyof typeof AppsAppStoreVersionExperimentsV2GetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFilterPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFilterPlatformEnum = typeof AppsAppStoreVersionsGetToManyRelatedFilterPlatformEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFilterPlatformEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFilterAppStoreStateEnum = {
    Accepted: 'ACCEPTED',
    DeveloperRemovedFromSale: 'DEVELOPER_REMOVED_FROM_SALE',
    DeveloperRejected: 'DEVELOPER_REJECTED',
    InReview: 'IN_REVIEW',
    InvalidBinary: 'INVALID_BINARY',
    MetadataRejected: 'METADATA_REJECTED',
    PendingAppleRelease: 'PENDING_APPLE_RELEASE',
    PendingContract: 'PENDING_CONTRACT',
    PendingDeveloperRelease: 'PENDING_DEVELOPER_RELEASE',
    PrepareForSubmission: 'PREPARE_FOR_SUBMISSION',
    PreorderReadyForSale: 'PREORDER_READY_FOR_SALE',
    ProcessingForAppStore: 'PROCESSING_FOR_APP_STORE',
    ReadyForReview: 'READY_FOR_REVIEW',
    ReadyForSale: 'READY_FOR_SALE',
    Rejected: 'REJECTED',
    RemovedFromSale: 'REMOVED_FROM_SALE',
    WaitingForExportCompliance: 'WAITING_FOR_EXPORT_COMPLIANCE',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    ReplacedWithNewVersion: 'REPLACED_WITH_NEW_VERSION',
    NotApplicable: 'NOT_APPLICABLE'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFilterAppStoreStateEnum = typeof AppsAppStoreVersionsGetToManyRelatedFilterAppStoreStateEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFilterAppStoreStateEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFilterAppVersionStateEnum = {
    Accepted: 'ACCEPTED',
    DeveloperRejected: 'DEVELOPER_REJECTED',
    InReview: 'IN_REVIEW',
    InvalidBinary: 'INVALID_BINARY',
    MetadataRejected: 'METADATA_REJECTED',
    PendingAppleRelease: 'PENDING_APPLE_RELEASE',
    PendingDeveloperRelease: 'PENDING_DEVELOPER_RELEASE',
    PrepareForSubmission: 'PREPARE_FOR_SUBMISSION',
    ProcessingForDistribution: 'PROCESSING_FOR_DISTRIBUTION',
    ReadyForDistribution: 'READY_FOR_DISTRIBUTION',
    ReadyForReview: 'READY_FOR_REVIEW',
    Rejected: 'REJECTED',
    ReplacedWithNewVersion: 'REPLACED_WITH_NEW_VERSION',
    WaitingForExportCompliance: 'WAITING_FOR_EXPORT_COMPLIANCE',
    WaitingForReview: 'WAITING_FOR_REVIEW'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFilterAppVersionStateEnum = typeof AppsAppStoreVersionsGetToManyRelatedFilterAppVersionStateEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFilterAppVersionStateEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    AppStoreState: 'appStoreState',
    AppVersionState: 'appVersionState',
    Copyright: 'copyright',
    ReviewType: 'reviewType',
    ReleaseType: 'releaseType',
    EarliestReleaseDate: 'earliestReleaseDate',
    Downloadable: 'downloadable',
    CreatedDate: 'createdDate',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    Build: 'build',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    GameCenterAppVersion: 'gameCenterAppVersion',
    RoutingAppCoverage: 'routingAppCoverage',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    CustomerReviews: 'customerReviews',
    AlternativeDistributionPackage: 'alternativeDistributionPackage'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionsEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppsEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppsEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAgeRatingDeclarationsEnum = {
    AlcoholTobaccoOrDrugUseOrReferences: 'alcoholTobaccoOrDrugUseOrReferences',
    Contests: 'contests',
    GamblingAndContests: 'gamblingAndContests',
    Gambling: 'gambling',
    GamblingSimulated: 'gamblingSimulated',
    KidsAgeBand: 'kidsAgeBand',
    LootBox: 'lootBox',
    MedicalOrTreatmentInformation: 'medicalOrTreatmentInformation',
    ProfanityOrCrudeHumor: 'profanityOrCrudeHumor',
    SexualContentGraphicAndNudity: 'sexualContentGraphicAndNudity',
    SexualContentOrNudity: 'sexualContentOrNudity',
    HorrorOrFearThemes: 'horrorOrFearThemes',
    MatureOrSuggestiveThemes: 'matureOrSuggestiveThemes',
    UnrestrictedWebAccess: 'unrestrictedWebAccess',
    ViolenceCartoonOrFantasy: 'violenceCartoonOrFantasy',
    ViolenceRealisticProlongedGraphicOrSadistic: 'violenceRealisticProlongedGraphicOrSadistic',
    ViolenceRealistic: 'violenceRealistic',
    AgeRatingOverride: 'ageRatingOverride',
    KoreaAgeRatingOverride: 'koreaAgeRatingOverride',
    SeventeenPlus: 'seventeenPlus'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAgeRatingDeclarationsEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAgeRatingDeclarationsEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAgeRatingDeclarationsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = {
    Description: 'description',
    Locale: 'locale',
    Keywords: 'keywords',
    MarketingUrl: 'marketingUrl',
    PromotionalText: 'promotionalText',
    SupportUrl: 'supportUrl',
    WhatsNew: 'whatsNew',
    AppStoreVersion: 'appStoreVersion',
    AppScreenshotSets: 'appScreenshotSets',
    AppPreviewSets: 'appPreviewSets'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsBuildsEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsBuildsEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionPhasedReleasesEnum = {
    PhasedReleaseState: 'phasedReleaseState',
    StartDate: 'startDate',
    TotalPauseDuration: 'totalPauseDuration',
    CurrentDayNumber: 'currentDayNumber'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionPhasedReleasesEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionPhasedReleasesEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionPhasedReleasesEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = {
    Enabled: 'enabled',
    CompatibilityVersions: 'compatibilityVersions',
    AppStoreVersion: 'appStoreVersion'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsRoutingAppCoveragesEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    AssetDeliveryState: 'assetDeliveryState',
    AppStoreVersion: 'appStoreVersion'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsRoutingAppCoveragesEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsRoutingAppCoveragesEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsRoutingAppCoveragesEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreReviewDetailsEnum = {
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    ContactEmail: 'contactEmail',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes',
    AppStoreVersion: 'appStoreVersion',
    AppStoreReviewAttachments: 'appStoreReviewAttachments'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreReviewDetailsEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreReviewDetailsEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreReviewDetailsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: 'appStoreVersion'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionSubmissionsEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionSubmissionsEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionSubmissionsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = {
    Name: 'name',
    TrafficProportion: 'trafficProportion',
    State: 'state',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    EndDate: 'endDate',
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    Platform: 'platform',
    App: 'app',
    LatestControlVersion: 'latestControlVersion',
    ControlVersions: 'controlVersions'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedFieldsAlternativeDistributionPackagesEnum = {
    Versions: 'versions'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedFieldsAlternativeDistributionPackagesEnum = typeof AppsAppStoreVersionsGetToManyRelatedFieldsAlternativeDistributionPackagesEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedFieldsAlternativeDistributionPackagesEnum];
/**
 * @export
 */
export const AppsAppStoreVersionsGetToManyRelatedIncludeEnum = {
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    Build: 'build',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    GameCenterAppVersion: 'gameCenterAppVersion',
    RoutingAppCoverage: 'routingAppCoverage',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionPackage: 'alternativeDistributionPackage'
} as const;
export type AppsAppStoreVersionsGetToManyRelatedIncludeEnum = typeof AppsAppStoreVersionsGetToManyRelatedIncludeEnum[keyof typeof AppsAppStoreVersionsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsBetaAppLocalizationsGetToManyRelatedFieldsBetaAppLocalizationsEnum = {
    FeedbackEmail: 'feedbackEmail',
    MarketingUrl: 'marketingUrl',
    PrivacyPolicyUrl: 'privacyPolicyUrl',
    TvOsPrivacyPolicy: 'tvOsPrivacyPolicy',
    Description: 'description',
    Locale: 'locale',
    App: 'app'
} as const;
export type AppsBetaAppLocalizationsGetToManyRelatedFieldsBetaAppLocalizationsEnum = typeof AppsBetaAppLocalizationsGetToManyRelatedFieldsBetaAppLocalizationsEnum[keyof typeof AppsBetaAppLocalizationsGetToManyRelatedFieldsBetaAppLocalizationsEnum];
/**
 * @export
 */
export const AppsBetaAppReviewDetailGetToOneRelatedFieldsBetaAppReviewDetailsEnum = {
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    ContactEmail: 'contactEmail',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes',
    App: 'app'
} as const;
export type AppsBetaAppReviewDetailGetToOneRelatedFieldsBetaAppReviewDetailsEnum = typeof AppsBetaAppReviewDetailGetToOneRelatedFieldsBetaAppReviewDetailsEnum[keyof typeof AppsBetaAppReviewDetailGetToOneRelatedFieldsBetaAppReviewDetailsEnum];
/**
 * @export
 */
export const AppsBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum = {
    Name: 'name',
    CreatedDate: 'createdDate',
    IsInternalGroup: 'isInternalGroup',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLink: 'publicLink',
    FeedbackEnabled: 'feedbackEnabled',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IosBuildsAvailableForAppleVision: 'iosBuildsAvailableForAppleVision',
    App: 'app',
    Builds: 'builds',
    BetaTesters: 'betaTesters',
    BetaRecruitmentCriteria: 'betaRecruitmentCriteria',
    BetaRecruitmentCriterionCompatibleBuildCheck: 'betaRecruitmentCriterionCompatibleBuildCheck'
} as const;
export type AppsBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum = typeof AppsBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum[keyof typeof AppsBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum];
/**
 * @export
 */
export const AppsBetaLicenseAgreementGetToOneRelatedFieldsBetaLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app'
} as const;
export type AppsBetaLicenseAgreementGetToOneRelatedFieldsBetaLicenseAgreementsEnum = typeof AppsBetaLicenseAgreementGetToOneRelatedFieldsBetaLicenseAgreementsEnum[keyof typeof AppsBetaLicenseAgreementGetToOneRelatedFieldsBetaLicenseAgreementsEnum];
/**
 * @export
 */
export const AppsBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: 'P7D',
    P30D: 'P30D',
    P90D: 'P90D',
    P365D: 'P365D'
} as const;
export type AppsBetaTesterUsagesGetMetricsPeriodEnum = typeof AppsBetaTesterUsagesGetMetricsPeriodEnum[keyof typeof AppsBetaTesterUsagesGetMetricsPeriodEnum];
/**
 * @export
 */
export const AppsBetaTesterUsagesGetMetricsGroupByEnum = {
    BetaTesters: 'betaTesters'
} as const;
export type AppsBetaTesterUsagesGetMetricsGroupByEnum = typeof AppsBetaTesterUsagesGetMetricsGroupByEnum[keyof typeof AppsBetaTesterUsagesGetMetricsGroupByEnum];
/**
 * @export
 */
export const AppsBuildsGetToManyRelatedFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type AppsBuildsGetToManyRelatedFieldsBuildsEnum = typeof AppsBuildsGetToManyRelatedFieldsBuildsEnum[keyof typeof AppsBuildsGetToManyRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const AppsCiProductGetToOneRelatedFieldsCiProductsEnum = {
    Name: 'name',
    CreatedDate: 'createdDate',
    ProductType: 'productType',
    App: 'app',
    BundleId: 'bundleId',
    Workflows: 'workflows',
    PrimaryRepositories: 'primaryRepositories',
    AdditionalRepositories: 'additionalRepositories',
    BuildRuns: 'buildRuns'
} as const;
export type AppsCiProductGetToOneRelatedFieldsCiProductsEnum = typeof AppsCiProductGetToOneRelatedFieldsCiProductsEnum[keyof typeof AppsCiProductGetToOneRelatedFieldsCiProductsEnum];
/**
 * @export
 */
export const AppsCiProductGetToOneRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsCiProductGetToOneRelatedFieldsAppsEnum = typeof AppsCiProductGetToOneRelatedFieldsAppsEnum[keyof typeof AppsCiProductGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsCiProductGetToOneRelatedFieldsBundleIdsEnum = {
    Name: 'name',
    Platform: 'platform',
    Identifier: 'identifier',
    SeedId: 'seedId',
    Profiles: 'profiles',
    BundleIdCapabilities: 'bundleIdCapabilities',
    App: 'app'
} as const;
export type AppsCiProductGetToOneRelatedFieldsBundleIdsEnum = typeof AppsCiProductGetToOneRelatedFieldsBundleIdsEnum[keyof typeof AppsCiProductGetToOneRelatedFieldsBundleIdsEnum];
/**
 * @export
 */
export const AppsCiProductGetToOneRelatedFieldsScmRepositoriesEnum = {
    LastAccessedDate: 'lastAccessedDate',
    HttpCloneUrl: 'httpCloneUrl',
    SshCloneUrl: 'sshCloneUrl',
    OwnerName: 'ownerName',
    RepositoryName: 'repositoryName',
    ScmProvider: 'scmProvider',
    DefaultBranch: 'defaultBranch',
    GitReferences: 'gitReferences',
    PullRequests: 'pullRequests'
} as const;
export type AppsCiProductGetToOneRelatedFieldsScmRepositoriesEnum = typeof AppsCiProductGetToOneRelatedFieldsScmRepositoriesEnum[keyof typeof AppsCiProductGetToOneRelatedFieldsScmRepositoriesEnum];
/**
 * @export
 */
export const AppsCiProductGetToOneRelatedIncludeEnum = {
    App: 'app',
    BundleId: 'bundleId',
    PrimaryRepositories: 'primaryRepositories'
} as const;
export type AppsCiProductGetToOneRelatedIncludeEnum = typeof AppsCiProductGetToOneRelatedIncludeEnum[keyof typeof AppsCiProductGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const AppsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = {
    Abw: 'ABW',
    Afg: 'AFG',
    Ago: 'AGO',
    Aia: 'AIA',
    Alb: 'ALB',
    And: 'AND',
    Ant: 'ANT',
    Are: 'ARE',
    Arg: 'ARG',
    Arm: 'ARM',
    Asm: 'ASM',
    Atg: 'ATG',
    Aus: 'AUS',
    Aut: 'AUT',
    Aze: 'AZE',
    Bdi: 'BDI',
    Bel: 'BEL',
    Ben: 'BEN',
    Bes: 'BES',
    Bfa: 'BFA',
    Bgd: 'BGD',
    Bgr: 'BGR',
    Bhr: 'BHR',
    Bhs: 'BHS',
    Bih: 'BIH',
    Blr: 'BLR',
    Blz: 'BLZ',
    Bmu: 'BMU',
    Bol: 'BOL',
    Bra: 'BRA',
    Brb: 'BRB',
    Brn: 'BRN',
    Btn: 'BTN',
    Bwa: 'BWA',
    Caf: 'CAF',
    Can: 'CAN',
    Che: 'CHE',
    Chl: 'CHL',
    Chn: 'CHN',
    Civ: 'CIV',
    Cmr: 'CMR',
    Cod: 'COD',
    Cog: 'COG',
    Cok: 'COK',
    Col: 'COL',
    Com: 'COM',
    Cpv: 'CPV',
    Cri: 'CRI',
    Cub: 'CUB',
    Cuw: 'CUW',
    Cxr: 'CXR',
    Cym: 'CYM',
    Cyp: 'CYP',
    Cze: 'CZE',
    Deu: 'DEU',
    Dji: 'DJI',
    Dma: 'DMA',
    Dnk: 'DNK',
    Dom: 'DOM',
    Dza: 'DZA',
    Ecu: 'ECU',
    Egy: 'EGY',
    Eri: 'ERI',
    Esp: 'ESP',
    Est: 'EST',
    Eth: 'ETH',
    Fin: 'FIN',
    Fji: 'FJI',
    Flk: 'FLK',
    Fra: 'FRA',
    Fro: 'FRO',
    Fsm: 'FSM',
    Gab: 'GAB',
    Gbr: 'GBR',
    Geo: 'GEO',
    Ggy: 'GGY',
    Gha: 'GHA',
    Gib: 'GIB',
    Gin: 'GIN',
    Glp: 'GLP',
    Gmb: 'GMB',
    Gnb: 'GNB',
    Gnq: 'GNQ',
    Grc: 'GRC',
    Grd: 'GRD',
    Grl: 'GRL',
    Gtm: 'GTM',
    Guf: 'GUF',
    Gum: 'GUM',
    Guy: 'GUY',
    Hkg: 'HKG',
    Hnd: 'HND',
    Hrv: 'HRV',
    Hti: 'HTI',
    Hun: 'HUN',
    Idn: 'IDN',
    Imn: 'IMN',
    Ind: 'IND',
    Irl: 'IRL',
    Irq: 'IRQ',
    Isl: 'ISL',
    Isr: 'ISR',
    Ita: 'ITA',
    Jam: 'JAM',
    Jey: 'JEY',
    Jor: 'JOR',
    Jpn: 'JPN',
    Kaz: 'KAZ',
    Ken: 'KEN',
    Kgz: 'KGZ',
    Khm: 'KHM',
    Kir: 'KIR',
    Kna: 'KNA',
    Kor: 'KOR',
    Kwt: 'KWT',
    Lao: 'LAO',
    Lbn: 'LBN',
    Lbr: 'LBR',
    Lby: 'LBY',
    Lca: 'LCA',
    Lie: 'LIE',
    Lka: 'LKA',
    Lso: 'LSO',
    Ltu: 'LTU',
    Lux: 'LUX',
    Lva: 'LVA',
    Mac: 'MAC',
    Mar: 'MAR',
    Mco: 'MCO',
    Mda: 'MDA',
    Mdg: 'MDG',
    Mdv: 'MDV',
    Mex: 'MEX',
    Mhl: 'MHL',
    Mkd: 'MKD',
    Mli: 'MLI',
    Mlt: 'MLT',
    Mmr: 'MMR',
    Mne: 'MNE',
    Mng: 'MNG',
    Mnp: 'MNP',
    Moz: 'MOZ',
    Mrt: 'MRT',
    Msr: 'MSR',
    Mtq: 'MTQ',
    Mus: 'MUS',
    Mwi: 'MWI',
    Mys: 'MYS',
    Myt: 'MYT',
    Nam: 'NAM',
    Ncl: 'NCL',
    Ner: 'NER',
    Nfk: 'NFK',
    Nga: 'NGA',
    Nic: 'NIC',
    Niu: 'NIU',
    Nld: 'NLD',
    Nor: 'NOR',
    Npl: 'NPL',
    Nru: 'NRU',
    Nzl: 'NZL',
    Omn: 'OMN',
    Pak: 'PAK',
    Pan: 'PAN',
    Per: 'PER',
    Phl: 'PHL',
    Plw: 'PLW',
    Png: 'PNG',
    Pol: 'POL',
    Pri: 'PRI',
    Prt: 'PRT',
    Pry: 'PRY',
    Pse: 'PSE',
    Pyf: 'PYF',
    Qat: 'QAT',
    Reu: 'REU',
    Rou: 'ROU',
    Rus: 'RUS',
    Rwa: 'RWA',
    Sau: 'SAU',
    Sen: 'SEN',
    Sgp: 'SGP',
    Shn: 'SHN',
    Slb: 'SLB',
    Sle: 'SLE',
    Slv: 'SLV',
    Smr: 'SMR',
    Som: 'SOM',
    Spm: 'SPM',
    Srb: 'SRB',
    Ssd: 'SSD',
    Stp: 'STP',
    Sur: 'SUR',
    Svk: 'SVK',
    Svn: 'SVN',
    Swe: 'SWE',
    Swz: 'SWZ',
    Sxm: 'SXM',
    Syc: 'SYC',
    Tca: 'TCA',
    Tcd: 'TCD',
    Tgo: 'TGO',
    Tha: 'THA',
    Tjk: 'TJK',
    Tkm: 'TKM',
    Tls: 'TLS',
    Ton: 'TON',
    Tto: 'TTO',
    Tun: 'TUN',
    Tur: 'TUR',
    Tuv: 'TUV',
    Twn: 'TWN',
    Tza: 'TZA',
    Uga: 'UGA',
    Ukr: 'UKR',
    Umi: 'UMI',
    Ury: 'URY',
    Usa: 'USA',
    Uzb: 'UZB',
    Vat: 'VAT',
    Vct: 'VCT',
    Ven: 'VEN',
    Vgb: 'VGB',
    Vir: 'VIR',
    Vnm: 'VNM',
    Vut: 'VUT',
    Wlf: 'WLF',
    Wsm: 'WSM',
    Yem: 'YEM',
    Zaf: 'ZAF',
    Zmb: 'ZMB',
    Zwe: 'ZWE'
} as const;
export type AppsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = typeof AppsCustomerReviewsGetToManyRelatedFilterTerritoryEnum[keyof typeof AppsCustomerReviewsGetToManyRelatedFilterTerritoryEnum];
/**
 * @export
 */
export const AppsCustomerReviewsGetToManyRelatedSortEnum = {
    Rating: 'rating',
    Rating: '-rating',
    CreatedDate: 'createdDate',
    CreatedDate: '-createdDate'
} as const;
export type AppsCustomerReviewsGetToManyRelatedSortEnum = typeof AppsCustomerReviewsGetToManyRelatedSortEnum[keyof typeof AppsCustomerReviewsGetToManyRelatedSortEnum];
/**
 * @export
 */
export const AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = {
    Rating: 'rating',
    Title: 'title',
    Body: 'body',
    ReviewerNickname: 'reviewerNickname',
    CreatedDate: 'createdDate',
    Territory: 'territory',
    Response: 'response'
} as const;
export type AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = typeof AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum[keyof typeof AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum];
/**
 * @export
 */
export const AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = {
    ResponseBody: 'responseBody',
    LastModifiedDate: 'lastModifiedDate',
    State: 'state',
    Review: 'review'
} as const;
export type AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = typeof AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum[keyof typeof AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum];
/**
 * @export
 */
export const AppsCustomerReviewsGetToManyRelatedIncludeEnum = {
    Response: 'response'
} as const;
export type AppsCustomerReviewsGetToManyRelatedIncludeEnum = typeof AppsCustomerReviewsGetToManyRelatedIncludeEnum[keyof typeof AppsCustomerReviewsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsEndUserLicenseAgreementGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app',
    Territories: 'territories'
} as const;
export type AppsEndUserLicenseAgreementGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = typeof AppsEndUserLicenseAgreementGetToOneRelatedFieldsEndUserLicenseAgreementsEnum[keyof typeof AppsEndUserLicenseAgreementGetToOneRelatedFieldsEndUserLicenseAgreementsEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsGameCenterDetailsEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterDetailsEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsAppsEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsAppsEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAppVersionsEnum = {
    Enabled: 'enabled',
    CompatibilityVersions: 'compatibilityVersions',
    AppStoreVersion: 'appStoreVersion'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAppVersionsEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAppVersionsEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAppVersionsEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsGameCenterGroupsEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterGroupsEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardsEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    Points: 'points',
    ShowBeforeEarned: 'showBeforeEarned',
    Repeatable: 'repeatable',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementsEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementsEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterAchievement: 'gameCenterAchievement'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementReleasesEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet'
} as const;
export type AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum = typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const AppsGameCenterDetailGetToOneRelatedIncludeEnum = {
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type AppsGameCenterDetailGetToOneRelatedIncludeEnum = typeof AppsGameCenterDetailGetToOneRelatedIncludeEnum[keyof typeof AppsGameCenterDetailGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const AppsGameCenterEnabledVersionsGetToManyRelatedFilterPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type AppsGameCenterEnabledVersionsGetToManyRelatedFilterPlatformEnum = typeof AppsGameCenterEnabledVersionsGetToManyRelatedFilterPlatformEnum[keyof typeof AppsGameCenterEnabledVersionsGetToManyRelatedFilterPlatformEnum];
/**
 * @export
 */
export const AppsGameCenterEnabledVersionsGetToManyRelatedSortEnum = {
    VersionString: 'versionString',
    VersionString: '-versionString'
} as const;
export type AppsGameCenterEnabledVersionsGetToManyRelatedSortEnum = typeof AppsGameCenterEnabledVersionsGetToManyRelatedSortEnum[keyof typeof AppsGameCenterEnabledVersionsGetToManyRelatedSortEnum];
/**
 * @export
 */
export const AppsGameCenterEnabledVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    IconAsset: 'iconAsset',
    CompatibleVersions: 'compatibleVersions',
    App: 'app'
} as const;
export type AppsGameCenterEnabledVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum = typeof AppsGameCenterEnabledVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum[keyof typeof AppsGameCenterEnabledVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum];
/**
 * @export
 */
export const AppsGameCenterEnabledVersionsGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsGameCenterEnabledVersionsGetToManyRelatedFieldsAppsEnum = typeof AppsGameCenterEnabledVersionsGetToManyRelatedFieldsAppsEnum[keyof typeof AppsGameCenterEnabledVersionsGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsGameCenterEnabledVersionsGetToManyRelatedIncludeEnum = {
    CompatibleVersions: 'compatibleVersions',
    App: 'app'
} as const;
export type AppsGameCenterEnabledVersionsGetToManyRelatedIncludeEnum = typeof AppsGameCenterEnabledVersionsGetToManyRelatedIncludeEnum[keyof typeof AppsGameCenterEnabledVersionsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsGetCollectionFilterAppStoreVersionsAppStoreStateEnum = {
    Accepted: 'ACCEPTED',
    DeveloperRemovedFromSale: 'DEVELOPER_REMOVED_FROM_SALE',
    DeveloperRejected: 'DEVELOPER_REJECTED',
    InReview: 'IN_REVIEW',
    InvalidBinary: 'INVALID_BINARY',
    MetadataRejected: 'METADATA_REJECTED',
    PendingAppleRelease: 'PENDING_APPLE_RELEASE',
    PendingContract: 'PENDING_CONTRACT',
    PendingDeveloperRelease: 'PENDING_DEVELOPER_RELEASE',
    PrepareForSubmission: 'PREPARE_FOR_SUBMISSION',
    PreorderReadyForSale: 'PREORDER_READY_FOR_SALE',
    ProcessingForAppStore: 'PROCESSING_FOR_APP_STORE',
    ReadyForReview: 'READY_FOR_REVIEW',
    ReadyForSale: 'READY_FOR_SALE',
    Rejected: 'REJECTED',
    RemovedFromSale: 'REMOVED_FROM_SALE',
    WaitingForExportCompliance: 'WAITING_FOR_EXPORT_COMPLIANCE',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    ReplacedWithNewVersion: 'REPLACED_WITH_NEW_VERSION',
    NotApplicable: 'NOT_APPLICABLE'
} as const;
export type AppsGetCollectionFilterAppStoreVersionsAppStoreStateEnum = typeof AppsGetCollectionFilterAppStoreVersionsAppStoreStateEnum[keyof typeof AppsGetCollectionFilterAppStoreVersionsAppStoreStateEnum];
/**
 * @export
 */
export const AppsGetCollectionFilterAppStoreVersionsPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type AppsGetCollectionFilterAppStoreVersionsPlatformEnum = typeof AppsGetCollectionFilterAppStoreVersionsPlatformEnum[keyof typeof AppsGetCollectionFilterAppStoreVersionsPlatformEnum];
/**
 * @export
 */
export const AppsGetCollectionFilterAppStoreVersionsAppVersionStateEnum = {
    Accepted: 'ACCEPTED',
    DeveloperRejected: 'DEVELOPER_REJECTED',
    InReview: 'IN_REVIEW',
    InvalidBinary: 'INVALID_BINARY',
    MetadataRejected: 'METADATA_REJECTED',
    PendingAppleRelease: 'PENDING_APPLE_RELEASE',
    PendingDeveloperRelease: 'PENDING_DEVELOPER_RELEASE',
    PrepareForSubmission: 'PREPARE_FOR_SUBMISSION',
    ProcessingForDistribution: 'PROCESSING_FOR_DISTRIBUTION',
    ReadyForDistribution: 'READY_FOR_DISTRIBUTION',
    ReadyForReview: 'READY_FOR_REVIEW',
    Rejected: 'REJECTED',
    ReplacedWithNewVersion: 'REPLACED_WITH_NEW_VERSION',
    WaitingForExportCompliance: 'WAITING_FOR_EXPORT_COMPLIANCE',
    WaitingForReview: 'WAITING_FOR_REVIEW'
} as const;
export type AppsGetCollectionFilterAppStoreVersionsAppVersionStateEnum = typeof AppsGetCollectionFilterAppStoreVersionsAppVersionStateEnum[keyof typeof AppsGetCollectionFilterAppStoreVersionsAppVersionStateEnum];
/**
 * @export
 */
export const AppsGetCollectionFilterReviewSubmissionsStateEnum = {
    ReadyForReview: 'READY_FOR_REVIEW',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    UnresolvedIssues: 'UNRESOLVED_ISSUES',
    Canceling: 'CANCELING',
    Completing: 'COMPLETING',
    Complete: 'COMPLETE'
} as const;
export type AppsGetCollectionFilterReviewSubmissionsStateEnum = typeof AppsGetCollectionFilterReviewSubmissionsStateEnum[keyof typeof AppsGetCollectionFilterReviewSubmissionsStateEnum];
/**
 * @export
 */
export const AppsGetCollectionFilterReviewSubmissionsPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type AppsGetCollectionFilterReviewSubmissionsPlatformEnum = typeof AppsGetCollectionFilterReviewSubmissionsPlatformEnum[keyof typeof AppsGetCollectionFilterReviewSubmissionsPlatformEnum];
/**
 * @export
 */
export const AppsGetCollectionSortEnum = {
    Name: 'name',
    Name: '-name',
    BundleId: 'bundleId',
    BundleId: '-bundleId',
    Sku: 'sku',
    Sku: '-sku'
} as const;
export type AppsGetCollectionSortEnum = typeof AppsGetCollectionSortEnum[keyof typeof AppsGetCollectionSortEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsGetCollectionFieldsAppsEnum = typeof AppsGetCollectionFieldsAppsEnum[keyof typeof AppsGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsAppEncryptionDeclarationsEnum = {
    AppDescription: 'appDescription',
    CreatedDate: 'createdDate',
    UsesEncryption: 'usesEncryption',
    Exempt: 'exempt',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    DocumentUrl: 'documentUrl',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    CodeValue: 'codeValue',
    App: 'app',
    Builds: 'builds',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument'
} as const;
export type AppsGetCollectionFieldsAppEncryptionDeclarationsEnum = typeof AppsGetCollectionFieldsAppEncryptionDeclarationsEnum[keyof typeof AppsGetCollectionFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsCiProductsEnum = {
    Name: 'name',
    CreatedDate: 'createdDate',
    ProductType: 'productType',
    App: 'app',
    BundleId: 'bundleId',
    Workflows: 'workflows',
    PrimaryRepositories: 'primaryRepositories',
    AdditionalRepositories: 'additionalRepositories',
    BuildRuns: 'buildRuns'
} as const;
export type AppsGetCollectionFieldsCiProductsEnum = typeof AppsGetCollectionFieldsCiProductsEnum[keyof typeof AppsGetCollectionFieldsCiProductsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsBetaGroupsEnum = {
    Name: 'name',
    CreatedDate: 'createdDate',
    IsInternalGroup: 'isInternalGroup',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLink: 'publicLink',
    FeedbackEnabled: 'feedbackEnabled',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IosBuildsAvailableForAppleVision: 'iosBuildsAvailableForAppleVision',
    App: 'app',
    Builds: 'builds',
    BetaTesters: 'betaTesters',
    BetaRecruitmentCriteria: 'betaRecruitmentCriteria',
    BetaRecruitmentCriterionCompatibleBuildCheck: 'betaRecruitmentCriterionCompatibleBuildCheck'
} as const;
export type AppsGetCollectionFieldsBetaGroupsEnum = typeof AppsGetCollectionFieldsBetaGroupsEnum[keyof typeof AppsGetCollectionFieldsBetaGroupsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsAppStoreVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    AppStoreState: 'appStoreState',
    AppVersionState: 'appVersionState',
    Copyright: 'copyright',
    ReviewType: 'reviewType',
    ReleaseType: 'releaseType',
    EarliestReleaseDate: 'earliestReleaseDate',
    Downloadable: 'downloadable',
    CreatedDate: 'createdDate',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    Build: 'build',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    GameCenterAppVersion: 'gameCenterAppVersion',
    RoutingAppCoverage: 'routingAppCoverage',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    CustomerReviews: 'customerReviews',
    AlternativeDistributionPackage: 'alternativeDistributionPackage'
} as const;
export type AppsGetCollectionFieldsAppStoreVersionsEnum = typeof AppsGetCollectionFieldsAppStoreVersionsEnum[keyof typeof AppsGetCollectionFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsPreReleaseVersionsEnum = {
    Version: 'version',
    Platform: 'platform',
    Builds: 'builds',
    App: 'app'
} as const;
export type AppsGetCollectionFieldsPreReleaseVersionsEnum = typeof AppsGetCollectionFieldsPreReleaseVersionsEnum[keyof typeof AppsGetCollectionFieldsPreReleaseVersionsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsBetaAppLocalizationsEnum = {
    FeedbackEmail: 'feedbackEmail',
    MarketingUrl: 'marketingUrl',
    PrivacyPolicyUrl: 'privacyPolicyUrl',
    TvOsPrivacyPolicy: 'tvOsPrivacyPolicy',
    Description: 'description',
    Locale: 'locale',
    App: 'app'
} as const;
export type AppsGetCollectionFieldsBetaAppLocalizationsEnum = typeof AppsGetCollectionFieldsBetaAppLocalizationsEnum[keyof typeof AppsGetCollectionFieldsBetaAppLocalizationsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type AppsGetCollectionFieldsBuildsEnum = typeof AppsGetCollectionFieldsBuildsEnum[keyof typeof AppsGetCollectionFieldsBuildsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsBetaLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app'
} as const;
export type AppsGetCollectionFieldsBetaLicenseAgreementsEnum = typeof AppsGetCollectionFieldsBetaLicenseAgreementsEnum[keyof typeof AppsGetCollectionFieldsBetaLicenseAgreementsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsBetaAppReviewDetailsEnum = {
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    ContactEmail: 'contactEmail',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes',
    App: 'app'
} as const;
export type AppsGetCollectionFieldsBetaAppReviewDetailsEnum = typeof AppsGetCollectionFieldsBetaAppReviewDetailsEnum[keyof typeof AppsGetCollectionFieldsBetaAppReviewDetailsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsAppInfosEnum = {
    AppStoreState: 'appStoreState',
    State: 'state',
    AppStoreAgeRating: 'appStoreAgeRating',
    AustraliaAgeRating: 'australiaAgeRating',
    BrazilAgeRating: 'brazilAgeRating',
    BrazilAgeRatingV2: 'brazilAgeRatingV2',
    FranceAgeRating: 'franceAgeRating',
    KoreaAgeRating: 'koreaAgeRating',
    KidsAgeBand: 'kidsAgeBand',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppInfoLocalizations: 'appInfoLocalizations',
    PrimaryCategory: 'primaryCategory',
    PrimarySubcategoryOne: 'primarySubcategoryOne',
    PrimarySubcategoryTwo: 'primarySubcategoryTwo',
    SecondaryCategory: 'secondaryCategory',
    SecondarySubcategoryOne: 'secondarySubcategoryOne',
    SecondarySubcategoryTwo: 'secondarySubcategoryTwo'
} as const;
export type AppsGetCollectionFieldsAppInfosEnum = typeof AppsGetCollectionFieldsAppInfosEnum[keyof typeof AppsGetCollectionFieldsAppInfosEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsAppClipsEnum = {
    BundleId: 'bundleId',
    App: 'app',
    AppClipDefaultExperiences: 'appClipDefaultExperiences',
    AppClipAdvancedExperiences: 'appClipAdvancedExperiences'
} as const;
export type AppsGetCollectionFieldsAppClipsEnum = typeof AppsGetCollectionFieldsAppClipsEnum[keyof typeof AppsGetCollectionFieldsAppClipsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsEndUserLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app',
    Territories: 'territories'
} as const;
export type AppsGetCollectionFieldsEndUserLicenseAgreementsEnum = typeof AppsGetCollectionFieldsEndUserLicenseAgreementsEnum[keyof typeof AppsGetCollectionFieldsEndUserLicenseAgreementsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsInAppPurchasesEnum = {
    ReferenceName: 'referenceName',
    ProductId: 'productId',
    InAppPurchaseType: 'inAppPurchaseType',
    State: 'state',
    Apps: 'apps',
    Name: 'name',
    ReviewNote: 'reviewNote',
    FamilySharable: 'familySharable',
    ContentHosting: 'contentHosting',
    InAppPurchaseLocalizations: 'inAppPurchaseLocalizations',
    PricePoints: 'pricePoints',
    Content: 'content',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    PromotedPurchase: 'promotedPurchase',
    IapPriceSchedule: 'iapPriceSchedule',
    InAppPurchaseAvailability: 'inAppPurchaseAvailability',
    Images: 'images'
} as const;
export type AppsGetCollectionFieldsInAppPurchasesEnum = typeof AppsGetCollectionFieldsInAppPurchasesEnum[keyof typeof AppsGetCollectionFieldsInAppPurchasesEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsSubscriptionGroupsEnum = {
    ReferenceName: 'referenceName',
    Subscriptions: 'subscriptions',
    SubscriptionGroupLocalizations: 'subscriptionGroupLocalizations'
} as const;
export type AppsGetCollectionFieldsSubscriptionGroupsEnum = typeof AppsGetCollectionFieldsSubscriptionGroupsEnum[keyof typeof AppsGetCollectionFieldsSubscriptionGroupsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsGameCenterEnabledVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    IconAsset: 'iconAsset',
    CompatibleVersions: 'compatibleVersions',
    App: 'app'
} as const;
export type AppsGetCollectionFieldsGameCenterEnabledVersionsEnum = typeof AppsGetCollectionFieldsGameCenterEnabledVersionsEnum[keyof typeof AppsGetCollectionFieldsGameCenterEnabledVersionsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsAppCustomProductPagesEnum = {
    Name: 'name',
    Url: 'url',
    Visible: 'visible',
    App: 'app',
    AppCustomProductPageVersions: 'appCustomProductPageVersions'
} as const;
export type AppsGetCollectionFieldsAppCustomProductPagesEnum = typeof AppsGetCollectionFieldsAppCustomProductPagesEnum[keyof typeof AppsGetCollectionFieldsAppCustomProductPagesEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsPromotedPurchasesEnum = {
    VisibleForAllUsers: 'visibleForAllUsers',
    Enabled: 'enabled',
    State: 'state',
    InAppPurchaseV2: 'inAppPurchaseV2',
    Subscription: 'subscription'
} as const;
export type AppsGetCollectionFieldsPromotedPurchasesEnum = typeof AppsGetCollectionFieldsPromotedPurchasesEnum[keyof typeof AppsGetCollectionFieldsPromotedPurchasesEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsAppEventsEnum = {
    ReferenceName: 'referenceName',
    Badge: 'badge',
    EventState: 'eventState',
    DeepLink: 'deepLink',
    PurchaseRequirement: 'purchaseRequirement',
    PrimaryLocale: 'primaryLocale',
    Priority: 'priority',
    Purpose: 'purpose',
    TerritorySchedules: 'territorySchedules',
    ArchivedTerritorySchedules: 'archivedTerritorySchedules',
    Localizations: 'localizations'
} as const;
export type AppsGetCollectionFieldsAppEventsEnum = typeof AppsGetCollectionFieldsAppEventsEnum[keyof typeof AppsGetCollectionFieldsAppEventsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsReviewSubmissionsEnum = {
    Platform: 'platform',
    SubmittedDate: 'submittedDate',
    State: 'state',
    App: 'app',
    Items: 'items',
    AppStoreVersionForReview: 'appStoreVersionForReview',
    SubmittedByActor: 'submittedByActor',
    LastUpdatedByActor: 'lastUpdatedByActor'
} as const;
export type AppsGetCollectionFieldsReviewSubmissionsEnum = typeof AppsGetCollectionFieldsReviewSubmissionsEnum[keyof typeof AppsGetCollectionFieldsReviewSubmissionsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsSubscriptionGracePeriodsEnum = {
    OptIn: 'optIn',
    SandboxOptIn: 'sandboxOptIn',
    Duration: 'duration',
    RenewalType: 'renewalType'
} as const;
export type AppsGetCollectionFieldsSubscriptionGracePeriodsEnum = typeof AppsGetCollectionFieldsSubscriptionGracePeriodsEnum[keyof typeof AppsGetCollectionFieldsSubscriptionGracePeriodsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type AppsGetCollectionFieldsGameCenterDetailsEnum = typeof AppsGetCollectionFieldsGameCenterDetailsEnum[keyof typeof AppsGetCollectionFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const AppsGetCollectionFieldsAppStoreVersionExperimentsEnum = {
    Name: 'name',
    Platform: 'platform',
    TrafficProportion: 'trafficProportion',
    State: 'state',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    EndDate: 'endDate',
    App: 'app',
    LatestControlVersion: 'latestControlVersion',
    ControlVersions: 'controlVersions',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments'
} as const;
export type AppsGetCollectionFieldsAppStoreVersionExperimentsEnum = typeof AppsGetCollectionFieldsAppStoreVersionExperimentsEnum[keyof typeof AppsGetCollectionFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const AppsGetCollectionIncludeEnum = {
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2'
} as const;
export type AppsGetCollectionIncludeEnum = typeof AppsGetCollectionIncludeEnum[keyof typeof AppsGetCollectionIncludeEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsGetInstanceFieldsAppsEnum = typeof AppsGetInstanceFieldsAppsEnum[keyof typeof AppsGetInstanceFieldsAppsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsAppEncryptionDeclarationsEnum = {
    AppDescription: 'appDescription',
    CreatedDate: 'createdDate',
    UsesEncryption: 'usesEncryption',
    Exempt: 'exempt',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    DocumentUrl: 'documentUrl',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    CodeValue: 'codeValue',
    App: 'app',
    Builds: 'builds',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument'
} as const;
export type AppsGetInstanceFieldsAppEncryptionDeclarationsEnum = typeof AppsGetInstanceFieldsAppEncryptionDeclarationsEnum[keyof typeof AppsGetInstanceFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsCiProductsEnum = {
    Name: 'name',
    CreatedDate: 'createdDate',
    ProductType: 'productType',
    App: 'app',
    BundleId: 'bundleId',
    Workflows: 'workflows',
    PrimaryRepositories: 'primaryRepositories',
    AdditionalRepositories: 'additionalRepositories',
    BuildRuns: 'buildRuns'
} as const;
export type AppsGetInstanceFieldsCiProductsEnum = typeof AppsGetInstanceFieldsCiProductsEnum[keyof typeof AppsGetInstanceFieldsCiProductsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsBetaGroupsEnum = {
    Name: 'name',
    CreatedDate: 'createdDate',
    IsInternalGroup: 'isInternalGroup',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLink: 'publicLink',
    FeedbackEnabled: 'feedbackEnabled',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IosBuildsAvailableForAppleVision: 'iosBuildsAvailableForAppleVision',
    App: 'app',
    Builds: 'builds',
    BetaTesters: 'betaTesters',
    BetaRecruitmentCriteria: 'betaRecruitmentCriteria',
    BetaRecruitmentCriterionCompatibleBuildCheck: 'betaRecruitmentCriterionCompatibleBuildCheck'
} as const;
export type AppsGetInstanceFieldsBetaGroupsEnum = typeof AppsGetInstanceFieldsBetaGroupsEnum[keyof typeof AppsGetInstanceFieldsBetaGroupsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsAppStoreVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    AppStoreState: 'appStoreState',
    AppVersionState: 'appVersionState',
    Copyright: 'copyright',
    ReviewType: 'reviewType',
    ReleaseType: 'releaseType',
    EarliestReleaseDate: 'earliestReleaseDate',
    Downloadable: 'downloadable',
    CreatedDate: 'createdDate',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    Build: 'build',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    GameCenterAppVersion: 'gameCenterAppVersion',
    RoutingAppCoverage: 'routingAppCoverage',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    CustomerReviews: 'customerReviews',
    AlternativeDistributionPackage: 'alternativeDistributionPackage'
} as const;
export type AppsGetInstanceFieldsAppStoreVersionsEnum = typeof AppsGetInstanceFieldsAppStoreVersionsEnum[keyof typeof AppsGetInstanceFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsPreReleaseVersionsEnum = {
    Version: 'version',
    Platform: 'platform',
    Builds: 'builds',
    App: 'app'
} as const;
export type AppsGetInstanceFieldsPreReleaseVersionsEnum = typeof AppsGetInstanceFieldsPreReleaseVersionsEnum[keyof typeof AppsGetInstanceFieldsPreReleaseVersionsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsBetaAppLocalizationsEnum = {
    FeedbackEmail: 'feedbackEmail',
    MarketingUrl: 'marketingUrl',
    PrivacyPolicyUrl: 'privacyPolicyUrl',
    TvOsPrivacyPolicy: 'tvOsPrivacyPolicy',
    Description: 'description',
    Locale: 'locale',
    App: 'app'
} as const;
export type AppsGetInstanceFieldsBetaAppLocalizationsEnum = typeof AppsGetInstanceFieldsBetaAppLocalizationsEnum[keyof typeof AppsGetInstanceFieldsBetaAppLocalizationsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type AppsGetInstanceFieldsBuildsEnum = typeof AppsGetInstanceFieldsBuildsEnum[keyof typeof AppsGetInstanceFieldsBuildsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsBetaLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app'
} as const;
export type AppsGetInstanceFieldsBetaLicenseAgreementsEnum = typeof AppsGetInstanceFieldsBetaLicenseAgreementsEnum[keyof typeof AppsGetInstanceFieldsBetaLicenseAgreementsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsBetaAppReviewDetailsEnum = {
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    ContactEmail: 'contactEmail',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes',
    App: 'app'
} as const;
export type AppsGetInstanceFieldsBetaAppReviewDetailsEnum = typeof AppsGetInstanceFieldsBetaAppReviewDetailsEnum[keyof typeof AppsGetInstanceFieldsBetaAppReviewDetailsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsAppInfosEnum = {
    AppStoreState: 'appStoreState',
    State: 'state',
    AppStoreAgeRating: 'appStoreAgeRating',
    AustraliaAgeRating: 'australiaAgeRating',
    BrazilAgeRating: 'brazilAgeRating',
    BrazilAgeRatingV2: 'brazilAgeRatingV2',
    FranceAgeRating: 'franceAgeRating',
    KoreaAgeRating: 'koreaAgeRating',
    KidsAgeBand: 'kidsAgeBand',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppInfoLocalizations: 'appInfoLocalizations',
    PrimaryCategory: 'primaryCategory',
    PrimarySubcategoryOne: 'primarySubcategoryOne',
    PrimarySubcategoryTwo: 'primarySubcategoryTwo',
    SecondaryCategory: 'secondaryCategory',
    SecondarySubcategoryOne: 'secondarySubcategoryOne',
    SecondarySubcategoryTwo: 'secondarySubcategoryTwo'
} as const;
export type AppsGetInstanceFieldsAppInfosEnum = typeof AppsGetInstanceFieldsAppInfosEnum[keyof typeof AppsGetInstanceFieldsAppInfosEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsAppClipsEnum = {
    BundleId: 'bundleId',
    App: 'app',
    AppClipDefaultExperiences: 'appClipDefaultExperiences',
    AppClipAdvancedExperiences: 'appClipAdvancedExperiences'
} as const;
export type AppsGetInstanceFieldsAppClipsEnum = typeof AppsGetInstanceFieldsAppClipsEnum[keyof typeof AppsGetInstanceFieldsAppClipsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsEndUserLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app',
    Territories: 'territories'
} as const;
export type AppsGetInstanceFieldsEndUserLicenseAgreementsEnum = typeof AppsGetInstanceFieldsEndUserLicenseAgreementsEnum[keyof typeof AppsGetInstanceFieldsEndUserLicenseAgreementsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsInAppPurchasesEnum = {
    ReferenceName: 'referenceName',
    ProductId: 'productId',
    InAppPurchaseType: 'inAppPurchaseType',
    State: 'state',
    Apps: 'apps',
    Name: 'name',
    ReviewNote: 'reviewNote',
    FamilySharable: 'familySharable',
    ContentHosting: 'contentHosting',
    InAppPurchaseLocalizations: 'inAppPurchaseLocalizations',
    PricePoints: 'pricePoints',
    Content: 'content',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    PromotedPurchase: 'promotedPurchase',
    IapPriceSchedule: 'iapPriceSchedule',
    InAppPurchaseAvailability: 'inAppPurchaseAvailability',
    Images: 'images'
} as const;
export type AppsGetInstanceFieldsInAppPurchasesEnum = typeof AppsGetInstanceFieldsInAppPurchasesEnum[keyof typeof AppsGetInstanceFieldsInAppPurchasesEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsSubscriptionGroupsEnum = {
    ReferenceName: 'referenceName',
    Subscriptions: 'subscriptions',
    SubscriptionGroupLocalizations: 'subscriptionGroupLocalizations'
} as const;
export type AppsGetInstanceFieldsSubscriptionGroupsEnum = typeof AppsGetInstanceFieldsSubscriptionGroupsEnum[keyof typeof AppsGetInstanceFieldsSubscriptionGroupsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsGameCenterEnabledVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    IconAsset: 'iconAsset',
    CompatibleVersions: 'compatibleVersions',
    App: 'app'
} as const;
export type AppsGetInstanceFieldsGameCenterEnabledVersionsEnum = typeof AppsGetInstanceFieldsGameCenterEnabledVersionsEnum[keyof typeof AppsGetInstanceFieldsGameCenterEnabledVersionsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsAppCustomProductPagesEnum = {
    Name: 'name',
    Url: 'url',
    Visible: 'visible',
    App: 'app',
    AppCustomProductPageVersions: 'appCustomProductPageVersions'
} as const;
export type AppsGetInstanceFieldsAppCustomProductPagesEnum = typeof AppsGetInstanceFieldsAppCustomProductPagesEnum[keyof typeof AppsGetInstanceFieldsAppCustomProductPagesEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsPromotedPurchasesEnum = {
    VisibleForAllUsers: 'visibleForAllUsers',
    Enabled: 'enabled',
    State: 'state',
    InAppPurchaseV2: 'inAppPurchaseV2',
    Subscription: 'subscription'
} as const;
export type AppsGetInstanceFieldsPromotedPurchasesEnum = typeof AppsGetInstanceFieldsPromotedPurchasesEnum[keyof typeof AppsGetInstanceFieldsPromotedPurchasesEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsAppEventsEnum = {
    ReferenceName: 'referenceName',
    Badge: 'badge',
    EventState: 'eventState',
    DeepLink: 'deepLink',
    PurchaseRequirement: 'purchaseRequirement',
    PrimaryLocale: 'primaryLocale',
    Priority: 'priority',
    Purpose: 'purpose',
    TerritorySchedules: 'territorySchedules',
    ArchivedTerritorySchedules: 'archivedTerritorySchedules',
    Localizations: 'localizations'
} as const;
export type AppsGetInstanceFieldsAppEventsEnum = typeof AppsGetInstanceFieldsAppEventsEnum[keyof typeof AppsGetInstanceFieldsAppEventsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsReviewSubmissionsEnum = {
    Platform: 'platform',
    SubmittedDate: 'submittedDate',
    State: 'state',
    App: 'app',
    Items: 'items',
    AppStoreVersionForReview: 'appStoreVersionForReview',
    SubmittedByActor: 'submittedByActor',
    LastUpdatedByActor: 'lastUpdatedByActor'
} as const;
export type AppsGetInstanceFieldsReviewSubmissionsEnum = typeof AppsGetInstanceFieldsReviewSubmissionsEnum[keyof typeof AppsGetInstanceFieldsReviewSubmissionsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsSubscriptionGracePeriodsEnum = {
    OptIn: 'optIn',
    SandboxOptIn: 'sandboxOptIn',
    Duration: 'duration',
    RenewalType: 'renewalType'
} as const;
export type AppsGetInstanceFieldsSubscriptionGracePeriodsEnum = typeof AppsGetInstanceFieldsSubscriptionGracePeriodsEnum[keyof typeof AppsGetInstanceFieldsSubscriptionGracePeriodsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type AppsGetInstanceFieldsGameCenterDetailsEnum = typeof AppsGetInstanceFieldsGameCenterDetailsEnum[keyof typeof AppsGetInstanceFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const AppsGetInstanceFieldsAppStoreVersionExperimentsEnum = {
    Name: 'name',
    Platform: 'platform',
    TrafficProportion: 'trafficProportion',
    State: 'state',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    EndDate: 'endDate',
    App: 'app',
    LatestControlVersion: 'latestControlVersion',
    ControlVersions: 'controlVersions',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments'
} as const;
export type AppsGetInstanceFieldsAppStoreVersionExperimentsEnum = typeof AppsGetInstanceFieldsAppStoreVersionExperimentsEnum[keyof typeof AppsGetInstanceFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const AppsGetInstanceIncludeEnum = {
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2'
} as const;
export type AppsGetInstanceIncludeEnum = typeof AppsGetInstanceIncludeEnum[keyof typeof AppsGetInstanceIncludeEnum];
/**
 * @export
 */
export const AppsInAppPurchasesGetToManyRelatedFilterInAppPurchaseTypeEnum = {
    AutomaticallyRenewableSubscription: 'AUTOMATICALLY_RENEWABLE_SUBSCRIPTION',
    NonConsumable: 'NON_CONSUMABLE',
    Consumable: 'CONSUMABLE',
    NonRenewingSubscription: 'NON_RENEWING_SUBSCRIPTION',
    FreeSubscription: 'FREE_SUBSCRIPTION'
} as const;
export type AppsInAppPurchasesGetToManyRelatedFilterInAppPurchaseTypeEnum = typeof AppsInAppPurchasesGetToManyRelatedFilterInAppPurchaseTypeEnum[keyof typeof AppsInAppPurchasesGetToManyRelatedFilterInAppPurchaseTypeEnum];
/**
 * @export
 */
export const AppsInAppPurchasesGetToManyRelatedSortEnum = {
    ReferenceName: 'referenceName',
    ReferenceName: '-referenceName',
    ProductId: 'productId',
    ProductId: '-productId',
    InAppPurchaseType: 'inAppPurchaseType',
    InAppPurchaseType: '-inAppPurchaseType'
} as const;
export type AppsInAppPurchasesGetToManyRelatedSortEnum = typeof AppsInAppPurchasesGetToManyRelatedSortEnum[keyof typeof AppsInAppPurchasesGetToManyRelatedSortEnum];
/**
 * @export
 */
export const AppsInAppPurchasesGetToManyRelatedFieldsInAppPurchasesEnum = {
    ReferenceName: 'referenceName',
    ProductId: 'productId',
    InAppPurchaseType: 'inAppPurchaseType',
    State: 'state',
    Apps: 'apps'
} as const;
export type AppsInAppPurchasesGetToManyRelatedFieldsInAppPurchasesEnum = typeof AppsInAppPurchasesGetToManyRelatedFieldsInAppPurchasesEnum[keyof typeof AppsInAppPurchasesGetToManyRelatedFieldsInAppPurchasesEnum];
/**
 * @export
 */
export const AppsInAppPurchasesGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsInAppPurchasesGetToManyRelatedFieldsAppsEnum = typeof AppsInAppPurchasesGetToManyRelatedFieldsAppsEnum[keyof typeof AppsInAppPurchasesGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsInAppPurchasesGetToManyRelatedIncludeEnum = {
    Apps: 'apps'
} as const;
export type AppsInAppPurchasesGetToManyRelatedIncludeEnum = typeof AppsInAppPurchasesGetToManyRelatedIncludeEnum[keyof typeof AppsInAppPurchasesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFilterStateEnum = {
    MissingMetadata: 'MISSING_METADATA',
    WaitingForUpload: 'WAITING_FOR_UPLOAD',
    ProcessingContent: 'PROCESSING_CONTENT',
    ReadyToSubmit: 'READY_TO_SUBMIT',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    DeveloperActionNeeded: 'DEVELOPER_ACTION_NEEDED',
    PendingBinaryApproval: 'PENDING_BINARY_APPROVAL',
    Approved: 'APPROVED',
    DeveloperRemovedFromSale: 'DEVELOPER_REMOVED_FROM_SALE',
    RemovedFromSale: 'REMOVED_FROM_SALE',
    Rejected: 'REJECTED'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFilterStateEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFilterStateEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFilterStateEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFilterInAppPurchaseTypeEnum = {
    Consumable: 'CONSUMABLE',
    NonConsumable: 'NON_CONSUMABLE',
    NonRenewingSubscription: 'NON_RENEWING_SUBSCRIPTION'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFilterInAppPurchaseTypeEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFilterInAppPurchaseTypeEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFilterInAppPurchaseTypeEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedSortEnum = {
    Name: 'name',
    Name: '-name',
    InAppPurchaseType: 'inAppPurchaseType',
    InAppPurchaseType: '-inAppPurchaseType'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedSortEnum = typeof AppsInAppPurchasesV2GetToManyRelatedSortEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedSortEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasesEnum = {
    Name: 'name',
    ProductId: 'productId',
    InAppPurchaseType: 'inAppPurchaseType',
    State: 'state',
    ReviewNote: 'reviewNote',
    FamilySharable: 'familySharable',
    ContentHosting: 'contentHosting',
    InAppPurchaseLocalizations: 'inAppPurchaseLocalizations',
    PricePoints: 'pricePoints',
    Content: 'content',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    PromotedPurchase: 'promotedPurchase',
    IapPriceSchedule: 'iapPriceSchedule',
    InAppPurchaseAvailability: 'inAppPurchaseAvailability',
    Images: 'images'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasesEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasesEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasesEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseLocalizationsEnum = {
    Name: 'name',
    Locale: 'locale',
    Description: 'description',
    State: 'state',
    InAppPurchaseV2: 'inAppPurchaseV2'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseLocalizationsEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseLocalizationsEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseLocalizationsEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseContentsEnum = {
    FileName: 'fileName',
    FileSize: 'fileSize',
    Url: 'url',
    LastModifiedDate: 'lastModifiedDate',
    InAppPurchaseV2: 'inAppPurchaseV2'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseContentsEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseContentsEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseContentsEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshotsEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    SourceFileChecksum: 'sourceFileChecksum',
    ImageAsset: 'imageAsset',
    AssetToken: 'assetToken',
    AssetType: 'assetType',
    UploadOperations: 'uploadOperations',
    AssetDeliveryState: 'assetDeliveryState',
    InAppPurchaseV2: 'inAppPurchaseV2'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshotsEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshotsEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshotsEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFieldsPromotedPurchasesEnum = {
    VisibleForAllUsers: 'visibleForAllUsers',
    Enabled: 'enabled',
    State: 'state',
    InAppPurchaseV2: 'inAppPurchaseV2',
    Subscription: 'subscription'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFieldsPromotedPurchasesEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFieldsPromotedPurchasesEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFieldsPromotedPurchasesEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePriceSchedulesEnum = {
    BaseTerritory: 'baseTerritory',
    ManualPrices: 'manualPrices',
    AutomaticPrices: 'automaticPrices'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePriceSchedulesEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePriceSchedulesEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePriceSchedulesEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAvailabilitiesEnum = {
    AvailableInNewTerritories: 'availableInNewTerritories',
    AvailableTerritories: 'availableTerritories'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAvailabilitiesEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAvailabilitiesEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAvailabilitiesEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseImagesEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    SourceFileChecksum: 'sourceFileChecksum',
    AssetToken: 'assetToken',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    State: 'state',
    InAppPurchase: 'inAppPurchase'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseImagesEnum = typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseImagesEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseImagesEnum];
/**
 * @export
 */
export const AppsInAppPurchasesV2GetToManyRelatedIncludeEnum = {
    InAppPurchaseLocalizations: 'inAppPurchaseLocalizations',
    Content: 'content',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    PromotedPurchase: 'promotedPurchase',
    IapPriceSchedule: 'iapPriceSchedule',
    InAppPurchaseAvailability: 'inAppPurchaseAvailability',
    Images: 'images'
} as const;
export type AppsInAppPurchasesV2GetToManyRelatedIncludeEnum = typeof AppsInAppPurchasesV2GetToManyRelatedIncludeEnum[keyof typeof AppsInAppPurchasesV2GetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsMarketplaceSearchDetailGetToOneRelatedFieldsMarketplaceSearchDetailsEnum = {
    CatalogUrl: 'catalogUrl'
} as const;
export type AppsMarketplaceSearchDetailGetToOneRelatedFieldsMarketplaceSearchDetailsEnum = typeof AppsMarketplaceSearchDetailGetToOneRelatedFieldsMarketplaceSearchDetailsEnum[keyof typeof AppsMarketplaceSearchDetailGetToOneRelatedFieldsMarketplaceSearchDetailsEnum];
/**
 * @export
 */
export const AppsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum = {
    Ios: 'IOS'
} as const;
export type AppsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum = typeof AppsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum[keyof typeof AppsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum];
/**
 * @export
 */
export const AppsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum = {
    Disk: 'DISK',
    Hang: 'HANG',
    Battery: 'BATTERY',
    Launch: 'LAUNCH',
    Memory: 'MEMORY',
    Animation: 'ANIMATION',
    Termination: 'TERMINATION'
} as const;
export type AppsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum = typeof AppsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum[keyof typeof AppsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum];
/**
 * @export
 */
export const AppsPreReleaseVersionsGetToManyRelatedFieldsPreReleaseVersionsEnum = {
    Version: 'version',
    Platform: 'platform',
    Builds: 'builds',
    App: 'app'
} as const;
export type AppsPreReleaseVersionsGetToManyRelatedFieldsPreReleaseVersionsEnum = typeof AppsPreReleaseVersionsGetToManyRelatedFieldsPreReleaseVersionsEnum[keyof typeof AppsPreReleaseVersionsGetToManyRelatedFieldsPreReleaseVersionsEnum];
/**
 * @export
 */
export const AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchasesEnum = {
    VisibleForAllUsers: 'visibleForAllUsers',
    Enabled: 'enabled',
    State: 'state',
    InAppPurchaseV2: 'inAppPurchaseV2',
    Subscription: 'subscription'
} as const;
export type AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchasesEnum = typeof AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchasesEnum[keyof typeof AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchasesEnum];
/**
 * @export
 */
export const AppsPromotedPurchasesGetToManyRelatedFieldsInAppPurchasesEnum = {
    Name: 'name',
    ProductId: 'productId',
    InAppPurchaseType: 'inAppPurchaseType',
    State: 'state',
    ReviewNote: 'reviewNote',
    FamilySharable: 'familySharable',
    ContentHosting: 'contentHosting',
    InAppPurchaseLocalizations: 'inAppPurchaseLocalizations',
    PricePoints: 'pricePoints',
    Content: 'content',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    PromotedPurchase: 'promotedPurchase',
    IapPriceSchedule: 'iapPriceSchedule',
    InAppPurchaseAvailability: 'inAppPurchaseAvailability',
    Images: 'images'
} as const;
export type AppsPromotedPurchasesGetToManyRelatedFieldsInAppPurchasesEnum = typeof AppsPromotedPurchasesGetToManyRelatedFieldsInAppPurchasesEnum[keyof typeof AppsPromotedPurchasesGetToManyRelatedFieldsInAppPurchasesEnum];
/**
 * @export
 */
export const AppsPromotedPurchasesGetToManyRelatedFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type AppsPromotedPurchasesGetToManyRelatedFieldsSubscriptionsEnum = typeof AppsPromotedPurchasesGetToManyRelatedFieldsSubscriptionsEnum[keyof typeof AppsPromotedPurchasesGetToManyRelatedFieldsSubscriptionsEnum];
/**
 * @export
 */
export const AppsPromotedPurchasesGetToManyRelatedIncludeEnum = {
    InAppPurchaseV2: 'inAppPurchaseV2',
    Subscription: 'subscription'
} as const;
export type AppsPromotedPurchasesGetToManyRelatedIncludeEnum = typeof AppsPromotedPurchasesGetToManyRelatedIncludeEnum[keyof typeof AppsPromotedPurchasesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsReviewSubmissionsGetToManyRelatedFilterPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type AppsReviewSubmissionsGetToManyRelatedFilterPlatformEnum = typeof AppsReviewSubmissionsGetToManyRelatedFilterPlatformEnum[keyof typeof AppsReviewSubmissionsGetToManyRelatedFilterPlatformEnum];
/**
 * @export
 */
export const AppsReviewSubmissionsGetToManyRelatedFilterStateEnum = {
    ReadyForReview: 'READY_FOR_REVIEW',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    UnresolvedIssues: 'UNRESOLVED_ISSUES',
    Canceling: 'CANCELING',
    Completing: 'COMPLETING',
    Complete: 'COMPLETE'
} as const;
export type AppsReviewSubmissionsGetToManyRelatedFilterStateEnum = typeof AppsReviewSubmissionsGetToManyRelatedFilterStateEnum[keyof typeof AppsReviewSubmissionsGetToManyRelatedFilterStateEnum];
/**
 * @export
 */
export const AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionsEnum = {
    Platform: 'platform',
    SubmittedDate: 'submittedDate',
    State: 'state',
    App: 'app',
    Items: 'items',
    AppStoreVersionForReview: 'appStoreVersionForReview',
    SubmittedByActor: 'submittedByActor',
    LastUpdatedByActor: 'lastUpdatedByActor'
} as const;
export type AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionsEnum = typeof AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionsEnum[keyof typeof AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionsEnum];
/**
 * @export
 */
export const AppsReviewSubmissionsGetToManyRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type AppsReviewSubmissionsGetToManyRelatedFieldsAppsEnum = typeof AppsReviewSubmissionsGetToManyRelatedFieldsAppsEnum[keyof typeof AppsReviewSubmissionsGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionItemsEnum = {
    State: 'state',
    AppStoreVersion: 'appStoreVersion',
    AppCustomProductPageVersion: 'appCustomProductPageVersion',
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentV2: 'appStoreVersionExperimentV2',
    AppEvent: 'appEvent'
} as const;
export type AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionItemsEnum = typeof AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionItemsEnum[keyof typeof AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionItemsEnum];
/**
 * @export
 */
export const AppsReviewSubmissionsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    AppStoreState: 'appStoreState',
    AppVersionState: 'appVersionState',
    Copyright: 'copyright',
    ReviewType: 'reviewType',
    ReleaseType: 'releaseType',
    EarliestReleaseDate: 'earliestReleaseDate',
    Downloadable: 'downloadable',
    CreatedDate: 'createdDate',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    Build: 'build',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    GameCenterAppVersion: 'gameCenterAppVersion',
    RoutingAppCoverage: 'routingAppCoverage',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    CustomerReviews: 'customerReviews',
    AlternativeDistributionPackage: 'alternativeDistributionPackage'
} as const;
export type AppsReviewSubmissionsGetToManyRelatedFieldsAppStoreVersionsEnum = typeof AppsReviewSubmissionsGetToManyRelatedFieldsAppStoreVersionsEnum[keyof typeof AppsReviewSubmissionsGetToManyRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppsReviewSubmissionsGetToManyRelatedFieldsActorsEnum = {
    ActorType: 'actorType',
    UserFirstName: 'userFirstName',
    UserLastName: 'userLastName',
    UserEmail: 'userEmail',
    ApiKeyId: 'apiKeyId'
} as const;
export type AppsReviewSubmissionsGetToManyRelatedFieldsActorsEnum = typeof AppsReviewSubmissionsGetToManyRelatedFieldsActorsEnum[keyof typeof AppsReviewSubmissionsGetToManyRelatedFieldsActorsEnum];
/**
 * @export
 */
export const AppsReviewSubmissionsGetToManyRelatedIncludeEnum = {
    App: 'app',
    Items: 'items',
    AppStoreVersionForReview: 'appStoreVersionForReview',
    SubmittedByActor: 'submittedByActor',
    LastUpdatedByActor: 'lastUpdatedByActor'
} as const;
export type AppsReviewSubmissionsGetToManyRelatedIncludeEnum = typeof AppsReviewSubmissionsGetToManyRelatedIncludeEnum[keyof typeof AppsReviewSubmissionsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppsSubscriptionGracePeriodGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = {
    OptIn: 'optIn',
    SandboxOptIn: 'sandboxOptIn',
    Duration: 'duration',
    RenewalType: 'renewalType'
} as const;
export type AppsSubscriptionGracePeriodGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = typeof AppsSubscriptionGracePeriodGetToOneRelatedFieldsSubscriptionGracePeriodsEnum[keyof typeof AppsSubscriptionGracePeriodGetToOneRelatedFieldsSubscriptionGracePeriodsEnum];
/**
 * @export
 */
export const AppsSubscriptionGroupsGetToManyRelatedFilterSubscriptionsStateEnum = {
    MissingMetadata: 'MISSING_METADATA',
    ReadyToSubmit: 'READY_TO_SUBMIT',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    DeveloperActionNeeded: 'DEVELOPER_ACTION_NEEDED',
    PendingBinaryApproval: 'PENDING_BINARY_APPROVAL',
    Approved: 'APPROVED',
    DeveloperRemovedFromSale: 'DEVELOPER_REMOVED_FROM_SALE',
    RemovedFromSale: 'REMOVED_FROM_SALE',
    Rejected: 'REJECTED'
} as const;
export type AppsSubscriptionGroupsGetToManyRelatedFilterSubscriptionsStateEnum = typeof AppsSubscriptionGroupsGetToManyRelatedFilterSubscriptionsStateEnum[keyof typeof AppsSubscriptionGroupsGetToManyRelatedFilterSubscriptionsStateEnum];
/**
 * @export
 */
export const AppsSubscriptionGroupsGetToManyRelatedSortEnum = {
    ReferenceName: 'referenceName',
    ReferenceName: '-referenceName'
} as const;
export type AppsSubscriptionGroupsGetToManyRelatedSortEnum = typeof AppsSubscriptionGroupsGetToManyRelatedSortEnum[keyof typeof AppsSubscriptionGroupsGetToManyRelatedSortEnum];
/**
 * @export
 */
export const AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupsEnum = {
    ReferenceName: 'referenceName',
    Subscriptions: 'subscriptions',
    SubscriptionGroupLocalizations: 'subscriptionGroupLocalizations'
} as const;
export type AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupsEnum = typeof AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupsEnum[keyof typeof AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupsEnum];
/**
 * @export
 */
export const AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionsEnum = typeof AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionsEnum[keyof typeof AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionsEnum];
/**
 * @export
 */
export const AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum = {
    Name: 'name',
    CustomAppName: 'customAppName',
    Locale: 'locale',
    State: 'state',
    SubscriptionGroup: 'subscriptionGroup'
} as const;
export type AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum = typeof AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum[keyof typeof AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum];
/**
 * @export
 */
export const AppsSubscriptionGroupsGetToManyRelatedIncludeEnum = {
    Subscriptions: 'subscriptions',
    SubscriptionGroupLocalizations: 'subscriptionGroupLocalizations'
} as const;
export type AppsSubscriptionGroupsGetToManyRelatedIncludeEnum = typeof AppsSubscriptionGroupsGetToManyRelatedIncludeEnum[keyof typeof AppsSubscriptionGroupsGetToManyRelatedIncludeEnum];
