/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  NominationCreateRequest,
  NominationResponse,
  NominationUpdateRequest,
  NominationsResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    NominationCreateRequestFromJSON,
    NominationCreateRequestToJSON,
    NominationResponseFromJSON,
    NominationResponseToJSON,
    NominationUpdateRequestFromJSON,
    NominationUpdateRequestToJSON,
    NominationsResponseFromJSON,
    NominationsResponseToJSON,
} from '../models';

export interface NominationsCreateInstanceRequest {
    nominationCreateRequest: NominationCreateRequest;
}

export interface NominationsDeleteInstanceRequest {
    id: string;
}

export interface NominationsGetCollectionRequest {
    filterState: Array<NominationsGetCollectionFilterStateEnum>;
    filterType?: Array<NominationsGetCollectionFilterTypeEnum>;
    filterRelatedApps?: Array<string>;
    sort?: Array<NominationsGetCollectionSortEnum>;
    fieldsNominations?: Array<NominationsGetCollectionFieldsNominationsEnum>;
    limit?: number;
    include?: Array<NominationsGetCollectionIncludeEnum>;
    limitInAppEvents?: number;
    limitRelatedApps?: number;
    limitSupportedTerritories?: number;
}

export interface NominationsGetInstanceRequest {
    id: string;
    fieldsNominations?: Array<NominationsGetInstanceFieldsNominationsEnum>;
    include?: Array<NominationsGetInstanceIncludeEnum>;
    limitInAppEvents?: number;
    limitRelatedApps?: number;
    limitSupportedTerritories?: number;
}

export interface NominationsUpdateInstanceRequest {
    id: string;
    nominationUpdateRequest: NominationUpdateRequest;
}

/**
 * 
 */
export class NominationsApi extends runtime.BaseAPI {

    /**
     */
    async nominationsCreateInstanceRaw(requestParameters: NominationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NominationResponse>> {
        if (requestParameters.nominationCreateRequest === null || requestParameters.nominationCreateRequest === undefined) {
            throw new runtime.RequiredError('nominationCreateRequest','Required parameter requestParameters.nominationCreateRequest was null or undefined when calling nominationsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/nominations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NominationCreateRequestToJSON(requestParameters.nominationCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NominationResponseFromJSON(jsonValue));
    }

    /**
     */
    async nominationsCreateInstance(requestParameters: NominationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NominationResponse> {
        const response = await this.nominationsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nominationsDeleteInstanceRaw(requestParameters: NominationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nominationsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/nominations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async nominationsDeleteInstance(requestParameters: NominationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.nominationsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async nominationsGetCollectionRaw(requestParameters: NominationsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NominationsResponse>> {
        if (requestParameters.filterState === null || requestParameters.filterState === undefined) {
            throw new runtime.RequiredError('filterState','Required parameter requestParameters.filterState was null or undefined when calling nominationsGetCollection.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterType) {
            queryParameters['filter[type]'] = requestParameters.filterType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterRelatedApps) {
            queryParameters['filter[relatedApps]'] = requestParameters.filterRelatedApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsNominations) {
            queryParameters['fields[nominations]'] = requestParameters.fieldsNominations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitInAppEvents !== undefined) {
            queryParameters['limit[inAppEvents]'] = requestParameters.limitInAppEvents;
        }

        if (requestParameters.limitRelatedApps !== undefined) {
            queryParameters['limit[relatedApps]'] = requestParameters.limitRelatedApps;
        }

        if (requestParameters.limitSupportedTerritories !== undefined) {
            queryParameters['limit[supportedTerritories]'] = requestParameters.limitSupportedTerritories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/nominations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NominationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async nominationsGetCollection(requestParameters: NominationsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NominationsResponse> {
        const response = await this.nominationsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nominationsGetInstanceRaw(requestParameters: NominationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NominationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nominationsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsNominations) {
            queryParameters['fields[nominations]'] = requestParameters.fieldsNominations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitInAppEvents !== undefined) {
            queryParameters['limit[inAppEvents]'] = requestParameters.limitInAppEvents;
        }

        if (requestParameters.limitRelatedApps !== undefined) {
            queryParameters['limit[relatedApps]'] = requestParameters.limitRelatedApps;
        }

        if (requestParameters.limitSupportedTerritories !== undefined) {
            queryParameters['limit[supportedTerritories]'] = requestParameters.limitSupportedTerritories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/nominations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NominationResponseFromJSON(jsonValue));
    }

    /**
     */
    async nominationsGetInstance(requestParameters: NominationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NominationResponse> {
        const response = await this.nominationsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nominationsUpdateInstanceRaw(requestParameters: NominationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NominationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling nominationsUpdateInstance.');
        }

        if (requestParameters.nominationUpdateRequest === null || requestParameters.nominationUpdateRequest === undefined) {
            throw new runtime.RequiredError('nominationUpdateRequest','Required parameter requestParameters.nominationUpdateRequest was null or undefined when calling nominationsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/nominations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: NominationUpdateRequestToJSON(requestParameters.nominationUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NominationResponseFromJSON(jsonValue));
    }

    /**
     */
    async nominationsUpdateInstance(requestParameters: NominationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NominationResponse> {
        const response = await this.nominationsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const NominationsGetCollectionFilterStateEnum = {
    Draft: 'DRAFT',
    Submitted: 'SUBMITTED',
    Archived: 'ARCHIVED'
} as const;
export type NominationsGetCollectionFilterStateEnum = typeof NominationsGetCollectionFilterStateEnum[keyof typeof NominationsGetCollectionFilterStateEnum];
/**
 * @export
 */
export const NominationsGetCollectionFilterTypeEnum = {
    AppLaunch: 'APP_LAUNCH',
    AppEnhancements: 'APP_ENHANCEMENTS',
    NewContent: 'NEW_CONTENT'
} as const;
export type NominationsGetCollectionFilterTypeEnum = typeof NominationsGetCollectionFilterTypeEnum[keyof typeof NominationsGetCollectionFilterTypeEnum];
/**
 * @export
 */
export const NominationsGetCollectionSortEnum = {
    LastModifiedDate: 'lastModifiedDate',
    LastModifiedDate: '-lastModifiedDate',
    PublishStartDate: 'publishStartDate',
    PublishStartDate: '-publishStartDate',
    PublishEndDate: 'publishEndDate',
    PublishEndDate: '-publishEndDate',
    Name: 'name',
    Name: '-name',
    Type: 'type',
    Type: '-type'
} as const;
export type NominationsGetCollectionSortEnum = typeof NominationsGetCollectionSortEnum[keyof typeof NominationsGetCollectionSortEnum];
/**
 * @export
 */
export const NominationsGetCollectionFieldsNominationsEnum = {
    Name: 'name',
    Type: 'type',
    Description: 'description',
    CreatedDate: 'createdDate',
    LastModifiedDate: 'lastModifiedDate',
    SubmittedDate: 'submittedDate',
    State: 'state',
    PublishStartDate: 'publishStartDate',
    PublishEndDate: 'publishEndDate',
    DeviceFamilies: 'deviceFamilies',
    Locales: 'locales',
    SupplementalMaterialsUris: 'supplementalMaterialsUris',
    HasInAppEvents: 'hasInAppEvents',
    LaunchInSelectMarketsFirst: 'launchInSelectMarketsFirst',
    Notes: 'notes',
    PreOrderEnabled: 'preOrderEnabled',
    RelatedApps: 'relatedApps',
    CreatedByActor: 'createdByActor',
    LastModifiedByActor: 'lastModifiedByActor',
    SubmittedByActor: 'submittedByActor',
    InAppEvents: 'inAppEvents',
    SupportedTerritories: 'supportedTerritories'
} as const;
export type NominationsGetCollectionFieldsNominationsEnum = typeof NominationsGetCollectionFieldsNominationsEnum[keyof typeof NominationsGetCollectionFieldsNominationsEnum];
/**
 * @export
 */
export const NominationsGetCollectionIncludeEnum = {
    RelatedApps: 'relatedApps',
    CreatedByActor: 'createdByActor',
    LastModifiedByActor: 'lastModifiedByActor',
    SubmittedByActor: 'submittedByActor',
    InAppEvents: 'inAppEvents',
    SupportedTerritories: 'supportedTerritories'
} as const;
export type NominationsGetCollectionIncludeEnum = typeof NominationsGetCollectionIncludeEnum[keyof typeof NominationsGetCollectionIncludeEnum];
/**
 * @export
 */
export const NominationsGetInstanceFieldsNominationsEnum = {
    Name: 'name',
    Type: 'type',
    Description: 'description',
    CreatedDate: 'createdDate',
    LastModifiedDate: 'lastModifiedDate',
    SubmittedDate: 'submittedDate',
    State: 'state',
    PublishStartDate: 'publishStartDate',
    PublishEndDate: 'publishEndDate',
    DeviceFamilies: 'deviceFamilies',
    Locales: 'locales',
    SupplementalMaterialsUris: 'supplementalMaterialsUris',
    HasInAppEvents: 'hasInAppEvents',
    LaunchInSelectMarketsFirst: 'launchInSelectMarketsFirst',
    Notes: 'notes',
    PreOrderEnabled: 'preOrderEnabled',
    RelatedApps: 'relatedApps',
    CreatedByActor: 'createdByActor',
    LastModifiedByActor: 'lastModifiedByActor',
    SubmittedByActor: 'submittedByActor',
    InAppEvents: 'inAppEvents',
    SupportedTerritories: 'supportedTerritories'
} as const;
export type NominationsGetInstanceFieldsNominationsEnum = typeof NominationsGetInstanceFieldsNominationsEnum[keyof typeof NominationsGetInstanceFieldsNominationsEnum];
/**
 * @export
 */
export const NominationsGetInstanceIncludeEnum = {
    RelatedApps: 'relatedApps',
    CreatedByActor: 'createdByActor',
    LastModifiedByActor: 'lastModifiedByActor',
    SubmittedByActor: 'submittedByActor',
    InAppEvents: 'inAppEvents',
    SupportedTerritories: 'supportedTerritories'
} as const;
export type NominationsGetInstanceIncludeEnum = typeof NominationsGetInstanceIncludeEnum[keyof typeof NominationsGetInstanceIncludeEnum];
