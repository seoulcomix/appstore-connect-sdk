/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PromotedPurchaseResponse,
  SubscriptionAppStoreReviewScreenshotResponse,
  SubscriptionAvailabilityResponse,
  SubscriptionCreateRequest,
  SubscriptionImagesResponse,
  SubscriptionIntroductoryOffersLinkagesRequest,
  SubscriptionIntroductoryOffersLinkagesResponse,
  SubscriptionIntroductoryOffersResponse,
  SubscriptionLocalizationsResponse,
  SubscriptionOfferCodesResponse,
  SubscriptionPricePointsResponse,
  SubscriptionPricesLinkagesRequest,
  SubscriptionPricesLinkagesResponse,
  SubscriptionPricesResponse,
  SubscriptionPromotionalOffersResponse,
  SubscriptionResponse,
  SubscriptionUpdateRequest,
  WinBackOffersResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PromotedPurchaseResponseFromJSON,
    PromotedPurchaseResponseToJSON,
    SubscriptionAppStoreReviewScreenshotResponseFromJSON,
    SubscriptionAppStoreReviewScreenshotResponseToJSON,
    SubscriptionAvailabilityResponseFromJSON,
    SubscriptionAvailabilityResponseToJSON,
    SubscriptionCreateRequestFromJSON,
    SubscriptionCreateRequestToJSON,
    SubscriptionImagesResponseFromJSON,
    SubscriptionImagesResponseToJSON,
    SubscriptionIntroductoryOffersLinkagesRequestFromJSON,
    SubscriptionIntroductoryOffersLinkagesRequestToJSON,
    SubscriptionIntroductoryOffersLinkagesResponseFromJSON,
    SubscriptionIntroductoryOffersLinkagesResponseToJSON,
    SubscriptionIntroductoryOffersResponseFromJSON,
    SubscriptionIntroductoryOffersResponseToJSON,
    SubscriptionLocalizationsResponseFromJSON,
    SubscriptionLocalizationsResponseToJSON,
    SubscriptionOfferCodesResponseFromJSON,
    SubscriptionOfferCodesResponseToJSON,
    SubscriptionPricePointsResponseFromJSON,
    SubscriptionPricePointsResponseToJSON,
    SubscriptionPricesLinkagesRequestFromJSON,
    SubscriptionPricesLinkagesRequestToJSON,
    SubscriptionPricesLinkagesResponseFromJSON,
    SubscriptionPricesLinkagesResponseToJSON,
    SubscriptionPricesResponseFromJSON,
    SubscriptionPricesResponseToJSON,
    SubscriptionPromotionalOffersResponseFromJSON,
    SubscriptionPromotionalOffersResponseToJSON,
    SubscriptionResponseFromJSON,
    SubscriptionResponseToJSON,
    SubscriptionUpdateRequestFromJSON,
    SubscriptionUpdateRequestToJSON,
    WinBackOffersResponseFromJSON,
    WinBackOffersResponseToJSON,
} from '../models';

export interface SubscriptionsAppStoreReviewScreenshotGetToOneRelatedRequest {
    id: string;
    fieldsSubscriptionAppStoreReviewScreenshots?: Array<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum>;
    fieldsSubscriptions?: Array<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionsEnum>;
    include?: Array<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedIncludeEnum>;
}

export interface SubscriptionsCreateInstanceRequest {
    subscriptionCreateRequest: SubscriptionCreateRequest;
}

export interface SubscriptionsDeleteInstanceRequest {
    id: string;
}

export interface SubscriptionsGetInstanceRequest {
    id: string;
    fieldsSubscriptions?: Array<SubscriptionsGetInstanceFieldsSubscriptionsEnum>;
    fieldsSubscriptionLocalizations?: Array<SubscriptionsGetInstanceFieldsSubscriptionLocalizationsEnum>;
    fieldsSubscriptionAppStoreReviewScreenshots?: Array<SubscriptionsGetInstanceFieldsSubscriptionAppStoreReviewScreenshotsEnum>;
    fieldsSubscriptionIntroductoryOffers?: Array<SubscriptionsGetInstanceFieldsSubscriptionIntroductoryOffersEnum>;
    fieldsSubscriptionPromotionalOffers?: Array<SubscriptionsGetInstanceFieldsSubscriptionPromotionalOffersEnum>;
    fieldsSubscriptionOfferCodes?: Array<SubscriptionsGetInstanceFieldsSubscriptionOfferCodesEnum>;
    fieldsSubscriptionPrices?: Array<SubscriptionsGetInstanceFieldsSubscriptionPricesEnum>;
    fieldsPromotedPurchases?: Array<SubscriptionsGetInstanceFieldsPromotedPurchasesEnum>;
    fieldsSubscriptionAvailabilities?: Array<SubscriptionsGetInstanceFieldsSubscriptionAvailabilitiesEnum>;
    fieldsWinBackOffers?: Array<SubscriptionsGetInstanceFieldsWinBackOffersEnum>;
    fieldsSubscriptionImages?: Array<SubscriptionsGetInstanceFieldsSubscriptionImagesEnum>;
    include?: Array<SubscriptionsGetInstanceIncludeEnum>;
    limitImages?: number;
    limitIntroductoryOffers?: number;
    limitOfferCodes?: number;
    limitPrices?: number;
    limitPromotionalOffers?: number;
    limitSubscriptionLocalizations?: number;
    limitWinBackOffers?: number;
}

export interface SubscriptionsImagesGetToManyRelatedRequest {
    id: string;
    fieldsSubscriptionImages?: Array<SubscriptionsImagesGetToManyRelatedFieldsSubscriptionImagesEnum>;
    fieldsSubscriptions?: Array<SubscriptionsImagesGetToManyRelatedFieldsSubscriptionsEnum>;
    limit?: number;
    include?: Array<SubscriptionsImagesGetToManyRelatedIncludeEnum>;
}

export interface SubscriptionsIntroductoryOffersDeleteToManyRelationshipRequest {
    id: string;
    subscriptionIntroductoryOffersLinkagesRequest: SubscriptionIntroductoryOffersLinkagesRequest;
}

export interface SubscriptionsIntroductoryOffersGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsSubscriptionIntroductoryOffers?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum>;
    fieldsSubscriptions?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsTerritories?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedFieldsTerritoriesEnum>;
    fieldsSubscriptionPricePoints?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionPricePointsEnum>;
    limit?: number;
    include?: Array<SubscriptionsIntroductoryOffersGetToManyRelatedIncludeEnum>;
}

export interface SubscriptionsIntroductoryOffersGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface SubscriptionsOfferCodesGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsSubscriptionOfferCodes?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodesEnum>;
    fieldsSubscriptions?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsSubscriptionOfferCodeOneTimeUseCodes?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodesEnum>;
    fieldsSubscriptionOfferCodeCustomCodes?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeCustomCodesEnum>;
    fieldsSubscriptionOfferCodePrices?: Array<SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodePricesEnum>;
    limit?: number;
    include?: Array<SubscriptionsOfferCodesGetToManyRelatedIncludeEnum>;
    limitOneTimeUseCodes?: number;
    limitCustomCodes?: number;
    limitPrices?: number;
}

export interface SubscriptionsPricePointsGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsSubscriptionPricePoints?: Array<SubscriptionsPricePointsGetToManyRelatedFieldsSubscriptionPricePointsEnum>;
    fieldsTerritories?: Array<SubscriptionsPricePointsGetToManyRelatedFieldsTerritoriesEnum>;
    limit?: number;
    include?: Array<SubscriptionsPricePointsGetToManyRelatedIncludeEnum>;
}

export interface SubscriptionsPricesDeleteToManyRelationshipRequest {
    id: string;
    subscriptionPricesLinkagesRequest: SubscriptionPricesLinkagesRequest;
}

export interface SubscriptionsPricesGetToManyRelatedRequest {
    id: string;
    filterSubscriptionPricePoint?: Array<string>;
    filterTerritory?: Array<string>;
    fieldsSubscriptionPrices?: Array<SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricesEnum>;
    fieldsTerritories?: Array<SubscriptionsPricesGetToManyRelatedFieldsTerritoriesEnum>;
    fieldsSubscriptionPricePoints?: Array<SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricePointsEnum>;
    limit?: number;
    include?: Array<SubscriptionsPricesGetToManyRelatedIncludeEnum>;
}

export interface SubscriptionsPricesGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface SubscriptionsPromotedPurchaseGetToOneRelatedRequest {
    id: string;
    fieldsPromotedPurchases?: Array<SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchasesEnum>;
    fieldsInAppPurchases?: Array<SubscriptionsPromotedPurchaseGetToOneRelatedFieldsInAppPurchasesEnum>;
    fieldsSubscriptions?: Array<SubscriptionsPromotedPurchaseGetToOneRelatedFieldsSubscriptionsEnum>;
    include?: Array<SubscriptionsPromotedPurchaseGetToOneRelatedIncludeEnum>;
}

export interface SubscriptionsPromotionalOffersGetToManyRelatedRequest {
    id: string;
    filterTerritory?: Array<string>;
    fieldsSubscriptionPromotionalOffers?: Array<SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum>;
    fieldsSubscriptions?: Array<SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionsEnum>;
    fieldsSubscriptionPromotionalOfferPrices?: Array<SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOfferPricesEnum>;
    limit?: number;
    include?: Array<SubscriptionsPromotionalOffersGetToManyRelatedIncludeEnum>;
    limitPrices?: number;
}

export interface SubscriptionsSubscriptionAvailabilityGetToOneRelatedRequest {
    id: string;
    fieldsSubscriptionAvailabilities?: Array<SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsSubscriptionAvailabilitiesEnum>;
    fieldsTerritories?: Array<SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsTerritoriesEnum>;
    include?: Array<SubscriptionsSubscriptionAvailabilityGetToOneRelatedIncludeEnum>;
    limitAvailableTerritories?: number;
}

export interface SubscriptionsSubscriptionLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsSubscriptionLocalizations?: Array<SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionLocalizationsEnum>;
    fieldsSubscriptions?: Array<SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionsEnum>;
    limit?: number;
    include?: Array<SubscriptionsSubscriptionLocalizationsGetToManyRelatedIncludeEnum>;
}

export interface SubscriptionsUpdateInstanceRequest {
    id: string;
    subscriptionUpdateRequest: SubscriptionUpdateRequest;
}

export interface SubscriptionsWinBackOffersGetToManyRelatedRequest {
    id: string;
    fieldsWinBackOffers?: Array<SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOffersEnum>;
    fieldsWinBackOfferPrices?: Array<SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOfferPricesEnum>;
    limit?: number;
    include?: Array<SubscriptionsWinBackOffersGetToManyRelatedIncludeEnum>;
    limitPrices?: number;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionsAppStoreReviewScreenshotGetToOneRelatedRaw(requestParameters: SubscriptionsAppStoreReviewScreenshotGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionAppStoreReviewScreenshotResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsAppStoreReviewScreenshotGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptionAppStoreReviewScreenshots) {
            queryParameters['fields[subscriptionAppStoreReviewScreenshots]'] = requestParameters.fieldsSubscriptionAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/appStoreReviewScreenshot`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionAppStoreReviewScreenshotResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsAppStoreReviewScreenshotGetToOneRelated(requestParameters: SubscriptionsAppStoreReviewScreenshotGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionAppStoreReviewScreenshotResponse> {
        const response = await this.subscriptionsAppStoreReviewScreenshotGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsCreateInstanceRaw(requestParameters: SubscriptionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>> {
        if (requestParameters.subscriptionCreateRequest === null || requestParameters.subscriptionCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionCreateRequest','Required parameter requestParameters.subscriptionCreateRequest was null or undefined when calling subscriptionsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionCreateRequestToJSON(requestParameters.subscriptionCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsCreateInstance(requestParameters: SubscriptionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse> {
        const response = await this.subscriptionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsDeleteInstanceRaw(requestParameters: SubscriptionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async subscriptionsDeleteInstance(requestParameters: SubscriptionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async subscriptionsGetInstanceRaw(requestParameters: SubscriptionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionLocalizations) {
            queryParameters['fields[subscriptionLocalizations]'] = requestParameters.fieldsSubscriptionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionAppStoreReviewScreenshots) {
            queryParameters['fields[subscriptionAppStoreReviewScreenshots]'] = requestParameters.fieldsSubscriptionAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionIntroductoryOffers) {
            queryParameters['fields[subscriptionIntroductoryOffers]'] = requestParameters.fieldsSubscriptionIntroductoryOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionPromotionalOffers) {
            queryParameters['fields[subscriptionPromotionalOffers]'] = requestParameters.fieldsSubscriptionPromotionalOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionOfferCodes) {
            queryParameters['fields[subscriptionOfferCodes]'] = requestParameters.fieldsSubscriptionOfferCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionPrices) {
            queryParameters['fields[subscriptionPrices]'] = requestParameters.fieldsSubscriptionPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionAvailabilities) {
            queryParameters['fields[subscriptionAvailabilities]'] = requestParameters.fieldsSubscriptionAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsWinBackOffers) {
            queryParameters['fields[winBackOffers]'] = requestParameters.fieldsWinBackOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionImages) {
            queryParameters['fields[subscriptionImages]'] = requestParameters.fieldsSubscriptionImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitImages !== undefined) {
            queryParameters['limit[images]'] = requestParameters.limitImages;
        }

        if (requestParameters.limitIntroductoryOffers !== undefined) {
            queryParameters['limit[introductoryOffers]'] = requestParameters.limitIntroductoryOffers;
        }

        if (requestParameters.limitOfferCodes !== undefined) {
            queryParameters['limit[offerCodes]'] = requestParameters.limitOfferCodes;
        }

        if (requestParameters.limitPrices !== undefined) {
            queryParameters['limit[prices]'] = requestParameters.limitPrices;
        }

        if (requestParameters.limitPromotionalOffers !== undefined) {
            queryParameters['limit[promotionalOffers]'] = requestParameters.limitPromotionalOffers;
        }

        if (requestParameters.limitSubscriptionLocalizations !== undefined) {
            queryParameters['limit[subscriptionLocalizations]'] = requestParameters.limitSubscriptionLocalizations;
        }

        if (requestParameters.limitWinBackOffers !== undefined) {
            queryParameters['limit[winBackOffers]'] = requestParameters.limitWinBackOffers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsGetInstance(requestParameters: SubscriptionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse> {
        const response = await this.subscriptionsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsImagesGetToManyRelatedRaw(requestParameters: SubscriptionsImagesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionImagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsImagesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptionImages) {
            queryParameters['fields[subscriptionImages]'] = requestParameters.fieldsSubscriptionImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/images`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionImagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsImagesGetToManyRelated(requestParameters: SubscriptionsImagesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionImagesResponse> {
        const response = await this.subscriptionsImagesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsIntroductoryOffersDeleteToManyRelationshipRaw(requestParameters: SubscriptionsIntroductoryOffersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsIntroductoryOffersDeleteToManyRelationship.');
        }

        if (requestParameters.subscriptionIntroductoryOffersLinkagesRequest === null || requestParameters.subscriptionIntroductoryOffersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('subscriptionIntroductoryOffersLinkagesRequest','Required parameter requestParameters.subscriptionIntroductoryOffersLinkagesRequest was null or undefined when calling subscriptionsIntroductoryOffersDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/relationships/introductoryOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionIntroductoryOffersLinkagesRequestToJSON(requestParameters.subscriptionIntroductoryOffersLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async subscriptionsIntroductoryOffersDeleteToManyRelationship(requestParameters: SubscriptionsIntroductoryOffersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionsIntroductoryOffersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async subscriptionsIntroductoryOffersGetToManyRelatedRaw(requestParameters: SubscriptionsIntroductoryOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionIntroductoryOffersResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsIntroductoryOffersGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionIntroductoryOffers) {
            queryParameters['fields[subscriptionIntroductoryOffers]'] = requestParameters.fieldsSubscriptionIntroductoryOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionPricePoints) {
            queryParameters['fields[subscriptionPricePoints]'] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/introductoryOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionIntroductoryOffersResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsIntroductoryOffersGetToManyRelated(requestParameters: SubscriptionsIntroductoryOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionIntroductoryOffersResponse> {
        const response = await this.subscriptionsIntroductoryOffersGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsIntroductoryOffersGetToManyRelationshipRaw(requestParameters: SubscriptionsIntroductoryOffersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionIntroductoryOffersLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsIntroductoryOffersGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/relationships/introductoryOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionIntroductoryOffersLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsIntroductoryOffersGetToManyRelationship(requestParameters: SubscriptionsIntroductoryOffersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionIntroductoryOffersLinkagesResponse> {
        const response = await this.subscriptionsIntroductoryOffersGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsOfferCodesGetToManyRelatedRaw(requestParameters: SubscriptionsOfferCodesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionOfferCodesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsOfferCodesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionOfferCodes) {
            queryParameters['fields[subscriptionOfferCodes]'] = requestParameters.fieldsSubscriptionOfferCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionOfferCodeOneTimeUseCodes) {
            queryParameters['fields[subscriptionOfferCodeOneTimeUseCodes]'] = requestParameters.fieldsSubscriptionOfferCodeOneTimeUseCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionOfferCodeCustomCodes) {
            queryParameters['fields[subscriptionOfferCodeCustomCodes]'] = requestParameters.fieldsSubscriptionOfferCodeCustomCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionOfferCodePrices) {
            queryParameters['fields[subscriptionOfferCodePrices]'] = requestParameters.fieldsSubscriptionOfferCodePrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitOneTimeUseCodes !== undefined) {
            queryParameters['limit[oneTimeUseCodes]'] = requestParameters.limitOneTimeUseCodes;
        }

        if (requestParameters.limitCustomCodes !== undefined) {
            queryParameters['limit[customCodes]'] = requestParameters.limitCustomCodes;
        }

        if (requestParameters.limitPrices !== undefined) {
            queryParameters['limit[prices]'] = requestParameters.limitPrices;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/offerCodes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionOfferCodesResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsOfferCodesGetToManyRelated(requestParameters: SubscriptionsOfferCodesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionOfferCodesResponse> {
        const response = await this.subscriptionsOfferCodesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsPricePointsGetToManyRelatedRaw(requestParameters: SubscriptionsPricePointsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPricePointsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsPricePointsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionPricePoints) {
            queryParameters['fields[subscriptionPricePoints]'] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/pricePoints`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPricePointsResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsPricePointsGetToManyRelated(requestParameters: SubscriptionsPricePointsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPricePointsResponse> {
        const response = await this.subscriptionsPricePointsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsPricesDeleteToManyRelationshipRaw(requestParameters: SubscriptionsPricesDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsPricesDeleteToManyRelationship.');
        }

        if (requestParameters.subscriptionPricesLinkagesRequest === null || requestParameters.subscriptionPricesLinkagesRequest === undefined) {
            throw new runtime.RequiredError('subscriptionPricesLinkagesRequest','Required parameter requestParameters.subscriptionPricesLinkagesRequest was null or undefined when calling subscriptionsPricesDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/relationships/prices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionPricesLinkagesRequestToJSON(requestParameters.subscriptionPricesLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async subscriptionsPricesDeleteToManyRelationship(requestParameters: SubscriptionsPricesDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionsPricesDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async subscriptionsPricesGetToManyRelatedRaw(requestParameters: SubscriptionsPricesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPricesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsPricesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterSubscriptionPricePoint) {
            queryParameters['filter[subscriptionPricePoint]'] = requestParameters.filterSubscriptionPricePoint.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionPrices) {
            queryParameters['fields[subscriptionPrices]'] = requestParameters.fieldsSubscriptionPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionPricePoints) {
            queryParameters['fields[subscriptionPricePoints]'] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/prices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPricesResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsPricesGetToManyRelated(requestParameters: SubscriptionsPricesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPricesResponse> {
        const response = await this.subscriptionsPricesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsPricesGetToManyRelationshipRaw(requestParameters: SubscriptionsPricesGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPricesLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsPricesGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/relationships/prices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPricesLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsPricesGetToManyRelationship(requestParameters: SubscriptionsPricesGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPricesLinkagesResponse> {
        const response = await this.subscriptionsPricesGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsPromotedPurchaseGetToOneRelatedRaw(requestParameters: SubscriptionsPromotedPurchaseGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotedPurchaseResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsPromotedPurchaseGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/promotedPurchase`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotedPurchaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsPromotedPurchaseGetToOneRelated(requestParameters: SubscriptionsPromotedPurchaseGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotedPurchaseResponse> {
        const response = await this.subscriptionsPromotedPurchaseGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsPromotionalOffersGetToManyRelatedRaw(requestParameters: SubscriptionsPromotionalOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionPromotionalOffersResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsPromotionalOffersGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterTerritory) {
            queryParameters['filter[territory]'] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionPromotionalOffers) {
            queryParameters['fields[subscriptionPromotionalOffers]'] = requestParameters.fieldsSubscriptionPromotionalOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionPromotionalOfferPrices) {
            queryParameters['fields[subscriptionPromotionalOfferPrices]'] = requestParameters.fieldsSubscriptionPromotionalOfferPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitPrices !== undefined) {
            queryParameters['limit[prices]'] = requestParameters.limitPrices;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/promotionalOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionPromotionalOffersResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsPromotionalOffersGetToManyRelated(requestParameters: SubscriptionsPromotionalOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionPromotionalOffersResponse> {
        const response = await this.subscriptionsPromotionalOffersGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscriptionAvailabilityGetToOneRelatedRaw(requestParameters: SubscriptionsSubscriptionAvailabilityGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionAvailabilityResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsSubscriptionAvailabilityGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptionAvailabilities) {
            queryParameters['fields[subscriptionAvailabilities]'] = requestParameters.fieldsSubscriptionAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAvailableTerritories !== undefined) {
            queryParameters['limit[availableTerritories]'] = requestParameters.limitAvailableTerritories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/subscriptionAvailability`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsSubscriptionAvailabilityGetToOneRelated(requestParameters: SubscriptionsSubscriptionAvailabilityGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionAvailabilityResponse> {
        const response = await this.subscriptionsSubscriptionAvailabilityGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscriptionLocalizationsGetToManyRelatedRaw(requestParameters: SubscriptionsSubscriptionLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsSubscriptionLocalizationsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptionLocalizations) {
            queryParameters['fields[subscriptionLocalizations]'] = requestParameters.fieldsSubscriptionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptions) {
            queryParameters['fields[subscriptions]'] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/subscriptionLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionLocalizationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsSubscriptionLocalizationsGetToManyRelated(requestParameters: SubscriptionsSubscriptionLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionLocalizationsResponse> {
        const response = await this.subscriptionsSubscriptionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsUpdateInstanceRaw(requestParameters: SubscriptionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsUpdateInstance.');
        }

        if (requestParameters.subscriptionUpdateRequest === null || requestParameters.subscriptionUpdateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionUpdateRequest','Required parameter requestParameters.subscriptionUpdateRequest was null or undefined when calling subscriptionsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionUpdateRequestToJSON(requestParameters.subscriptionUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsUpdateInstance(requestParameters: SubscriptionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse> {
        const response = await this.subscriptionsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsWinBackOffersGetToManyRelatedRaw(requestParameters: SubscriptionsWinBackOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WinBackOffersResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsWinBackOffersGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsWinBackOffers) {
            queryParameters['fields[winBackOffers]'] = requestParameters.fieldsWinBackOffers.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsWinBackOfferPrices) {
            queryParameters['fields[winBackOfferPrices]'] = requestParameters.fieldsWinBackOfferPrices.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitPrices !== undefined) {
            queryParameters['limit[prices]'] = requestParameters.limitPrices;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptions/{id}/winBackOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WinBackOffersResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsWinBackOffersGetToManyRelated(requestParameters: SubscriptionsWinBackOffersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WinBackOffersResponse> {
        const response = await this.subscriptionsWinBackOffersGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    SourceFileChecksum: 'sourceFileChecksum',
    ImageAsset: 'imageAsset',
    AssetToken: 'assetToken',
    AssetType: 'assetType',
    UploadOperations: 'uploadOperations',
    AssetDeliveryState: 'assetDeliveryState',
    Subscription: 'subscription'
} as const;
export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum = typeof SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum[keyof typeof SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum];
/**
 * @export
 */
export const SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionsEnum = typeof SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionsEnum[keyof typeof SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionsEnum];
/**
 * @export
 */
export const SubscriptionsAppStoreReviewScreenshotGetToOneRelatedIncludeEnum = {
    Subscription: 'subscription'
} as const;
export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedIncludeEnum = typeof SubscriptionsAppStoreReviewScreenshotGetToOneRelatedIncludeEnum[keyof typeof SubscriptionsAppStoreReviewScreenshotGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type SubscriptionsGetInstanceFieldsSubscriptionsEnum = typeof SubscriptionsGetInstanceFieldsSubscriptionsEnum[keyof typeof SubscriptionsGetInstanceFieldsSubscriptionsEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsSubscriptionLocalizationsEnum = {
    Name: 'name',
    Locale: 'locale',
    Description: 'description',
    State: 'state',
    Subscription: 'subscription'
} as const;
export type SubscriptionsGetInstanceFieldsSubscriptionLocalizationsEnum = typeof SubscriptionsGetInstanceFieldsSubscriptionLocalizationsEnum[keyof typeof SubscriptionsGetInstanceFieldsSubscriptionLocalizationsEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsSubscriptionAppStoreReviewScreenshotsEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    SourceFileChecksum: 'sourceFileChecksum',
    ImageAsset: 'imageAsset',
    AssetToken: 'assetToken',
    AssetType: 'assetType',
    UploadOperations: 'uploadOperations',
    AssetDeliveryState: 'assetDeliveryState',
    Subscription: 'subscription'
} as const;
export type SubscriptionsGetInstanceFieldsSubscriptionAppStoreReviewScreenshotsEnum = typeof SubscriptionsGetInstanceFieldsSubscriptionAppStoreReviewScreenshotsEnum[keyof typeof SubscriptionsGetInstanceFieldsSubscriptionAppStoreReviewScreenshotsEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsSubscriptionIntroductoryOffersEnum = {
    StartDate: 'startDate',
    EndDate: 'endDate',
    Duration: 'duration',
    OfferMode: 'offerMode',
    NumberOfPeriods: 'numberOfPeriods',
    Subscription: 'subscription',
    Territory: 'territory',
    SubscriptionPricePoint: 'subscriptionPricePoint'
} as const;
export type SubscriptionsGetInstanceFieldsSubscriptionIntroductoryOffersEnum = typeof SubscriptionsGetInstanceFieldsSubscriptionIntroductoryOffersEnum[keyof typeof SubscriptionsGetInstanceFieldsSubscriptionIntroductoryOffersEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsSubscriptionPromotionalOffersEnum = {
    Name: 'name',
    OfferCode: 'offerCode',
    Duration: 'duration',
    OfferMode: 'offerMode',
    NumberOfPeriods: 'numberOfPeriods',
    Subscription: 'subscription',
    Prices: 'prices'
} as const;
export type SubscriptionsGetInstanceFieldsSubscriptionPromotionalOffersEnum = typeof SubscriptionsGetInstanceFieldsSubscriptionPromotionalOffersEnum[keyof typeof SubscriptionsGetInstanceFieldsSubscriptionPromotionalOffersEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsSubscriptionOfferCodesEnum = {
    Name: 'name',
    CustomerEligibilities: 'customerEligibilities',
    OfferEligibility: 'offerEligibility',
    Duration: 'duration',
    OfferMode: 'offerMode',
    NumberOfPeriods: 'numberOfPeriods',
    TotalNumberOfCodes: 'totalNumberOfCodes',
    Active: 'active',
    Subscription: 'subscription',
    OneTimeUseCodes: 'oneTimeUseCodes',
    CustomCodes: 'customCodes',
    Prices: 'prices'
} as const;
export type SubscriptionsGetInstanceFieldsSubscriptionOfferCodesEnum = typeof SubscriptionsGetInstanceFieldsSubscriptionOfferCodesEnum[keyof typeof SubscriptionsGetInstanceFieldsSubscriptionOfferCodesEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsSubscriptionPricesEnum = {
    StartDate: 'startDate',
    Preserved: 'preserved',
    Territory: 'territory',
    SubscriptionPricePoint: 'subscriptionPricePoint'
} as const;
export type SubscriptionsGetInstanceFieldsSubscriptionPricesEnum = typeof SubscriptionsGetInstanceFieldsSubscriptionPricesEnum[keyof typeof SubscriptionsGetInstanceFieldsSubscriptionPricesEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsPromotedPurchasesEnum = {
    VisibleForAllUsers: 'visibleForAllUsers',
    Enabled: 'enabled',
    State: 'state',
    InAppPurchaseV2: 'inAppPurchaseV2',
    Subscription: 'subscription'
} as const;
export type SubscriptionsGetInstanceFieldsPromotedPurchasesEnum = typeof SubscriptionsGetInstanceFieldsPromotedPurchasesEnum[keyof typeof SubscriptionsGetInstanceFieldsPromotedPurchasesEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsSubscriptionAvailabilitiesEnum = {
    AvailableInNewTerritories: 'availableInNewTerritories',
    AvailableTerritories: 'availableTerritories'
} as const;
export type SubscriptionsGetInstanceFieldsSubscriptionAvailabilitiesEnum = typeof SubscriptionsGetInstanceFieldsSubscriptionAvailabilitiesEnum[keyof typeof SubscriptionsGetInstanceFieldsSubscriptionAvailabilitiesEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsWinBackOffersEnum = {
    ReferenceName: 'referenceName',
    OfferId: 'offerId',
    Duration: 'duration',
    OfferMode: 'offerMode',
    PeriodCount: 'periodCount',
    CustomerEligibilityPaidSubscriptionDurationInMonths: 'customerEligibilityPaidSubscriptionDurationInMonths',
    CustomerEligibilityTimeSinceLastSubscribedInMonths: 'customerEligibilityTimeSinceLastSubscribedInMonths',
    CustomerEligibilityWaitBetweenOffersInMonths: 'customerEligibilityWaitBetweenOffersInMonths',
    StartDate: 'startDate',
    EndDate: 'endDate',
    Priority: 'priority',
    PromotionIntent: 'promotionIntent',
    Prices: 'prices'
} as const;
export type SubscriptionsGetInstanceFieldsWinBackOffersEnum = typeof SubscriptionsGetInstanceFieldsWinBackOffersEnum[keyof typeof SubscriptionsGetInstanceFieldsWinBackOffersEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceFieldsSubscriptionImagesEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    SourceFileChecksum: 'sourceFileChecksum',
    AssetToken: 'assetToken',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    State: 'state',
    Subscription: 'subscription'
} as const;
export type SubscriptionsGetInstanceFieldsSubscriptionImagesEnum = typeof SubscriptionsGetInstanceFieldsSubscriptionImagesEnum[keyof typeof SubscriptionsGetInstanceFieldsSubscriptionImagesEnum];
/**
 * @export
 */
export const SubscriptionsGetInstanceIncludeEnum = {
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type SubscriptionsGetInstanceIncludeEnum = typeof SubscriptionsGetInstanceIncludeEnum[keyof typeof SubscriptionsGetInstanceIncludeEnum];
/**
 * @export
 */
export const SubscriptionsImagesGetToManyRelatedFieldsSubscriptionImagesEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    SourceFileChecksum: 'sourceFileChecksum',
    AssetToken: 'assetToken',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    State: 'state',
    Subscription: 'subscription'
} as const;
export type SubscriptionsImagesGetToManyRelatedFieldsSubscriptionImagesEnum = typeof SubscriptionsImagesGetToManyRelatedFieldsSubscriptionImagesEnum[keyof typeof SubscriptionsImagesGetToManyRelatedFieldsSubscriptionImagesEnum];
/**
 * @export
 */
export const SubscriptionsImagesGetToManyRelatedFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type SubscriptionsImagesGetToManyRelatedFieldsSubscriptionsEnum = typeof SubscriptionsImagesGetToManyRelatedFieldsSubscriptionsEnum[keyof typeof SubscriptionsImagesGetToManyRelatedFieldsSubscriptionsEnum];
/**
 * @export
 */
export const SubscriptionsImagesGetToManyRelatedIncludeEnum = {
    Subscription: 'subscription'
} as const;
export type SubscriptionsImagesGetToManyRelatedIncludeEnum = typeof SubscriptionsImagesGetToManyRelatedIncludeEnum[keyof typeof SubscriptionsImagesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum = {
    StartDate: 'startDate',
    EndDate: 'endDate',
    Duration: 'duration',
    OfferMode: 'offerMode',
    NumberOfPeriods: 'numberOfPeriods',
    Subscription: 'subscription',
    Territory: 'territory',
    SubscriptionPricePoint: 'subscriptionPricePoint'
} as const;
export type SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum = typeof SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum[keyof typeof SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum];
/**
 * @export
 */
export const SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionsEnum = typeof SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionsEnum[keyof typeof SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionsEnum];
/**
 * @export
 */
export const SubscriptionsIntroductoryOffersGetToManyRelatedFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type SubscriptionsIntroductoryOffersGetToManyRelatedFieldsTerritoriesEnum = typeof SubscriptionsIntroductoryOffersGetToManyRelatedFieldsTerritoriesEnum[keyof typeof SubscriptionsIntroductoryOffersGetToManyRelatedFieldsTerritoriesEnum];
/**
 * @export
 */
export const SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionPricePointsEnum = {
    CustomerPrice: 'customerPrice',
    Proceeds: 'proceeds',
    ProceedsYear2: 'proceedsYear2',
    Territory: 'territory',
    Equalizations: 'equalizations'
} as const;
export type SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionPricePointsEnum = typeof SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionPricePointsEnum[keyof typeof SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionPricePointsEnum];
/**
 * @export
 */
export const SubscriptionsIntroductoryOffersGetToManyRelatedIncludeEnum = {
    Subscription: 'subscription',
    Territory: 'territory',
    SubscriptionPricePoint: 'subscriptionPricePoint'
} as const;
export type SubscriptionsIntroductoryOffersGetToManyRelatedIncludeEnum = typeof SubscriptionsIntroductoryOffersGetToManyRelatedIncludeEnum[keyof typeof SubscriptionsIntroductoryOffersGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodesEnum = {
    Name: 'name',
    CustomerEligibilities: 'customerEligibilities',
    OfferEligibility: 'offerEligibility',
    Duration: 'duration',
    OfferMode: 'offerMode',
    NumberOfPeriods: 'numberOfPeriods',
    TotalNumberOfCodes: 'totalNumberOfCodes',
    Active: 'active',
    Subscription: 'subscription',
    OneTimeUseCodes: 'oneTimeUseCodes',
    CustomCodes: 'customCodes',
    Prices: 'prices'
} as const;
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodesEnum = typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodesEnum[keyof typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodesEnum];
/**
 * @export
 */
export const SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionsEnum = typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionsEnum[keyof typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionsEnum];
/**
 * @export
 */
export const SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodesEnum = {
    NumberOfCodes: 'numberOfCodes',
    CreatedDate: 'createdDate',
    ExpirationDate: 'expirationDate',
    Active: 'active',
    OfferCode: 'offerCode',
    Values: 'values'
} as const;
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodesEnum = typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodesEnum[keyof typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodesEnum];
/**
 * @export
 */
export const SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeCustomCodesEnum = {
    CustomCode: 'customCode',
    NumberOfCodes: 'numberOfCodes',
    CreatedDate: 'createdDate',
    ExpirationDate: 'expirationDate',
    Active: 'active',
    OfferCode: 'offerCode'
} as const;
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeCustomCodesEnum = typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeCustomCodesEnum[keyof typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeCustomCodesEnum];
/**
 * @export
 */
export const SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodePricesEnum = {
    Territory: 'territory',
    SubscriptionPricePoint: 'subscriptionPricePoint'
} as const;
export type SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodePricesEnum = typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodePricesEnum[keyof typeof SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodePricesEnum];
/**
 * @export
 */
export const SubscriptionsOfferCodesGetToManyRelatedIncludeEnum = {
    Subscription: 'subscription',
    OneTimeUseCodes: 'oneTimeUseCodes',
    CustomCodes: 'customCodes',
    Prices: 'prices'
} as const;
export type SubscriptionsOfferCodesGetToManyRelatedIncludeEnum = typeof SubscriptionsOfferCodesGetToManyRelatedIncludeEnum[keyof typeof SubscriptionsOfferCodesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsPricePointsGetToManyRelatedFieldsSubscriptionPricePointsEnum = {
    CustomerPrice: 'customerPrice',
    Proceeds: 'proceeds',
    ProceedsYear2: 'proceedsYear2',
    Territory: 'territory',
    Equalizations: 'equalizations'
} as const;
export type SubscriptionsPricePointsGetToManyRelatedFieldsSubscriptionPricePointsEnum = typeof SubscriptionsPricePointsGetToManyRelatedFieldsSubscriptionPricePointsEnum[keyof typeof SubscriptionsPricePointsGetToManyRelatedFieldsSubscriptionPricePointsEnum];
/**
 * @export
 */
export const SubscriptionsPricePointsGetToManyRelatedFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type SubscriptionsPricePointsGetToManyRelatedFieldsTerritoriesEnum = typeof SubscriptionsPricePointsGetToManyRelatedFieldsTerritoriesEnum[keyof typeof SubscriptionsPricePointsGetToManyRelatedFieldsTerritoriesEnum];
/**
 * @export
 */
export const SubscriptionsPricePointsGetToManyRelatedIncludeEnum = {
    Territory: 'territory'
} as const;
export type SubscriptionsPricePointsGetToManyRelatedIncludeEnum = typeof SubscriptionsPricePointsGetToManyRelatedIncludeEnum[keyof typeof SubscriptionsPricePointsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricesEnum = {
    StartDate: 'startDate',
    Preserved: 'preserved',
    Territory: 'territory',
    SubscriptionPricePoint: 'subscriptionPricePoint'
} as const;
export type SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricesEnum = typeof SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricesEnum[keyof typeof SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricesEnum];
/**
 * @export
 */
export const SubscriptionsPricesGetToManyRelatedFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type SubscriptionsPricesGetToManyRelatedFieldsTerritoriesEnum = typeof SubscriptionsPricesGetToManyRelatedFieldsTerritoriesEnum[keyof typeof SubscriptionsPricesGetToManyRelatedFieldsTerritoriesEnum];
/**
 * @export
 */
export const SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricePointsEnum = {
    CustomerPrice: 'customerPrice',
    Proceeds: 'proceeds',
    ProceedsYear2: 'proceedsYear2',
    Territory: 'territory',
    Equalizations: 'equalizations'
} as const;
export type SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricePointsEnum = typeof SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricePointsEnum[keyof typeof SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricePointsEnum];
/**
 * @export
 */
export const SubscriptionsPricesGetToManyRelatedIncludeEnum = {
    Territory: 'territory',
    SubscriptionPricePoint: 'subscriptionPricePoint'
} as const;
export type SubscriptionsPricesGetToManyRelatedIncludeEnum = typeof SubscriptionsPricesGetToManyRelatedIncludeEnum[keyof typeof SubscriptionsPricesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchasesEnum = {
    VisibleForAllUsers: 'visibleForAllUsers',
    Enabled: 'enabled',
    State: 'state',
    InAppPurchaseV2: 'inAppPurchaseV2',
    Subscription: 'subscription'
} as const;
export type SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchasesEnum = typeof SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchasesEnum[keyof typeof SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchasesEnum];
/**
 * @export
 */
export const SubscriptionsPromotedPurchaseGetToOneRelatedFieldsInAppPurchasesEnum = {
    Name: 'name',
    ProductId: 'productId',
    InAppPurchaseType: 'inAppPurchaseType',
    State: 'state',
    ReviewNote: 'reviewNote',
    FamilySharable: 'familySharable',
    ContentHosting: 'contentHosting',
    InAppPurchaseLocalizations: 'inAppPurchaseLocalizations',
    PricePoints: 'pricePoints',
    Content: 'content',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    PromotedPurchase: 'promotedPurchase',
    IapPriceSchedule: 'iapPriceSchedule',
    InAppPurchaseAvailability: 'inAppPurchaseAvailability',
    Images: 'images'
} as const;
export type SubscriptionsPromotedPurchaseGetToOneRelatedFieldsInAppPurchasesEnum = typeof SubscriptionsPromotedPurchaseGetToOneRelatedFieldsInAppPurchasesEnum[keyof typeof SubscriptionsPromotedPurchaseGetToOneRelatedFieldsInAppPurchasesEnum];
/**
 * @export
 */
export const SubscriptionsPromotedPurchaseGetToOneRelatedFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type SubscriptionsPromotedPurchaseGetToOneRelatedFieldsSubscriptionsEnum = typeof SubscriptionsPromotedPurchaseGetToOneRelatedFieldsSubscriptionsEnum[keyof typeof SubscriptionsPromotedPurchaseGetToOneRelatedFieldsSubscriptionsEnum];
/**
 * @export
 */
export const SubscriptionsPromotedPurchaseGetToOneRelatedIncludeEnum = {
    InAppPurchaseV2: 'inAppPurchaseV2',
    Subscription: 'subscription'
} as const;
export type SubscriptionsPromotedPurchaseGetToOneRelatedIncludeEnum = typeof SubscriptionsPromotedPurchaseGetToOneRelatedIncludeEnum[keyof typeof SubscriptionsPromotedPurchaseGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum = {
    Name: 'name',
    OfferCode: 'offerCode',
    Duration: 'duration',
    OfferMode: 'offerMode',
    NumberOfPeriods: 'numberOfPeriods',
    Subscription: 'subscription',
    Prices: 'prices'
} as const;
export type SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum = typeof SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum[keyof typeof SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum];
/**
 * @export
 */
export const SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionsEnum = typeof SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionsEnum[keyof typeof SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionsEnum];
/**
 * @export
 */
export const SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOfferPricesEnum = {
    Territory: 'territory',
    SubscriptionPricePoint: 'subscriptionPricePoint'
} as const;
export type SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOfferPricesEnum = typeof SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOfferPricesEnum[keyof typeof SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOfferPricesEnum];
/**
 * @export
 */
export const SubscriptionsPromotionalOffersGetToManyRelatedIncludeEnum = {
    Subscription: 'subscription',
    Prices: 'prices'
} as const;
export type SubscriptionsPromotionalOffersGetToManyRelatedIncludeEnum = typeof SubscriptionsPromotionalOffersGetToManyRelatedIncludeEnum[keyof typeof SubscriptionsPromotionalOffersGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsSubscriptionAvailabilitiesEnum = {
    AvailableInNewTerritories: 'availableInNewTerritories',
    AvailableTerritories: 'availableTerritories'
} as const;
export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsSubscriptionAvailabilitiesEnum = typeof SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsSubscriptionAvailabilitiesEnum[keyof typeof SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsSubscriptionAvailabilitiesEnum];
/**
 * @export
 */
export const SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsTerritoriesEnum = typeof SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsTerritoriesEnum[keyof typeof SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsTerritoriesEnum];
/**
 * @export
 */
export const SubscriptionsSubscriptionAvailabilityGetToOneRelatedIncludeEnum = {
    AvailableTerritories: 'availableTerritories'
} as const;
export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedIncludeEnum = typeof SubscriptionsSubscriptionAvailabilityGetToOneRelatedIncludeEnum[keyof typeof SubscriptionsSubscriptionAvailabilityGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionLocalizationsEnum = {
    Name: 'name',
    Locale: 'locale',
    Description: 'description',
    State: 'state',
    Subscription: 'subscription'
} as const;
export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionLocalizationsEnum = typeof SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionLocalizationsEnum[keyof typeof SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionLocalizationsEnum];
/**
 * @export
 */
export const SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionsEnum = {
    Name: 'name',
    ProductId: 'productId',
    FamilySharable: 'familySharable',
    State: 'state',
    SubscriptionPeriod: 'subscriptionPeriod',
    ReviewNote: 'reviewNote',
    GroupLevel: 'groupLevel',
    SubscriptionLocalizations: 'subscriptionLocalizations',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Group: 'group',
    IntroductoryOffers: 'introductoryOffers',
    PromotionalOffers: 'promotionalOffers',
    OfferCodes: 'offerCodes',
    Prices: 'prices',
    PricePoints: 'pricePoints',
    PromotedPurchase: 'promotedPurchase',
    SubscriptionAvailability: 'subscriptionAvailability',
    WinBackOffers: 'winBackOffers',
    Images: 'images'
} as const;
export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionsEnum = typeof SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionsEnum[keyof typeof SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionsEnum];
/**
 * @export
 */
export const SubscriptionsSubscriptionLocalizationsGetToManyRelatedIncludeEnum = {
    Subscription: 'subscription'
} as const;
export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedIncludeEnum = typeof SubscriptionsSubscriptionLocalizationsGetToManyRelatedIncludeEnum[keyof typeof SubscriptionsSubscriptionLocalizationsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOffersEnum = {
    ReferenceName: 'referenceName',
    OfferId: 'offerId',
    Duration: 'duration',
    OfferMode: 'offerMode',
    PeriodCount: 'periodCount',
    CustomerEligibilityPaidSubscriptionDurationInMonths: 'customerEligibilityPaidSubscriptionDurationInMonths',
    CustomerEligibilityTimeSinceLastSubscribedInMonths: 'customerEligibilityTimeSinceLastSubscribedInMonths',
    CustomerEligibilityWaitBetweenOffersInMonths: 'customerEligibilityWaitBetweenOffersInMonths',
    StartDate: 'startDate',
    EndDate: 'endDate',
    Priority: 'priority',
    PromotionIntent: 'promotionIntent',
    Prices: 'prices'
} as const;
export type SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOffersEnum = typeof SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOffersEnum[keyof typeof SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOffersEnum];
/**
 * @export
 */
export const SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOfferPricesEnum = {
    Territory: 'territory',
    SubscriptionPricePoint: 'subscriptionPricePoint'
} as const;
export type SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOfferPricesEnum = typeof SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOfferPricesEnum[keyof typeof SubscriptionsWinBackOffersGetToManyRelatedFieldsWinBackOfferPricesEnum];
/**
 * @export
 */
export const SubscriptionsWinBackOffersGetToManyRelatedIncludeEnum = {
    Prices: 'prices'
} as const;
export type SubscriptionsWinBackOffersGetToManyRelatedIncludeEnum = typeof SubscriptionsWinBackOffersGetToManyRelatedIncludeEnum[keyof typeof SubscriptionsWinBackOffersGetToManyRelatedIncludeEnum];
