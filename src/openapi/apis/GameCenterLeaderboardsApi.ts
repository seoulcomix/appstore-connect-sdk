/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterLeaderboardCreateRequest,
  GameCenterLeaderboardGroupLeaderboardLinkageRequest,
  GameCenterLeaderboardGroupLeaderboardLinkageResponse,
  GameCenterLeaderboardLocalizationsResponse,
  GameCenterLeaderboardReleasesResponse,
  GameCenterLeaderboardResponse,
  GameCenterLeaderboardUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterLeaderboardCreateRequestFromJSON,
    GameCenterLeaderboardCreateRequestToJSON,
    GameCenterLeaderboardGroupLeaderboardLinkageRequestFromJSON,
    GameCenterLeaderboardGroupLeaderboardLinkageRequestToJSON,
    GameCenterLeaderboardGroupLeaderboardLinkageResponseFromJSON,
    GameCenterLeaderboardGroupLeaderboardLinkageResponseToJSON,
    GameCenterLeaderboardLocalizationsResponseFromJSON,
    GameCenterLeaderboardLocalizationsResponseToJSON,
    GameCenterLeaderboardReleasesResponseFromJSON,
    GameCenterLeaderboardReleasesResponseToJSON,
    GameCenterLeaderboardResponseFromJSON,
    GameCenterLeaderboardResponseToJSON,
    GameCenterLeaderboardUpdateRequestFromJSON,
    GameCenterLeaderboardUpdateRequestToJSON,
} from '../models';

export interface GameCenterLeaderboardsCreateInstanceRequest {
    gameCenterLeaderboardCreateRequest: GameCenterLeaderboardCreateRequest;
}

export interface GameCenterLeaderboardsDeleteInstanceRequest {
    id: string;
}

export interface GameCenterLeaderboardsGetInstanceRequest {
    id: string;
    fieldsGameCenterLeaderboards?: Array<GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardLocalizations?: Array<GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardLocalizationsEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardReleasesEnum>;
    include?: Array<GameCenterLeaderboardsGetInstanceIncludeEnum>;
    limitGameCenterLeaderboardSets?: number;
    limitLocalizations?: number;
    limitReleases?: number;
}

export interface GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedRequest {
    id: string;
    fieldsGameCenterLeaderboards?: Array<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterLeaderboardLocalizations?: Array<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardLocalizationsEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    include?: Array<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedIncludeEnum>;
    limitGameCenterLeaderboardSets?: number;
    limitLocalizations?: number;
    limitReleases?: number;
}

export interface GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipRequest {
    id: string;
}

export interface GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipRequest {
    id: string;
    gameCenterLeaderboardGroupLeaderboardLinkageRequest: GameCenterLeaderboardGroupLeaderboardLinkageRequest;
}

export interface GameCenterLeaderboardsLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsGameCenterLeaderboardLocalizations?: Array<GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardImages?: Array<GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardImagesEnum>;
    limit?: number;
    include?: Array<GameCenterLeaderboardsLocalizationsGetToManyRelatedIncludeEnum>;
}

export interface GameCenterLeaderboardsReleasesGetToManyRelatedRequest {
    id: string;
    filterLive?: Array<string>;
    filterGameCenterDetail?: Array<string>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    fieldsGameCenterDetails?: Array<GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    limit?: number;
    include?: Array<GameCenterLeaderboardsReleasesGetToManyRelatedIncludeEnum>;
}

export interface GameCenterLeaderboardsUpdateInstanceRequest {
    id: string;
    gameCenterLeaderboardUpdateRequest: GameCenterLeaderboardUpdateRequest;
}

/**
 * 
 */
export class GameCenterLeaderboardsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterLeaderboardsCreateInstanceRaw(requestParameters: GameCenterLeaderboardsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardResponse>> {
        if (requestParameters.gameCenterLeaderboardCreateRequest === null || requestParameters.gameCenterLeaderboardCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardCreateRequest','Required parameter requestParameters.gameCenterLeaderboardCreateRequest was null or undefined when calling gameCenterLeaderboardsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardCreateRequestToJSON(requestParameters.gameCenterLeaderboardCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardsCreateInstance(requestParameters: GameCenterLeaderboardsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardResponse> {
        const response = await this.gameCenterLeaderboardsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardsDeleteInstanceRaw(requestParameters: GameCenterLeaderboardsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterLeaderboardsDeleteInstance(requestParameters: GameCenterLeaderboardsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterLeaderboardsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterLeaderboardsGetInstanceRaw(requestParameters: GameCenterLeaderboardsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardLocalizations) {
            queryParameters['fields[gameCenterLeaderboardLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardsGetInstance(requestParameters: GameCenterLeaderboardsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardResponse> {
        const response = await this.gameCenterLeaderboardsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardsGroupLeaderboardGetToOneRelatedRaw(requestParameters: GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardsGroupLeaderboardGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardLocalizations) {
            queryParameters['fields[gameCenterLeaderboardLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboards/{id}/groupLeaderboard`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardsGroupLeaderboardGetToOneRelated(requestParameters: GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardResponse> {
        const response = await this.gameCenterLeaderboardsGroupLeaderboardGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipRaw(requestParameters: GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardGroupLeaderboardLinkageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardsGroupLeaderboardGetToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardGroupLeaderboardLinkageResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardsGroupLeaderboardGetToOneRelationship(requestParameters: GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardGroupLeaderboardLinkageResponse> {
        const response = await this.gameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipRaw(requestParameters: GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship.');
        }

        if (requestParameters.gameCenterLeaderboardGroupLeaderboardLinkageRequest === null || requestParameters.gameCenterLeaderboardGroupLeaderboardLinkageRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardGroupLeaderboardLinkageRequest','Required parameter requestParameters.gameCenterLeaderboardGroupLeaderboardLinkageRequest was null or undefined when calling gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardGroupLeaderboardLinkageRequestToJSON(requestParameters.gameCenterLeaderboardGroupLeaderboardLinkageRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship(requestParameters: GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterLeaderboardsLocalizationsGetToManyRelatedRaw(requestParameters: GameCenterLeaderboardsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardsLocalizationsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterLeaderboardLocalizations) {
            queryParameters['fields[gameCenterLeaderboardLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardImages) {
            queryParameters['fields[gameCenterLeaderboardImages]'] = requestParameters.fieldsGameCenterLeaderboardImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboards/{id}/localizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardLocalizationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardsLocalizationsGetToManyRelated(requestParameters: GameCenterLeaderboardsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardLocalizationsResponse> {
        const response = await this.gameCenterLeaderboardsLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardsReleasesGetToManyRelatedRaw(requestParameters: GameCenterLeaderboardsReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardReleasesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardsReleasesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterLive) {
            queryParameters['filter[live]'] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterGameCenterDetail) {
            queryParameters['filter[gameCenterDetail]'] = requestParameters.filterGameCenterDetail.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboards/{id}/releases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardReleasesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardsReleasesGetToManyRelated(requestParameters: GameCenterLeaderboardsReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardReleasesResponse> {
        const response = await this.gameCenterLeaderboardsReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardsUpdateInstanceRaw(requestParameters: GameCenterLeaderboardsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardsUpdateInstance.');
        }

        if (requestParameters.gameCenterLeaderboardUpdateRequest === null || requestParameters.gameCenterLeaderboardUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardUpdateRequest','Required parameter requestParameters.gameCenterLeaderboardUpdateRequest was null or undefined when calling gameCenterLeaderboardsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardUpdateRequestToJSON(requestParameters.gameCenterLeaderboardUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardsUpdateInstance(requestParameters: GameCenterLeaderboardsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardResponse> {
        const response = await this.gameCenterLeaderboardsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardsEnum = typeof GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    FormatterOverride: 'formatterOverride',
    FormatterSuffix: 'formatterSuffix',
    FormatterSuffixSingular: 'formatterSuffixSingular',
    GameCenterLeaderboard: 'gameCenterLeaderboard',
    GameCenterLeaderboardImage: 'gameCenterLeaderboardImage'
} as const;
export type GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardLocalizationsEnum = typeof GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardLocalizationsEnum[keyof typeof GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardLocalizationsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardReleasesEnum = typeof GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardReleasesEnum[keyof typeof GameCenterLeaderboardsGetInstanceFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGetInstanceIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardsGetInstanceIncludeEnum = typeof GameCenterLeaderboardsGetInstanceIncludeEnum[keyof typeof GameCenterLeaderboardsGetInstanceIncludeEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterDetailsEnum = typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterGroupsEnum = {
    ReferenceName: 'referenceName',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements'
} as const;
export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterGroupsEnum = typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = {
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    FormatterOverride: 'formatterOverride',
    FormatterSuffix: 'formatterSuffix',
    FormatterSuffixSingular: 'formatterSuffixSingular',
    GameCenterLeaderboard: 'gameCenterLeaderboard',
    GameCenterLeaderboardImage: 'gameCenterLeaderboardImage'
} as const;
export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardLocalizationsEnum = typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardLocalizationsEnum[keyof typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardLocalizationsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum = typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum[keyof typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedIncludeEnum = typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedIncludeEnum[keyof typeof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = {
    Locale: 'locale',
    Name: 'name',
    FormatterOverride: 'formatterOverride',
    FormatterSuffix: 'formatterSuffix',
    FormatterSuffixSingular: 'formatterSuffixSingular',
    GameCenterLeaderboard: 'gameCenterLeaderboard',
    GameCenterLeaderboardImage: 'gameCenterLeaderboardImage'
} as const;
export type GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = typeof GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum[keyof typeof GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardImagesEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    AssetDeliveryState: 'assetDeliveryState',
    GameCenterLeaderboardLocalization: 'gameCenterLeaderboardLocalization'
} as const;
export type GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardImagesEnum = typeof GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardImagesEnum[keyof typeof GameCenterLeaderboardsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardImagesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsLocalizationsGetToManyRelatedIncludeEnum = {
    GameCenterLeaderboard: 'gameCenterLeaderboard',
    GameCenterLeaderboardImage: 'gameCenterLeaderboardImage'
} as const;
export type GameCenterLeaderboardsLocalizationsGetToManyRelatedIncludeEnum = typeof GameCenterLeaderboardsLocalizationsGetToManyRelatedIncludeEnum[keyof typeof GameCenterLeaderboardsLocalizationsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    Live: 'live',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = typeof GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum[keyof typeof GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    App: 'app',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterAchievements: 'gameCenterAchievements',
    DefaultLeaderboard: 'defaultLeaderboard',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    AchievementReleases: 'achievementReleases',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    DefaultFormatter: 'defaultFormatter',
    ReferenceName: 'referenceName',
    VendorIdentifier: 'vendorIdentifier',
    SubmissionType: 'submissionType',
    ScoreSortType: 'scoreSortType',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreRangeEnd: 'scoreRangeEnd',
    RecurrenceStartDate: 'recurrenceStartDate',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupLeaderboard: 'groupLeaderboard',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterLeaderboardsReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardsReleasesGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard'
} as const;
export type GameCenterLeaderboardsReleasesGetToManyRelatedIncludeEnum = typeof GameCenterLeaderboardsReleasesGetToManyRelatedIncludeEnum[keyof typeof GameCenterLeaderboardsReleasesGetToManyRelatedIncludeEnum];
