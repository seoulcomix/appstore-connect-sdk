/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ReviewSubmissionCreateRequest,
  ReviewSubmissionItemsResponse,
  ReviewSubmissionResponse,
  ReviewSubmissionUpdateRequest,
  ReviewSubmissionsResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReviewSubmissionCreateRequestFromJSON,
    ReviewSubmissionCreateRequestToJSON,
    ReviewSubmissionItemsResponseFromJSON,
    ReviewSubmissionItemsResponseToJSON,
    ReviewSubmissionResponseFromJSON,
    ReviewSubmissionResponseToJSON,
    ReviewSubmissionUpdateRequestFromJSON,
    ReviewSubmissionUpdateRequestToJSON,
    ReviewSubmissionsResponseFromJSON,
    ReviewSubmissionsResponseToJSON,
} from '../models';

export interface ReviewSubmissionsCreateInstanceRequest {
    reviewSubmissionCreateRequest: ReviewSubmissionCreateRequest;
}

export interface ReviewSubmissionsGetCollectionRequest {
    filterApp: Array<string>;
    filterPlatform?: Array<ReviewSubmissionsGetCollectionFilterPlatformEnum>;
    filterState?: Array<ReviewSubmissionsGetCollectionFilterStateEnum>;
    fieldsReviewSubmissions?: Array<ReviewSubmissionsGetCollectionFieldsReviewSubmissionsEnum>;
    fieldsReviewSubmissionItems?: Array<ReviewSubmissionsGetCollectionFieldsReviewSubmissionItemsEnum>;
    limit?: number;
    include?: Array<ReviewSubmissionsGetCollectionIncludeEnum>;
    limitItems?: number;
}

export interface ReviewSubmissionsGetInstanceRequest {
    id: string;
    fieldsReviewSubmissions?: Array<ReviewSubmissionsGetInstanceFieldsReviewSubmissionsEnum>;
    fieldsReviewSubmissionItems?: Array<ReviewSubmissionsGetInstanceFieldsReviewSubmissionItemsEnum>;
    include?: Array<ReviewSubmissionsGetInstanceIncludeEnum>;
    limitItems?: number;
}

export interface ReviewSubmissionsItemsGetToManyRelatedRequest {
    id: string;
    fieldsReviewSubmissionItems?: Array<ReviewSubmissionsItemsGetToManyRelatedFieldsReviewSubmissionItemsEnum>;
    fieldsAppStoreVersions?: Array<ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionsEnum>;
    fieldsAppCustomProductPageVersions?: Array<ReviewSubmissionsItemsGetToManyRelatedFieldsAppCustomProductPageVersionsEnum>;
    fieldsAppStoreVersionExperiments?: Array<ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsAppEvents?: Array<ReviewSubmissionsItemsGetToManyRelatedFieldsAppEventsEnum>;
    limit?: number;
    include?: Array<ReviewSubmissionsItemsGetToManyRelatedIncludeEnum>;
}

export interface ReviewSubmissionsUpdateInstanceRequest {
    id: string;
    reviewSubmissionUpdateRequest: ReviewSubmissionUpdateRequest;
}

/**
 * 
 */
export class ReviewSubmissionsApi extends runtime.BaseAPI {

    /**
     */
    async reviewSubmissionsCreateInstanceRaw(requestParameters: ReviewSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewSubmissionResponse>> {
        if (requestParameters.reviewSubmissionCreateRequest === null || requestParameters.reviewSubmissionCreateRequest === undefined) {
            throw new runtime.RequiredError('reviewSubmissionCreateRequest','Required parameter requestParameters.reviewSubmissionCreateRequest was null or undefined when calling reviewSubmissionsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/reviewSubmissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewSubmissionCreateRequestToJSON(requestParameters.reviewSubmissionCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewSubmissionResponseFromJSON(jsonValue));
    }

    /**
     */
    async reviewSubmissionsCreateInstance(requestParameters: ReviewSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewSubmissionResponse> {
        const response = await this.reviewSubmissionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reviewSubmissionsGetCollectionRaw(requestParameters: ReviewSubmissionsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewSubmissionsResponse>> {
        if (requestParameters.filterApp === null || requestParameters.filterApp === undefined) {
            throw new runtime.RequiredError('filterApp','Required parameter requestParameters.filterApp was null or undefined when calling reviewSubmissionsGetCollection.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterState) {
            queryParameters['filter[state]'] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsReviewSubmissionItems) {
            queryParameters['fields[reviewSubmissionItems]'] = requestParameters.fieldsReviewSubmissionItems.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitItems !== undefined) {
            queryParameters['limit[items]'] = requestParameters.limitItems;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/reviewSubmissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewSubmissionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async reviewSubmissionsGetCollection(requestParameters: ReviewSubmissionsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewSubmissionsResponse> {
        const response = await this.reviewSubmissionsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reviewSubmissionsGetInstanceRaw(requestParameters: ReviewSubmissionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewSubmissionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewSubmissionsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsReviewSubmissionItems) {
            queryParameters['fields[reviewSubmissionItems]'] = requestParameters.fieldsReviewSubmissionItems.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitItems !== undefined) {
            queryParameters['limit[items]'] = requestParameters.limitItems;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/reviewSubmissions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewSubmissionResponseFromJSON(jsonValue));
    }

    /**
     */
    async reviewSubmissionsGetInstance(requestParameters: ReviewSubmissionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewSubmissionResponse> {
        const response = await this.reviewSubmissionsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reviewSubmissionsItemsGetToManyRelatedRaw(requestParameters: ReviewSubmissionsItemsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewSubmissionItemsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewSubmissionsItemsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsReviewSubmissionItems) {
            queryParameters['fields[reviewSubmissionItems]'] = requestParameters.fieldsReviewSubmissionItems.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppCustomProductPageVersions) {
            queryParameters['fields[appCustomProductPageVersions]'] = requestParameters.fieldsAppCustomProductPageVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/reviewSubmissions/{id}/items`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewSubmissionItemsResponseFromJSON(jsonValue));
    }

    /**
     */
    async reviewSubmissionsItemsGetToManyRelated(requestParameters: ReviewSubmissionsItemsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewSubmissionItemsResponse> {
        const response = await this.reviewSubmissionsItemsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reviewSubmissionsUpdateInstanceRaw(requestParameters: ReviewSubmissionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewSubmissionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewSubmissionsUpdateInstance.');
        }

        if (requestParameters.reviewSubmissionUpdateRequest === null || requestParameters.reviewSubmissionUpdateRequest === undefined) {
            throw new runtime.RequiredError('reviewSubmissionUpdateRequest','Required parameter requestParameters.reviewSubmissionUpdateRequest was null or undefined when calling reviewSubmissionsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/reviewSubmissions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewSubmissionUpdateRequestToJSON(requestParameters.reviewSubmissionUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewSubmissionResponseFromJSON(jsonValue));
    }

    /**
     */
    async reviewSubmissionsUpdateInstance(requestParameters: ReviewSubmissionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewSubmissionResponse> {
        const response = await this.reviewSubmissionsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ReviewSubmissionsGetCollectionFilterPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type ReviewSubmissionsGetCollectionFilterPlatformEnum = typeof ReviewSubmissionsGetCollectionFilterPlatformEnum[keyof typeof ReviewSubmissionsGetCollectionFilterPlatformEnum];
/**
 * @export
 */
export const ReviewSubmissionsGetCollectionFilterStateEnum = {
    ReadyForReview: 'READY_FOR_REVIEW',
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    UnresolvedIssues: 'UNRESOLVED_ISSUES',
    Canceling: 'CANCELING',
    Completing: 'COMPLETING',
    Complete: 'COMPLETE'
} as const;
export type ReviewSubmissionsGetCollectionFilterStateEnum = typeof ReviewSubmissionsGetCollectionFilterStateEnum[keyof typeof ReviewSubmissionsGetCollectionFilterStateEnum];
/**
 * @export
 */
export const ReviewSubmissionsGetCollectionFieldsReviewSubmissionsEnum = {
    Platform: 'platform',
    SubmittedDate: 'submittedDate',
    State: 'state',
    App: 'app',
    Items: 'items',
    AppStoreVersionForReview: 'appStoreVersionForReview',
    SubmittedByActor: 'submittedByActor',
    LastUpdatedByActor: 'lastUpdatedByActor'
} as const;
export type ReviewSubmissionsGetCollectionFieldsReviewSubmissionsEnum = typeof ReviewSubmissionsGetCollectionFieldsReviewSubmissionsEnum[keyof typeof ReviewSubmissionsGetCollectionFieldsReviewSubmissionsEnum];
/**
 * @export
 */
export const ReviewSubmissionsGetCollectionFieldsReviewSubmissionItemsEnum = {
    State: 'state',
    AppStoreVersion: 'appStoreVersion',
    AppCustomProductPageVersion: 'appCustomProductPageVersion',
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentV2: 'appStoreVersionExperimentV2',
    AppEvent: 'appEvent'
} as const;
export type ReviewSubmissionsGetCollectionFieldsReviewSubmissionItemsEnum = typeof ReviewSubmissionsGetCollectionFieldsReviewSubmissionItemsEnum[keyof typeof ReviewSubmissionsGetCollectionFieldsReviewSubmissionItemsEnum];
/**
 * @export
 */
export const ReviewSubmissionsGetCollectionIncludeEnum = {
    App: 'app',
    Items: 'items',
    AppStoreVersionForReview: 'appStoreVersionForReview',
    SubmittedByActor: 'submittedByActor',
    LastUpdatedByActor: 'lastUpdatedByActor'
} as const;
export type ReviewSubmissionsGetCollectionIncludeEnum = typeof ReviewSubmissionsGetCollectionIncludeEnum[keyof typeof ReviewSubmissionsGetCollectionIncludeEnum];
/**
 * @export
 */
export const ReviewSubmissionsGetInstanceFieldsReviewSubmissionsEnum = {
    Platform: 'platform',
    SubmittedDate: 'submittedDate',
    State: 'state',
    App: 'app',
    Items: 'items',
    AppStoreVersionForReview: 'appStoreVersionForReview',
    SubmittedByActor: 'submittedByActor',
    LastUpdatedByActor: 'lastUpdatedByActor'
} as const;
export type ReviewSubmissionsGetInstanceFieldsReviewSubmissionsEnum = typeof ReviewSubmissionsGetInstanceFieldsReviewSubmissionsEnum[keyof typeof ReviewSubmissionsGetInstanceFieldsReviewSubmissionsEnum];
/**
 * @export
 */
export const ReviewSubmissionsGetInstanceFieldsReviewSubmissionItemsEnum = {
    State: 'state',
    AppStoreVersion: 'appStoreVersion',
    AppCustomProductPageVersion: 'appCustomProductPageVersion',
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentV2: 'appStoreVersionExperimentV2',
    AppEvent: 'appEvent'
} as const;
export type ReviewSubmissionsGetInstanceFieldsReviewSubmissionItemsEnum = typeof ReviewSubmissionsGetInstanceFieldsReviewSubmissionItemsEnum[keyof typeof ReviewSubmissionsGetInstanceFieldsReviewSubmissionItemsEnum];
/**
 * @export
 */
export const ReviewSubmissionsGetInstanceIncludeEnum = {
    App: 'app',
    Items: 'items',
    AppStoreVersionForReview: 'appStoreVersionForReview',
    SubmittedByActor: 'submittedByActor',
    LastUpdatedByActor: 'lastUpdatedByActor'
} as const;
export type ReviewSubmissionsGetInstanceIncludeEnum = typeof ReviewSubmissionsGetInstanceIncludeEnum[keyof typeof ReviewSubmissionsGetInstanceIncludeEnum];
/**
 * @export
 */
export const ReviewSubmissionsItemsGetToManyRelatedFieldsReviewSubmissionItemsEnum = {
    State: 'state',
    AppStoreVersion: 'appStoreVersion',
    AppCustomProductPageVersion: 'appCustomProductPageVersion',
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentV2: 'appStoreVersionExperimentV2',
    AppEvent: 'appEvent'
} as const;
export type ReviewSubmissionsItemsGetToManyRelatedFieldsReviewSubmissionItemsEnum = typeof ReviewSubmissionsItemsGetToManyRelatedFieldsReviewSubmissionItemsEnum[keyof typeof ReviewSubmissionsItemsGetToManyRelatedFieldsReviewSubmissionItemsEnum];
/**
 * @export
 */
export const ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    Platform: 'platform',
    VersionString: 'versionString',
    AppStoreState: 'appStoreState',
    AppVersionState: 'appVersionState',
    Copyright: 'copyright',
    ReviewType: 'reviewType',
    ReleaseType: 'releaseType',
    EarliestReleaseDate: 'earliestReleaseDate',
    Downloadable: 'downloadable',
    CreatedDate: 'createdDate',
    App: 'app',
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    Build: 'build',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    GameCenterAppVersion: 'gameCenterAppVersion',
    RoutingAppCoverage: 'routingAppCoverage',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    CustomerReviews: 'customerReviews',
    AlternativeDistributionPackage: 'alternativeDistributionPackage'
} as const;
export type ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionsEnum = typeof ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionsEnum[keyof typeof ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const ReviewSubmissionsItemsGetToManyRelatedFieldsAppCustomProductPageVersionsEnum = {
    Version: 'version',
    State: 'state',
    DeepLink: 'deepLink',
    AppCustomProductPage: 'appCustomProductPage',
    AppCustomProductPageLocalizations: 'appCustomProductPageLocalizations'
} as const;
export type ReviewSubmissionsItemsGetToManyRelatedFieldsAppCustomProductPageVersionsEnum = typeof ReviewSubmissionsItemsGetToManyRelatedFieldsAppCustomProductPageVersionsEnum[keyof typeof ReviewSubmissionsItemsGetToManyRelatedFieldsAppCustomProductPageVersionsEnum];
/**
 * @export
 */
export const ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = {
    Name: 'name',
    TrafficProportion: 'trafficProportion',
    State: 'state',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    EndDate: 'endDate',
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    Platform: 'platform',
    App: 'app',
    LatestControlVersion: 'latestControlVersion',
    ControlVersions: 'controlVersions'
} as const;
export type ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = typeof ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum[keyof typeof ReviewSubmissionsItemsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const ReviewSubmissionsItemsGetToManyRelatedFieldsAppEventsEnum = {
    ReferenceName: 'referenceName',
    Badge: 'badge',
    EventState: 'eventState',
    DeepLink: 'deepLink',
    PurchaseRequirement: 'purchaseRequirement',
    PrimaryLocale: 'primaryLocale',
    Priority: 'priority',
    Purpose: 'purpose',
    TerritorySchedules: 'territorySchedules',
    ArchivedTerritorySchedules: 'archivedTerritorySchedules',
    Localizations: 'localizations'
} as const;
export type ReviewSubmissionsItemsGetToManyRelatedFieldsAppEventsEnum = typeof ReviewSubmissionsItemsGetToManyRelatedFieldsAppEventsEnum[keyof typeof ReviewSubmissionsItemsGetToManyRelatedFieldsAppEventsEnum];
/**
 * @export
 */
export const ReviewSubmissionsItemsGetToManyRelatedIncludeEnum = {
    AppStoreVersion: 'appStoreVersion',
    AppCustomProductPageVersion: 'appCustomProductPageVersion',
    AppStoreVersionExperiment: 'appStoreVersionExperiment',
    AppStoreVersionExperimentV2: 'appStoreVersionExperimentV2',
    AppEvent: 'appEvent'
} as const;
export type ReviewSubmissionsItemsGetToManyRelatedIncludeEnum = typeof ReviewSubmissionsItemsGetToManyRelatedIncludeEnum[keyof typeof ReviewSubmissionsItemsGetToManyRelatedIncludeEnum];
