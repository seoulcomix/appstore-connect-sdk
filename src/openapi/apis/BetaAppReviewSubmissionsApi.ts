/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BetaAppReviewSubmissionCreateRequest,
  BetaAppReviewSubmissionResponse,
  BetaAppReviewSubmissionsResponse,
  BuildWithoutIncludesResponse,
  ErrorResponse,
} from '../models';
import {
    BetaAppReviewSubmissionCreateRequestFromJSON,
    BetaAppReviewSubmissionCreateRequestToJSON,
    BetaAppReviewSubmissionResponseFromJSON,
    BetaAppReviewSubmissionResponseToJSON,
    BetaAppReviewSubmissionsResponseFromJSON,
    BetaAppReviewSubmissionsResponseToJSON,
    BuildWithoutIncludesResponseFromJSON,
    BuildWithoutIncludesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface BetaAppReviewSubmissionsBuildGetToOneRelatedRequest {
    id: string;
    fieldsBuilds?: Array<BetaAppReviewSubmissionsBuildGetToOneRelatedFieldsBuildsEnum>;
}

export interface BetaAppReviewSubmissionsCreateInstanceRequest {
    betaAppReviewSubmissionCreateRequest: BetaAppReviewSubmissionCreateRequest;
}

export interface BetaAppReviewSubmissionsGetCollectionRequest {
    filterBuild: Array<string>;
    filterBetaReviewState?: Array<BetaAppReviewSubmissionsGetCollectionFilterBetaReviewStateEnum>;
    fieldsBetaAppReviewSubmissions?: Array<BetaAppReviewSubmissionsGetCollectionFieldsBetaAppReviewSubmissionsEnum>;
    fieldsBuilds?: Array<BetaAppReviewSubmissionsGetCollectionFieldsBuildsEnum>;
    limit?: number;
    include?: Array<BetaAppReviewSubmissionsGetCollectionIncludeEnum>;
}

export interface BetaAppReviewSubmissionsGetInstanceRequest {
    id: string;
    fieldsBetaAppReviewSubmissions?: Array<BetaAppReviewSubmissionsGetInstanceFieldsBetaAppReviewSubmissionsEnum>;
    fieldsBuilds?: Array<BetaAppReviewSubmissionsGetInstanceFieldsBuildsEnum>;
    include?: Array<BetaAppReviewSubmissionsGetInstanceIncludeEnum>;
}

/**
 * 
 */
export class BetaAppReviewSubmissionsApi extends runtime.BaseAPI {

    /**
     */
    async betaAppReviewSubmissionsBuildGetToOneRelatedRaw(requestParameters: BetaAppReviewSubmissionsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaAppReviewSubmissionsBuildGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppReviewSubmissions/{id}/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppReviewSubmissionsBuildGetToOneRelated(requestParameters: BetaAppReviewSubmissionsBuildGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildWithoutIncludesResponse> {
        const response = await this.betaAppReviewSubmissionsBuildGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaAppReviewSubmissionsCreateInstanceRaw(requestParameters: BetaAppReviewSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppReviewSubmissionResponse>> {
        if (requestParameters.betaAppReviewSubmissionCreateRequest === null || requestParameters.betaAppReviewSubmissionCreateRequest === undefined) {
            throw new runtime.RequiredError('betaAppReviewSubmissionCreateRequest','Required parameter requestParameters.betaAppReviewSubmissionCreateRequest was null or undefined when calling betaAppReviewSubmissionsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppReviewSubmissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaAppReviewSubmissionCreateRequestToJSON(requestParameters.betaAppReviewSubmissionCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppReviewSubmissionResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppReviewSubmissionsCreateInstance(requestParameters: BetaAppReviewSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppReviewSubmissionResponse> {
        const response = await this.betaAppReviewSubmissionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaAppReviewSubmissionsGetCollectionRaw(requestParameters: BetaAppReviewSubmissionsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppReviewSubmissionsResponse>> {
        if (requestParameters.filterBuild === null || requestParameters.filterBuild === undefined) {
            throw new runtime.RequiredError('filterBuild','Required parameter requestParameters.filterBuild was null or undefined when calling betaAppReviewSubmissionsGetCollection.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterBetaReviewState) {
            queryParameters['filter[betaReviewState]'] = requestParameters.filterBetaReviewState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBuild) {
            queryParameters['filter[build]'] = requestParameters.filterBuild.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppReviewSubmissions) {
            queryParameters['fields[betaAppReviewSubmissions]'] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppReviewSubmissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppReviewSubmissionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppReviewSubmissionsGetCollection(requestParameters: BetaAppReviewSubmissionsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppReviewSubmissionsResponse> {
        const response = await this.betaAppReviewSubmissionsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaAppReviewSubmissionsGetInstanceRaw(requestParameters: BetaAppReviewSubmissionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppReviewSubmissionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaAppReviewSubmissionsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaAppReviewSubmissions) {
            queryParameters['fields[betaAppReviewSubmissions]'] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppReviewSubmissions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppReviewSubmissionResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppReviewSubmissionsGetInstance(requestParameters: BetaAppReviewSubmissionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppReviewSubmissionResponse> {
        const response = await this.betaAppReviewSubmissionsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BetaAppReviewSubmissionsBuildGetToOneRelatedFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type BetaAppReviewSubmissionsBuildGetToOneRelatedFieldsBuildsEnum = typeof BetaAppReviewSubmissionsBuildGetToOneRelatedFieldsBuildsEnum[keyof typeof BetaAppReviewSubmissionsBuildGetToOneRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const BetaAppReviewSubmissionsGetCollectionFilterBetaReviewStateEnum = {
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    Rejected: 'REJECTED',
    Approved: 'APPROVED'
} as const;
export type BetaAppReviewSubmissionsGetCollectionFilterBetaReviewStateEnum = typeof BetaAppReviewSubmissionsGetCollectionFilterBetaReviewStateEnum[keyof typeof BetaAppReviewSubmissionsGetCollectionFilterBetaReviewStateEnum];
/**
 * @export
 */
export const BetaAppReviewSubmissionsGetCollectionFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: 'betaReviewState',
    SubmittedDate: 'submittedDate',
    Build: 'build'
} as const;
export type BetaAppReviewSubmissionsGetCollectionFieldsBetaAppReviewSubmissionsEnum = typeof BetaAppReviewSubmissionsGetCollectionFieldsBetaAppReviewSubmissionsEnum[keyof typeof BetaAppReviewSubmissionsGetCollectionFieldsBetaAppReviewSubmissionsEnum];
/**
 * @export
 */
export const BetaAppReviewSubmissionsGetCollectionFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type BetaAppReviewSubmissionsGetCollectionFieldsBuildsEnum = typeof BetaAppReviewSubmissionsGetCollectionFieldsBuildsEnum[keyof typeof BetaAppReviewSubmissionsGetCollectionFieldsBuildsEnum];
/**
 * @export
 */
export const BetaAppReviewSubmissionsGetCollectionIncludeEnum = {
    Build: 'build'
} as const;
export type BetaAppReviewSubmissionsGetCollectionIncludeEnum = typeof BetaAppReviewSubmissionsGetCollectionIncludeEnum[keyof typeof BetaAppReviewSubmissionsGetCollectionIncludeEnum];
/**
 * @export
 */
export const BetaAppReviewSubmissionsGetInstanceFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: 'betaReviewState',
    SubmittedDate: 'submittedDate',
    Build: 'build'
} as const;
export type BetaAppReviewSubmissionsGetInstanceFieldsBetaAppReviewSubmissionsEnum = typeof BetaAppReviewSubmissionsGetInstanceFieldsBetaAppReviewSubmissionsEnum[keyof typeof BetaAppReviewSubmissionsGetInstanceFieldsBetaAppReviewSubmissionsEnum];
/**
 * @export
 */
export const BetaAppReviewSubmissionsGetInstanceFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type BetaAppReviewSubmissionsGetInstanceFieldsBuildsEnum = typeof BetaAppReviewSubmissionsGetInstanceFieldsBuildsEnum[keyof typeof BetaAppReviewSubmissionsGetInstanceFieldsBuildsEnum];
/**
 * @export
 */
export const BetaAppReviewSubmissionsGetInstanceIncludeEnum = {
    Build: 'build'
} as const;
export type BetaAppReviewSubmissionsGetInstanceIncludeEnum = typeof BetaAppReviewSubmissionsGetInstanceIncludeEnum[keyof typeof BetaAppReviewSubmissionsGetInstanceIncludeEnum];
