/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppWithoutIncludesResponse,
  BuildsWithoutIncludesResponse,
  ErrorResponse,
  PreReleaseVersionsResponse,
  PrereleaseVersionResponse,
} from '../models';
import {
    AppWithoutIncludesResponseFromJSON,
    AppWithoutIncludesResponseToJSON,
    BuildsWithoutIncludesResponseFromJSON,
    BuildsWithoutIncludesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PreReleaseVersionsResponseFromJSON,
    PreReleaseVersionsResponseToJSON,
    PrereleaseVersionResponseFromJSON,
    PrereleaseVersionResponseToJSON,
} from '../models';

export interface PreReleaseVersionsAppGetToOneRelatedRequest {
    id: string;
    fieldsApps?: Array<PreReleaseVersionsAppGetToOneRelatedFieldsAppsEnum>;
}

export interface PreReleaseVersionsBuildsGetToManyRelatedRequest {
    id: string;
    fieldsBuilds?: Array<PreReleaseVersionsBuildsGetToManyRelatedFieldsBuildsEnum>;
    limit?: number;
}

export interface PreReleaseVersionsGetCollectionRequest {
    filterBuildsExpired?: Array<string>;
    filterBuildsProcessingState?: Array<PreReleaseVersionsGetCollectionFilterBuildsProcessingStateEnum>;
    filterBuildsVersion?: Array<string>;
    filterPlatform?: Array<PreReleaseVersionsGetCollectionFilterPlatformEnum>;
    filterVersion?: Array<string>;
    filterApp?: Array<string>;
    filterBuilds?: Array<string>;
    sort?: Array<PreReleaseVersionsGetCollectionSortEnum>;
    fieldsPreReleaseVersions?: Array<PreReleaseVersionsGetCollectionFieldsPreReleaseVersionsEnum>;
    fieldsBuilds?: Array<PreReleaseVersionsGetCollectionFieldsBuildsEnum>;
    fieldsApps?: Array<PreReleaseVersionsGetCollectionFieldsAppsEnum>;
    limit?: number;
    include?: Array<PreReleaseVersionsGetCollectionIncludeEnum>;
    limitBuilds?: number;
}

export interface PreReleaseVersionsGetInstanceRequest {
    id: string;
    fieldsPreReleaseVersions?: Array<PreReleaseVersionsGetInstanceFieldsPreReleaseVersionsEnum>;
    fieldsBuilds?: Array<PreReleaseVersionsGetInstanceFieldsBuildsEnum>;
    fieldsApps?: Array<PreReleaseVersionsGetInstanceFieldsAppsEnum>;
    include?: Array<PreReleaseVersionsGetInstanceIncludeEnum>;
    limitBuilds?: number;
}

/**
 * 
 */
export class PreReleaseVersionsApi extends runtime.BaseAPI {

    /**
     */
    async preReleaseVersionsAppGetToOneRelatedRaw(requestParameters: PreReleaseVersionsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling preReleaseVersionsAppGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/preReleaseVersions/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async preReleaseVersionsAppGetToOneRelated(requestParameters: PreReleaseVersionsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppWithoutIncludesResponse> {
        const response = await this.preReleaseVersionsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async preReleaseVersionsBuildsGetToManyRelatedRaw(requestParameters: PreReleaseVersionsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling preReleaseVersionsBuildsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/preReleaseVersions/{id}/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async preReleaseVersionsBuildsGetToManyRelated(requestParameters: PreReleaseVersionsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildsWithoutIncludesResponse> {
        const response = await this.preReleaseVersionsBuildsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async preReleaseVersionsGetCollectionRaw(requestParameters: PreReleaseVersionsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreReleaseVersionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterBuildsExpired) {
            queryParameters['filter[builds.expired]'] = requestParameters.filterBuildsExpired.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBuildsProcessingState) {
            queryParameters['filter[builds.processingState]'] = requestParameters.filterBuildsProcessingState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBuildsVersion) {
            queryParameters['filter[builds.version]'] = requestParameters.filterBuildsVersion.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterVersion) {
            queryParameters['filter[version]'] = requestParameters.filterVersion.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBuilds) {
            queryParameters['filter[builds]'] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/preReleaseVersions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreReleaseVersionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async preReleaseVersionsGetCollection(requestParameters: PreReleaseVersionsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreReleaseVersionsResponse> {
        const response = await this.preReleaseVersionsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async preReleaseVersionsGetInstanceRaw(requestParameters: PreReleaseVersionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrereleaseVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling preReleaseVersionsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/preReleaseVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrereleaseVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async preReleaseVersionsGetInstance(requestParameters: PreReleaseVersionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrereleaseVersionResponse> {
        const response = await this.preReleaseVersionsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PreReleaseVersionsAppGetToOneRelatedFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type PreReleaseVersionsAppGetToOneRelatedFieldsAppsEnum = typeof PreReleaseVersionsAppGetToOneRelatedFieldsAppsEnum[keyof typeof PreReleaseVersionsAppGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const PreReleaseVersionsBuildsGetToManyRelatedFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type PreReleaseVersionsBuildsGetToManyRelatedFieldsBuildsEnum = typeof PreReleaseVersionsBuildsGetToManyRelatedFieldsBuildsEnum[keyof typeof PreReleaseVersionsBuildsGetToManyRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetCollectionFilterBuildsProcessingStateEnum = {
    Processing: 'PROCESSING',
    Failed: 'FAILED',
    Invalid: 'INVALID',
    Valid: 'VALID'
} as const;
export type PreReleaseVersionsGetCollectionFilterBuildsProcessingStateEnum = typeof PreReleaseVersionsGetCollectionFilterBuildsProcessingStateEnum[keyof typeof PreReleaseVersionsGetCollectionFilterBuildsProcessingStateEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetCollectionFilterPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type PreReleaseVersionsGetCollectionFilterPlatformEnum = typeof PreReleaseVersionsGetCollectionFilterPlatformEnum[keyof typeof PreReleaseVersionsGetCollectionFilterPlatformEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetCollectionSortEnum = {
    Version: 'version',
    Version: '-version'
} as const;
export type PreReleaseVersionsGetCollectionSortEnum = typeof PreReleaseVersionsGetCollectionSortEnum[keyof typeof PreReleaseVersionsGetCollectionSortEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetCollectionFieldsPreReleaseVersionsEnum = {
    Version: 'version',
    Platform: 'platform',
    Builds: 'builds',
    App: 'app'
} as const;
export type PreReleaseVersionsGetCollectionFieldsPreReleaseVersionsEnum = typeof PreReleaseVersionsGetCollectionFieldsPreReleaseVersionsEnum[keyof typeof PreReleaseVersionsGetCollectionFieldsPreReleaseVersionsEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetCollectionFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type PreReleaseVersionsGetCollectionFieldsBuildsEnum = typeof PreReleaseVersionsGetCollectionFieldsBuildsEnum[keyof typeof PreReleaseVersionsGetCollectionFieldsBuildsEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetCollectionFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type PreReleaseVersionsGetCollectionFieldsAppsEnum = typeof PreReleaseVersionsGetCollectionFieldsAppsEnum[keyof typeof PreReleaseVersionsGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetCollectionIncludeEnum = {
    Builds: 'builds',
    App: 'app'
} as const;
export type PreReleaseVersionsGetCollectionIncludeEnum = typeof PreReleaseVersionsGetCollectionIncludeEnum[keyof typeof PreReleaseVersionsGetCollectionIncludeEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetInstanceFieldsPreReleaseVersionsEnum = {
    Version: 'version',
    Platform: 'platform',
    Builds: 'builds',
    App: 'app'
} as const;
export type PreReleaseVersionsGetInstanceFieldsPreReleaseVersionsEnum = typeof PreReleaseVersionsGetInstanceFieldsPreReleaseVersionsEnum[keyof typeof PreReleaseVersionsGetInstanceFieldsPreReleaseVersionsEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetInstanceFieldsBuildsEnum = {
    Version: 'version',
    UploadedDate: 'uploadedDate',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    MinOsVersion: 'minOsVersion',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    IconAssetToken: 'iconAssetToken',
    ProcessingState: 'processingState',
    BuildAudienceType: 'buildAudienceType',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    PreReleaseVersion: 'preReleaseVersion',
    IndividualTesters: 'individualTesters',
    BetaGroups: 'betaGroups',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    App: 'app',
    BuildBetaDetail: 'buildBetaDetail',
    AppStoreVersion: 'appStoreVersion',
    Icons: 'icons',
    BuildBundles: 'buildBundles',
    PerfPowerMetrics: 'perfPowerMetrics',
    DiagnosticSignatures: 'diagnosticSignatures'
} as const;
export type PreReleaseVersionsGetInstanceFieldsBuildsEnum = typeof PreReleaseVersionsGetInstanceFieldsBuildsEnum[keyof typeof PreReleaseVersionsGetInstanceFieldsBuildsEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetInstanceFieldsAppsEnum = {
    Name: 'name',
    BundleId: 'bundleId',
    Sku: 'sku',
    PrimaryLocale: 'primaryLocale',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    StreamlinedPurchasingEnabled: 'streamlinedPurchasingEnabled',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    CiProduct: 'ciProduct',
    BetaTesters: 'betaTesters',
    BetaGroups: 'betaGroups',
    AppStoreVersions: 'appStoreVersions',
    PreReleaseVersions: 'preReleaseVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    Builds: 'builds',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    AppInfos: 'appInfos',
    AppClips: 'appClips',
    AppPricePoints: 'appPricePoints',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    AppPriceSchedule: 'appPriceSchedule',
    AppAvailabilityV2: 'appAvailabilityV2',
    InAppPurchases: 'inAppPurchases',
    SubscriptionGroups: 'subscriptionGroups',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    PerfPowerMetrics: 'perfPowerMetrics',
    AppCustomProductPages: 'appCustomProductPages',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PromotedPurchases: 'promotedPurchases',
    AppEvents: 'appEvents',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    CustomerReviews: 'customerReviews',
    GameCenterDetail: 'gameCenterDetail',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    MarketplaceSearchDetail: 'marketplaceSearchDetail'
} as const;
export type PreReleaseVersionsGetInstanceFieldsAppsEnum = typeof PreReleaseVersionsGetInstanceFieldsAppsEnum[keyof typeof PreReleaseVersionsGetInstanceFieldsAppsEnum];
/**
 * @export
 */
export const PreReleaseVersionsGetInstanceIncludeEnum = {
    Builds: 'builds',
    App: 'app'
} as const;
export type PreReleaseVersionsGetInstanceIncludeEnum = typeof PreReleaseVersionsGetInstanceIncludeEnum[keyof typeof PreReleaseVersionsGetInstanceIncludeEnum];
