/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SubscriptionImageCreateRequest,
  SubscriptionImageResponse,
  SubscriptionImageUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SubscriptionImageCreateRequestFromJSON,
    SubscriptionImageCreateRequestToJSON,
    SubscriptionImageResponseFromJSON,
    SubscriptionImageResponseToJSON,
    SubscriptionImageUpdateRequestFromJSON,
    SubscriptionImageUpdateRequestToJSON,
} from '../models';

export interface SubscriptionImagesCreateInstanceRequest {
    subscriptionImageCreateRequest: SubscriptionImageCreateRequest;
}

export interface SubscriptionImagesDeleteInstanceRequest {
    id: string;
}

export interface SubscriptionImagesGetInstanceRequest {
    id: string;
    fieldsSubscriptionImages?: Array<SubscriptionImagesGetInstanceFieldsSubscriptionImagesEnum>;
    include?: Array<SubscriptionImagesGetInstanceIncludeEnum>;
}

export interface SubscriptionImagesUpdateInstanceRequest {
    id: string;
    subscriptionImageUpdateRequest: SubscriptionImageUpdateRequest;
}

/**
 * 
 */
export class SubscriptionImagesApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionImagesCreateInstanceRaw(requestParameters: SubscriptionImagesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionImageResponse>> {
        if (requestParameters.subscriptionImageCreateRequest === null || requestParameters.subscriptionImageCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionImageCreateRequest','Required parameter requestParameters.subscriptionImageCreateRequest was null or undefined when calling subscriptionImagesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionImages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionImageCreateRequestToJSON(requestParameters.subscriptionImageCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionImagesCreateInstance(requestParameters: SubscriptionImagesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionImageResponse> {
        const response = await this.subscriptionImagesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionImagesDeleteInstanceRaw(requestParameters: SubscriptionImagesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionImagesDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionImages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async subscriptionImagesDeleteInstance(requestParameters: SubscriptionImagesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionImagesDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async subscriptionImagesGetInstanceRaw(requestParameters: SubscriptionImagesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionImageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionImagesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptionImages) {
            queryParameters['fields[subscriptionImages]'] = requestParameters.fieldsSubscriptionImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionImages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionImagesGetInstance(requestParameters: SubscriptionImagesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionImageResponse> {
        const response = await this.subscriptionImagesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionImagesUpdateInstanceRaw(requestParameters: SubscriptionImagesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionImageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionImagesUpdateInstance.');
        }

        if (requestParameters.subscriptionImageUpdateRequest === null || requestParameters.subscriptionImageUpdateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionImageUpdateRequest','Required parameter requestParameters.subscriptionImageUpdateRequest was null or undefined when calling subscriptionImagesUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionImages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionImageUpdateRequestToJSON(requestParameters.subscriptionImageUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionImagesUpdateInstance(requestParameters: SubscriptionImagesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionImageResponse> {
        const response = await this.subscriptionImagesUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SubscriptionImagesGetInstanceFieldsSubscriptionImagesEnum = {
    FileSize: 'fileSize',
    FileName: 'fileName',
    SourceFileChecksum: 'sourceFileChecksum',
    AssetToken: 'assetToken',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    State: 'state',
    Subscription: 'subscription'
} as const;
export type SubscriptionImagesGetInstanceFieldsSubscriptionImagesEnum = typeof SubscriptionImagesGetInstanceFieldsSubscriptionImagesEnum[keyof typeof SubscriptionImagesGetInstanceFieldsSubscriptionImagesEnum];
/**
 * @export
 */
export const SubscriptionImagesGetInstanceIncludeEnum = {
    Subscription: 'subscription'
} as const;
export type SubscriptionImagesGetInstanceIncludeEnum = typeof SubscriptionImagesGetInstanceIncludeEnum[keyof typeof SubscriptionImagesGetInstanceIncludeEnum];
